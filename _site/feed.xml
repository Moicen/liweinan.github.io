<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>weinan.io</title>
    <description>Weinan's Sandbox</description>
    <link></link>
    
      
        <item>
          <title>Adventures in JDBC and the PostgreSQL JDBC driver: Part 3 - Analyzing the JDBC driver registration process</title>
          <description>&lt;p&gt;In last part of the series of the articles, we have made a sample project to load the PostgreSQL JDBC driver into the running Java virtual machine. In this part, we will examine the JDBC driver startup process.&lt;/p&gt;

&lt;p&gt;In our example, we have written a &lt;code class=&quot;highlighter-rouge&quot;&gt;DirectConnection&lt;/code&gt; class to load and use the JDBC driver. The code to load the JDBC driver is this line at the beginning of the class:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.postgresql.Driver&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above line of code used the &lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang.Class.forName(...)&lt;/code&gt; method to invoke the class loader to load the &lt;code class=&quot;highlighter-rouge&quot;&gt;org.postgresql.Driver&lt;/code&gt; class. The &lt;code class=&quot;highlighter-rouge&quot;&gt;org.postgresql.Driver&lt;/code&gt; class implements the &lt;code class=&quot;highlighter-rouge&quot;&gt;java.sql.Driver&lt;/code&gt; interface, and it provides the methods to connect to the underlying database server.&lt;/p&gt;

&lt;p&gt;Database vendors should implement their own drivers. From the users perspective, they can use the standard JDBC APIs to connect to the underlying database system without worrying about the differences between database vendors.&lt;/p&gt;

&lt;p&gt;Here is the class diagram of the &lt;code class=&quot;highlighter-rouge&quot;&gt;org.postgresql.Driver&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/jdbc/org.postgresql.Driver.png&quot; alt=&quot;/assets/jdbc/org.postgresql.Driver.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above class diagram, we can see the &lt;code class=&quot;highlighter-rouge&quot;&gt;org.postgresql.Driver&lt;/code&gt; class has a &lt;code class=&quot;highlighter-rouge&quot;&gt;connect(...)&lt;/code&gt; method to handle the connection to the underlying database server. Here is the relative code in &lt;code class=&quot;highlighter-rouge&quot;&gt;connect(...)&lt;/code&gt; method to make the connection:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From above code, we can see the &lt;code class=&quot;highlighter-rouge&quot;&gt;connect(...)&lt;/code&gt; method calls the &lt;code class=&quot;highlighter-rouge&quot;&gt;makeConnection(...)&lt;/code&gt; method for database connection. Here is the code of &lt;code class=&quot;highlighter-rouge&quot;&gt;makeConnection(...)&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private static Connection makeConnection(String url, Properties props) throws SQLException {
	return new PgConnection(hostSpecs(props), user(props), database(props), props, url);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From above code, we can see that an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;org.postgresql.PgConnection&lt;/code&gt; class is created. &lt;code class=&quot;highlighter-rouge&quot;&gt;PgConnection&lt;/code&gt; is a huge class that wraps the calls and operations to underlying database. We will check the detail of this class later.&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;org.postgresql.Driver&lt;/code&gt;, there is static code that will be called during class loading. Here is the relative code:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	  &lt;span class=&quot;c1&quot;&gt;// moved the registerDriver from the constructor to here&lt;/span&gt;
	  &lt;span class=&quot;c1&quot;&gt;// because some clients call the driver themselves (I know, as&lt;/span&gt;
	  &lt;span class=&quot;c1&quot;&gt;// my early jdbc work did - and that was based on other examples).&lt;/span&gt;
	  &lt;span class=&quot;c1&quot;&gt;// Placing it here, means that the driver is registered once only.&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExceptionInInitializerError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above static code will call &lt;code class=&quot;highlighter-rouge&quot;&gt;register()&lt;/code&gt; method to register the driver itself into &lt;code class=&quot;highlighter-rouge&quot;&gt;java.sql.DriverManager&lt;/code&gt;. Here is the code of &lt;code class=&quot;highlighter-rouge&quot;&gt;register()&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * Register the driver against {@link DriverManager}. This is done automatically when the class is
 * loaded. Dropping the driver from DriverManager's list is possible using {@link #deregister()}
 * method.
 *
 * @throws IllegalStateException if the driver is already registered
 * @throws SQLException if registering the driver fails
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isRegistered&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Driver is already registered. It can only be registered once.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Driver&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registeredDriver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DriverManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerDriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;registeredDriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registeredDriver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registeredDriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From above code, we can see the &lt;code class=&quot;highlighter-rouge&quot;&gt;register()&lt;/code&gt; method in &lt;code class=&quot;highlighter-rouge&quot;&gt;org.postgresql.Driver&lt;/code&gt; class register itself into the &lt;code class=&quot;highlighter-rouge&quot;&gt;java.sql.DriverManager&lt;/code&gt; class. The &lt;code class=&quot;highlighter-rouge&quot;&gt;java.sql.DriverManager&lt;/code&gt; is provided by JDK. It’s not an interface,  instead it is a class provided by JDBC library that for managing all the database drivers loaded into Java virtual machine. All the driver implementations need to register itself into DriverManager during class loading phase. The &lt;code class=&quot;highlighter-rouge&quot;&gt;org.postgresql.Driver&lt;/code&gt; follows this rule as we see in above. Here is the class diagram of the &lt;code class=&quot;highlighter-rouge&quot;&gt;java.sql.DriverManager&lt;/code&gt; class:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/jdbc/DriverManager.png&quot; alt=&quot;/assets/jdbc/DriverManager.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above diagram, we can see that the &lt;code class=&quot;highlighter-rouge&quot;&gt;java.sql.DriverManager&lt;/code&gt; provides methods like &lt;code class=&quot;highlighter-rouge&quot;&gt;registerDriver(...)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;deregisterDriver(...)&lt;/code&gt; for the drivers to register or deregister themselves. In addition, it provides &lt;code class=&quot;highlighter-rouge&quot;&gt;getConnection(...)&lt;/code&gt; methods to the users. In our own &lt;code class=&quot;highlighter-rouge&quot;&gt;DirectConnection&lt;/code&gt; example, we use the &lt;code class=&quot;highlighter-rouge&quot;&gt;java.sql.DriverManager&lt;/code&gt; to get the connection, and here is the relative code:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;jdbc:postgresql://localhost/weli&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Properties&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;weli&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ssl&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DriverManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above code defines the properties of our local database server, and pass it to &lt;code class=&quot;highlighter-rouge&quot;&gt;java.sql.DriverManager&lt;/code&gt; to get the connection. Because the &lt;code class=&quot;highlighter-rouge&quot;&gt;org.postgresql.Driver&lt;/code&gt; has been registered into &lt;code class=&quot;highlighter-rouge&quot;&gt;java.sql.DriverManager&lt;/code&gt;, so it can find the the correct driver and call it the make physical connections to underlying database system.&lt;/p&gt;

&lt;p&gt;The url to connect to our PostgreSQL database server is &lt;code class=&quot;highlighter-rouge&quot;&gt;jdbc:postgresql://localhost/weli&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;java.sql.DriverManager&lt;/code&gt; used this information to find the correct driver to use. On the other side, the &lt;code class=&quot;highlighter-rouge&quot;&gt;org.postgresql.Driver&lt;/code&gt; class needs to detect the &lt;code class=&quot;highlighter-rouge&quot;&gt;jdbc:postgresql&lt;/code&gt; string correctly to handle the connection request sent by &lt;code class=&quot;highlighter-rouge&quot;&gt;java.sql.DriverManager&lt;/code&gt;. Here is the relative code in the &lt;code class=&quot;highlighter-rouge&quot;&gt;connect(...)&lt;/code&gt; method of &lt;code class=&quot;highlighter-rouge&quot;&gt;org.postgresql.Driver&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Properties&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// get defaults&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Properties&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jdbc:postgresql:&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above code shows that the &lt;code class=&quot;highlighter-rouge&quot;&gt;connect(...)&lt;/code&gt; method of the &lt;code class=&quot;highlighter-rouge&quot;&gt;org.postgresql.Driver&lt;/code&gt; will check if the request is for “jdbc:postgresql:”. If the connection request isn’t for PostgreSQL database, it will just return null and let &lt;code class=&quot;highlighter-rouge&quot;&gt;java.sql.DriverManager&lt;/code&gt; to try other database drivers. The &lt;code class=&quot;highlighter-rouge&quot;&gt;getConnection(...)&lt;/code&gt; method in &lt;code class=&quot;highlighter-rouge&quot;&gt;java.sql.DriverManager&lt;/code&gt; will traverse the registered database drivers to see who can handle the connection request from the user. Here is the relative code in &lt;code class=&quot;highlighter-rouge&quot;&gt;getConnection(...)&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DriverInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aDriver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registeredDrivers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// If the caller does not have permission to load the driver then&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// skip it.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isDriverAllowed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aDriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callerCL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;    trying &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aDriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;con&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aDriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;con&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// Success!&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;getConnection returning &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aDriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;con&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reason&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;reason&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;    skipping: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aDriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From the above code, we can see &lt;code class=&quot;highlighter-rouge&quot;&gt;java.sql.DriverManager&lt;/code&gt; will check each registered database driver, and try to use it to handle the connect request. If a driver can handle the connection, it will return the &lt;code class=&quot;highlighter-rouge&quot;&gt;java.sql.Connection&lt;/code&gt; class. For PostgreSQL driver, it will return the &lt;code class=&quot;highlighter-rouge&quot;&gt;PgConnection&lt;/code&gt; class instance. We have seen this in &lt;code class=&quot;highlighter-rouge&quot;&gt;makeConnection(...)&lt;/code&gt; method of &lt;code class=&quot;highlighter-rouge&quot;&gt;org.postgresql.Driver&lt;/code&gt; class, which is called by the &lt;code class=&quot;highlighter-rouge&quot;&gt;connect(...)&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Until now, we have learned the loading process of the JDBC driver. In addition, we hav checked how does JDBC manages the drivers and use them to interact with the underlying database system. In the next part of the articles, let’s check the &lt;code class=&quot;highlighter-rouge&quot;&gt;java.sql.Connection&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;org.postgresql.PGConnection&lt;/code&gt; classes in detail.&lt;/p&gt;
</description>
          <pubDate>2017-05-08T00:00:00+00:00</pubDate>
          <link>/2017/05/08/jdbc-part3.html</link>
          <guid isPermaLink="true">/2017/05/08/jdbc-part3.html</guid>
        </item>
      
    
      
        <item>
          <title>Adventures in JDBC and the PostgreSQL JDBC driver: Part 2 - Using JDBC driver to communicate with database server</title>
          <description>&lt;p&gt;This is the second part of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Adventures in JDBC and the PostgreSQL JDBC driver&lt;/code&gt; series of articles. In the first part, we have installed the PostgreSQL database server, and we have downloaded the PostgreSQL JDBC driver source and compile it. In this part we will create a sample application to use JDBC to interact with the underlying database system. The first step is the create a sample application.&lt;/p&gt;

&lt;h2 id=&quot;creating-sample-application&quot;&gt;Creating Sample Application&lt;/h2&gt;

&lt;p&gt;Now let’s write a sample application, and the project name will be &lt;code class=&quot;highlighter-rouge&quot;&gt;play-with-jdbc&lt;/code&gt;. The first step is to create a directory for the project:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir play-with-jdbc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above command will create the &lt;code class=&quot;highlighter-rouge&quot;&gt;play-with-jdbc&lt;/code&gt; directory. I’d like to use Gradle to manage this project, because Gradle can reuse the local Maven repository, and it’s more lightweight to start a small new project compared with Maven. Firstly we  need to enter the &lt;code class=&quot;highlighter-rouge&quot;&gt;play-with-jdbc&lt;/code&gt; directory:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd play-with-jdbc/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After entering the directory, we need to run the gradle &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; command to create a Java project. Here is the command and its output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gradle init --type java-library
Starting a new Gradle Daemon for this build (subsequent builds will be faster).
:wrapper
:init

BUILD SUCCESSFUL

Total time: 20.568 secs
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above command will create a project with type &lt;code class=&quot;highlighter-rouge&quot;&gt;java-library&lt;/code&gt;. We can check the generated files in below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ tree
.
├── build.gradle
├── gradle
│   └── wrapper
│       ├── gradle-wrapper.jar
│       └── gradle-wrapper.properties
├── gradlew
├── gradlew.bat
├── settings.gradle
└── src
    ├── main
    │   └── java
    │       └── Library.java
    └── test
        └── java
            └── LibraryTest.java

7 directories, 8 files
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From the above output, we can see the project created by &lt;code class=&quot;highlighter-rouge&quot;&gt;gradle&lt;/code&gt; is following the Maven project structure. In addition, it provides a &lt;code class=&quot;highlighter-rouge&quot;&gt;gradlew&lt;/code&gt; command to wrap and invoke Gradle in this project.  Now let’s build the project with this command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./gradlew build
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above command will start to download Gradle into the project directory for the first time of running, and this is convenient for us to distribute our project to other people that don’t have Gradle installed on their machines. Here is the output of the above command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Starting a new Gradle Daemon for this build (subsequent builds will be faster).
:compileJava
:processResources UP-TO-DATE
:classes
:jar
:assemble
:compileTestJava
:processTestResources UP-TO-DATE
:testClasses
:test
:check
:build

BUILD SUCCESSFUL

Total time: 16.79 secs
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From the above output, we can see the classes are compiled and packaged into a jar file. The compiled files will be put into &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt; directory. Here is the generated content of the &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt; directory:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ls build
classes          libs             test-results
dependency-cache reports          tmp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above output shows the content in &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt; directory. We can find the final jar file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;libs&lt;/code&gt; directory:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ls build/libs/
play-with-jdbc.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above jar file contains the classes in the project. Now we should configure the project to use the JDBC driver we compiled. Firstly we need to find the PostgreSQL JDBC driver we compiled. By convention, Maven puts its installed jar file into &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.m2&lt;/code&gt; directory, so I can find it here:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ls ~/.m2/repository/org/postgresql/postgresql/42.0.1-SNAPSHOT/
_remote.repositories           maven-metadata-local.xml       postgresql-42.0.1-SNAPSHOT.jar postgresql-42.0.1-SNAPSHOT.pom
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above &lt;code class=&quot;highlighter-rouge&quot;&gt;postgresql-42.0.1-SNAPSHOT.jar&lt;/code&gt; is the library I will use in my &lt;code class=&quot;highlighter-rouge&quot;&gt;play-with-jdbc&lt;/code&gt; project. Now we need to open the &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; file in &lt;code class=&quot;highlighter-rouge&quot;&gt;play-with-jdbc&lt;/code&gt;, and add a line into the &lt;code class=&quot;highlighter-rouge&quot;&gt;repositories&lt;/code&gt; section:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mavenLocal()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above repository refers to the local &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.m2&lt;/code&gt; repository managed by Maven. Then we need to add a line into &lt;code class=&quot;highlighter-rouge&quot;&gt;dependencies&lt;/code&gt; section of &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;compile 'org.postgresql:postgresql:42.0.1-SNAPSHOT'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above line will make sure the &lt;code class=&quot;highlighter-rouge&quot;&gt;postgresql-42.0.1-SNAPSHOT.jar&lt;/code&gt; can be used during the compilation process. Now that we have prepared the project to use JDBC driver to connect to the database, let’s start to write some sample code to use the JDBC driver.&lt;/p&gt;

&lt;h2 id=&quot;using-the-postgresql-jdbc-driver&quot;&gt;Using the PostgreSQL JDBC driver&lt;/h2&gt;

&lt;p&gt;We can write a sample to use the JDBC interfaces and PostgreSQL driver to connect to the underlying database server. Here is the code:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;weinan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jdbc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.sql.Connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.sql.DriverManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * Created by weli on 30/04/2017.
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DirectConnection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.postgresql.Driver&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;jdbc:postgresql://localhost/weli&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Properties&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;weli&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ssl&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DriverManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above code loads the driver into the memory of virtual machine, and connects to the database server with the information like &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt;. We can put the above code into our project like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;src/main/java/io/weinan/jdbc/DirectConnection.java
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After adding the class file, we need to build the project using Gradle. To build the project, we need to add a &lt;code class=&quot;highlighter-rouge&quot;&gt;fatJar&lt;/code&gt; task into &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fatJar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Jar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;baseName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'-all'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zipTree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jar&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above task can build a jar file with all the dependencies included, and we need this task to include the &lt;code class=&quot;highlighter-rouge&quot;&gt;postgresql-42.0.1-SNAPSHOT.jar&lt;/code&gt; into the final jar for us. After the above task is added into &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;, we can build the project using the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./gradlew -q fatJar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above command will build the whole project, and produce a jar file with dependencies included. Here is the output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ls build/libs/
play-with-jdbc-all.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As the output shown above, we get the &lt;code class=&quot;highlighter-rouge&quot;&gt;play-with-jdbc-all.jar&lt;/code&gt;. Now we can use the above jar to invoke our class:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ java -cp build/libs/play-with-jdbc-all.jar io.weinan.jdbc.DirectConnection
org.postgresql.jdbc.PgConnection@6267c3bb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From the above output, we can see our code returns a connection to database, and the class that represents the connection is &lt;code class=&quot;highlighter-rouge&quot;&gt;org.postgresql.jdbc.PgConnection&lt;/code&gt;. That’s all for this article. In the next article, we will examining the driver loading process to see how the PostgreSQL JDBC driver works internally.&lt;/p&gt;

</description>
          <pubDate>2017-05-05T00:00:00+00:00</pubDate>
          <link>/2017/05/05/jdbc-part2.html</link>
          <guid isPermaLink="true">/2017/05/05/jdbc-part2.html</guid>
        </item>
      
    
      
        <item>
          <title>Adventures in JDBC and the PostgreSQL JDBC driver: Part 1 - Installing PostgreSQL database and JDBC driver</title>
          <description>&lt;p&gt;I want to make a deep understanding on JDBC specification and how does a database vendor implement it in its driver. So I will use the PostgreSQL JDBC driver to do the investigate in this series of the articles. The first part will be focus on the installation of the PostgreSQL database server and its JDBC driver.&lt;/p&gt;

&lt;h2 id=&quot;jdbc-and-the-postgresql-jdbc-driver&quot;&gt;JDBC and the PostgreSQL JDBC driver&lt;/h2&gt;

&lt;p&gt;The fullname of &lt;code class=&quot;highlighter-rouge&quot;&gt;JDBC&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;Java Database Connectivity&lt;/code&gt;, and it is a specification provided by JDK for the users to operate on the underlying databases. Databaes vendors need to implement the JDBC interfaces in their own driver libraries. For example, here is the PostgreSQL JDBC driver I downloaded from internet:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pwd
/Users/weli/projs/postgresql-jdbc-42.0-0.src
$ ls
CONTRIBUTING.md                        build.properties                       packaging                              release_notes.sh                       test-anorm-sbt
LICENSE                                certdir                                pgjdbc                                 release_notes_filter.pl                toolchains.xml
README.md                              codecov.yml                            pgjdbc-aggregate.iml                   settings.xml                           ubenchmark
backend_protocol_v4_wanted_features.md docs
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above output shows the PostgreSQL JDBC driver provided by PostgreSQL community. We can use the driver to connect to the database system and operate on databases. In this section, I’d like to introduce to you the basic usages of the PostgreSQL JDBC driver. The first step is to install the PostgreSQL database system and start the database server.&lt;/p&gt;

&lt;h3 id=&quot;installing-the-postgresql-database-system&quot;&gt;Installing the PostgreSQL database system&lt;/h3&gt;

&lt;p&gt;I am using the MacOS operation system, so I will use Homebrew to install the PostgreSQL. We can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;brew&lt;/code&gt; command to query the package:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ brew info postgresql
postgresql: stable 9.6.2 (bottled), HEAD
Object-relational database system
https://www.postgresql.org/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above command and its output shows the PostgreSQL that &lt;code class=&quot;highlighter-rouge&quot;&gt;brew&lt;/code&gt; provides. Currently the version of &lt;code class=&quot;highlighter-rouge&quot;&gt;postgresql&lt;/code&gt; in the repository is &lt;code class=&quot;highlighter-rouge&quot;&gt;9.6.2&lt;/code&gt;. The next step is to use &lt;code class=&quot;highlighter-rouge&quot;&gt;brew install&lt;/code&gt; command to install it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ brew install postgresql
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As the command shown above, it will install the &lt;code class=&quot;highlighter-rouge&quot;&gt;postgresql&lt;/code&gt; into your system. After installing the package onto the operating system, we need to initialize the database files for it to be ready to use. First we need to create a directory to store the database files, and here is the command to do so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo mkdir /usr/local/pgsql
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above command will create a &lt;code class=&quot;highlighter-rouge&quot;&gt;pgsql&lt;/code&gt; directory to store the database files that will be generated. We need to adjust the permission of this directory to make the owner to be ourself. Here is the command to do so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo chown weli /usr/local/pgsql
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above command will change the owner of the &lt;code class=&quot;highlighter-rouge&quot;&gt;pgsql&lt;/code&gt; directory myself. Then we can start to initialize the database files. Here is the command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ initdb -D /usr/local/pgsql/data
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The output of above command is like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The files belonging to this database system will be owned by user &quot;weli&quot;.
This user must also own the server process.

The database cluster will be initialized with locales
  COLLATE:  C
  CTYPE:    UTF-8
  MESSAGES: C
  MONETARY: C
  NUMERIC:  C
  TIME:     C
The default database encoding has accordingly been set to &quot;UTF8&quot;.
initdb: could not find suitable text search configuration for locale &quot;UTF-8&quot;
The default text search configuration will be set to &quot;simple&quot;.

Data page checksums are disabled.

creating directory /usr/local/pgsql/data ... ok
creating subdirectories ... ok
selecting default max_connections ... 100
selecting default shared_buffers ... 128MB
selecting dynamic shared memory implementation ... posix
creating configuration files ... ok
running bootstrap script ... ok
performing post-bootstrap initialization ... ok
syncing data to disk ... ok

WARNING: enabling &quot;trust&quot; authentication for local connections
You can change this by editing pg_hba.conf or using the option -A, or
--auth-local and --auth-host, the next time you run initdb.

Success. You can now start the database server using:

    pg_ctl -D /usr/local/pgsql/data -l logfile start

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The output shows that the database files have been initialized, and at last it provides the command to start the database server. We can enter the provided command to start the server:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pg_ctl -D /usr/local/pgsql/data -l logfile start
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If everything goes fine, we can see the output like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server starting
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As the output shown above, the database is start. Now we can create a blank database by &lt;code class=&quot;highlighter-rouge&quot;&gt;createdb&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ createdb weli
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As the command shown above, I created a database named &lt;code class=&quot;highlighter-rouge&quot;&gt;weli&lt;/code&gt;. Because postgresql client interface command &lt;code class=&quot;highlighter-rouge&quot;&gt;psql&lt;/code&gt; will try to connect to a database with the same name as the login user by default, so it is convienient to create such a database for testing. Now we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;psql&lt;/code&gt; command to connect to the database server:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ psql -U weli
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above command will help us to login to the command line interface of the database server:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;psql (9.6.2)
Type &quot;help&quot; for help.

weli=#
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As the above output shows, I logged into the database server and connected to the &lt;code class=&quot;highlighter-rouge&quot;&gt;weli&lt;/code&gt; database. Now I can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;\l&lt;/code&gt; command to list all the databases:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;weli=# \l
                         List of databases
   Name    | Owner | Encoding | Collate | Ctype | Access privileges
-----------+-------+----------+---------+-------+-------------------
 postgres  | weli  | UTF8     | C       | UTF-8 |
 template0 | weli  | UTF8     | C       | UTF-8 | =c/weli          +
           |       |          |         |       | weli=CTc/weli
 template1 | weli  | UTF8     | C       | UTF-8 | =c/weli          +
           |       |          |         |       | weli=CTc/weli
 weli      | weli  | UTF8     | C       | UTF-8 |
(4 rows)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From the above output, we can see there is a &lt;code class=&quot;highlighter-rouge&quot;&gt;postgres&lt;/code&gt; database and two template databases. There are created by the &lt;code class=&quot;highlighter-rouge&quot;&gt;initdb&lt;/code&gt; command by default. We will use our &lt;code class=&quot;highlighter-rouge&quot;&gt;weli&lt;/code&gt; database for playing. Now we need to create a table named &lt;code class=&quot;highlighter-rouge&quot;&gt;user_info&lt;/code&gt; in our database. Here is the SQL command to do so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE TABLE USER_INFO (
   ID INT PRIMARY KEY     NOT NULL,
   NAME           CHAR(50)    NOT NULL,
   AGE            INT     NOT NULL
);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can see the table &lt;code class=&quot;highlighter-rouge&quot;&gt;USER_INFO&lt;/code&gt; contains three fields: The &lt;code class=&quot;highlighter-rouge&quot;&gt;ID&lt;/code&gt; field has &lt;code class=&quot;highlighter-rouge&quot;&gt;INT&lt;/code&gt; type, and it is the primary key of the table; The &lt;code class=&quot;highlighter-rouge&quot;&gt;NAME&lt;/code&gt; field has the type of &lt;code class=&quot;highlighter-rouge&quot;&gt;CHAR(50)&lt;/code&gt;; The &lt;code class=&quot;highlighter-rouge&quot;&gt;AGE&lt;/code&gt; field has the type of &lt;code class=&quot;highlighter-rouge&quot;&gt;INT&lt;/code&gt;. Here is how the above command executed in command line interface:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;weli=# CREATE TABLE USER_INFO (
weli(#    ID INT PRIMARY KEY     NOT NULL,
weli(#    NAME           CHAR(50)    NOT NULL,
weli(#    AGE            INT     NOT NULL
weli(# );
CREATE TABLE
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From the above output, we can see the &lt;code class=&quot;highlighter-rouge&quot;&gt;CREATE TABLE&lt;/code&gt; command is executed without any problem. Now we can check the existance of the &lt;code class=&quot;highlighter-rouge&quot;&gt;user_info&lt;/code&gt; table with &lt;code class=&quot;highlighter-rouge&quot;&gt;\dt&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;weli=# \dt
         List of relations
 Schema |   Name    | Type  | Owner
--------+-----------+-------+-------
 public | user_info | table | weli
(1 row)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From the above command output, we can see the structure of the &lt;code class=&quot;highlighter-rouge&quot;&gt;user_info&lt;/code&gt;. Until now we have prepared our database server. The next step is to get the JDBC driver.&lt;/p&gt;

&lt;h3 id=&quot;fetching-the-postgresql-jdbc-driver&quot;&gt;Fetching the PostgreSQL JDBC driver&lt;/h3&gt;

&lt;p&gt;There are several ways to get the PostgreSQL JDBC driver. For common users, the most straigtforward way is to download the PostgreSQL JDBC driver from its website&lt;sup id=&quot;fnref:jdbcurl&quot;&gt;&lt;a href=&quot;#fn:jdbcurl&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. However, our goal in this chapter is to learn the implementation of the PostgreSQL JDBC driver, so we need to fetch the source code of the driver. The source code repository of the PostgreSQL JDBC driver is hosted on Github&lt;sup id=&quot;fnref:jdbcdriver&quot;&gt;&lt;a href=&quot;#fn:jdbcdriver&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. We can clone the &lt;code class=&quot;highlighter-rouge&quot;&gt;pgjdbc&lt;/code&gt; repository from Github, and here is the command to do so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://github.com/pgjdbc/pgjdbc.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The cloned repository is like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ls pgjdbc
CONTRIBUTING.md                        codecov.yml                            release_notes_filter.pl
LICENSE                                docs                                   settings.xml
README.md                              packaging                              ssltest.properties
backend_protocol_v4_wanted_features.md pgjdbc                                 test-anorm-sbt
build.properties                       pom.xml                                toolchains.xml
certdir                                release_notes.sh                       ubenchmark
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can see the PostgreSQL JDBC driver is Maven based project. Let’s build it and install it to our local maven repository. Here is the command to compile and install the &lt;code class=&quot;highlighter-rouge&quot;&gt;pgjdbc&lt;/code&gt; project:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn -Dmaven.test.skip=true install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above command will compile the project and bypass all the tests, and then it will install the generated jar files into our local maven repository. Here is the output of the above command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[INFO] PostgreSQL JDBC driver - JDBC 4.2 .................. SUCCESS [  3.099 s]
[INFO] PostgreSQL JDBC driver - benchmarks ................ SUCCESS [ 44.638 s]
[INFO] PostgreSQL JDBC driver aggregate ................... SUCCESS [  0.003 s]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After successfully compiling and installing the PostgreSQL JDBC driver, we can start to use it. I’ll put the usage of the driver in next article.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;&lt;em&gt;References&lt;/em&gt;&lt;/h2&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:jdbcurl&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://jdbc.postgresql.org/&quot;&gt;https://jdbc.postgresql.org/&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:jdbcurl&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:jdbcdriver&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/pgjdbc/pgjdbc&quot;&gt;https://github.com/pgjdbc/pgjdbc&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:jdbcdriver&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
          <pubDate>2017-05-04T00:00:00+00:00</pubDate>
          <link>/2017/05/04/jdbc-part1.html</link>
          <guid isPermaLink="true">/2017/05/04/jdbc-part1.html</guid>
        </item>
      
    
      
        <item>
          <title>An Introduction To The CORBA And Java RMI-IIOP</title>
          <description>&lt;p&gt;In this article, I’d like to introduce to you the Common Object Request Broker Architecture, which is abbreviated as CORBA&lt;sup id=&quot;fnref:corba&quot;&gt;&lt;a href=&quot;#fn:corba&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, and its implementation in Java, which is named Java RMI-IIOP. You may think the CORBA is an outdated technology, actually it is still acting as the the basic architecture of distributed object invocation field. Many of state-of-the-art projects are built on top of CORBA. For example, Narayana, the transaction processing project provided by JBoss community, use many idl files to describe its OTS implementation interfaces. Narayana is acting as the transaction processing subsystem in Wildfly&lt;sup id=&quot;fnref:wildfly&quot;&gt;&lt;a href=&quot;#fn:wildfly&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Java RMI&lt;sup id=&quot;fnref:rmi&quot;&gt;&lt;a href=&quot;#fn:rmi&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; is an distributed object invocation solution provided from Java community, and it was then enhenced by the RMI-IIOP standard to fully compliant with the CORBA standard. Because CORBA provides platform independency, so the Java RMI-IIOP allows the Java applications to communicate with the systems that conforms to the CORBA that is not written in Java.&lt;/p&gt;

&lt;p&gt;The CORBA and Java RMI-IIOP technologies are usually hide from the application level to the end users, but they are broadly used in middleware level as implemenations of remoting and transaction processing subsystems. In this article, I’d like to give you an introduction on these technologies. First let’s learn how to write a CORBA application.&lt;/p&gt;

&lt;h2 id=&quot;writing-an-corba-application-in-java&quot;&gt;Writing an CORBA Application In Java&lt;/h2&gt;

&lt;p&gt;In this section, we need to know that CORBA uses a platform independent description language called &lt;code class=&quot;highlighter-rouge&quot;&gt;IDL&lt;/code&gt;&lt;sup id=&quot;fnref:idl&quot;&gt;&lt;a href=&quot;#fn:idl&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; for the users to describe their application interfaces. The fullname of &lt;code class=&quot;highlighter-rouge&quot;&gt;IDL&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;Interface description language&lt;/code&gt;, and its grammar looks like C++ language but it’s not the same. Java has an IDL compiler called &lt;code class=&quot;highlighter-rouge&quot;&gt;idlj&lt;/code&gt; that can compile the IDL file into Java classes. In this section, we will write an &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt; interface using the IDL format, and then we will use the &lt;code class=&quot;highlighter-rouge&quot;&gt;idlj&lt;/code&gt; compiler to compile it to Java classes. The first step is to write the IDL file to descibe our application interface.&lt;/p&gt;

&lt;h3 id=&quot;writing-idl&quot;&gt;Writing IDL&lt;/h3&gt;

&lt;p&gt;Firstly let’s write an IDL file named &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello.idl&lt;/code&gt; as following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module HelloApp
{
	interface Hello
	{
		string sayHello();
	};
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above interface is named &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt;, and it contains a &lt;code class=&quot;highlighter-rouge&quot;&gt;sayHello()&lt;/code&gt; method that will return string typed data. Now we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;idlj&lt;/code&gt; compiler to compile it.&lt;/p&gt;

&lt;h3 id=&quot;generating-the-client-side-classes&quot;&gt;Generating The Client Side Classes&lt;/h3&gt;

&lt;p&gt;Here is the &lt;code class=&quot;highlighter-rouge&quot;&gt;idlj&lt;/code&gt; command to generate the client side Java classes from the idl file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ idlj -fclient Hello.idl
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As the above command shows, we used We have used the &lt;code class=&quot;highlighter-rouge&quot;&gt;-fclient&lt;/code&gt; option to tell &lt;code class=&quot;highlighter-rouge&quot;&gt;idlj&lt;/code&gt; to generate the client side classes for us, and it generated these classes into a &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloApp&lt;/code&gt; directory. Here is the output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ls HelloApp/
Hello.java           HelloHelper.java     HelloHolder.java     HelloOperations.java _HelloStub.java
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above command output shows the classes that is related with the client side. Before explaining these classes, we need to have an understanding on the basic CORBA architecture. Generally speaking, CORBA divides the whole system into three parts: The naming service; The client side; The servant side.&lt;/p&gt;

&lt;p&gt;Firstly, we need to know CORBA is a netword based architecture, which means the three sides can be located at different places. The servant side acts like a server that accepts the calls from clients, and the client side will make the calls to the servant side. The naming service is used for the servant side to register the service it provides, and the client side will fetch the servant information from the naming service. The naming service is usally a server that listens to network for the servants to register/unregister themselves, and for the clients to fetch the servants information that they need.&lt;/p&gt;

&lt;p&gt;From the client side of the view, it will just call the interface methods like it is a local method, and all the underlying network communications and details are hidden from the perspective of users. The benefit to use CORBA is that we just need to define a common interface using the IDL file, and then we could use different languages to implement the interface. There are tools in each language to generate helper code from the IDL files. In this article, I will focus on Java implementation. Now let’s turn back to see the details of the client side classes generated by the &lt;code class=&quot;highlighter-rouge&quot;&gt;idlj&lt;/code&gt; compiler. The relationship of above classes is shown as below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-05-03/hello-clients.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above class diagram, we can see the &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloOperations&lt;/code&gt; interface defines the &lt;code class=&quot;highlighter-rouge&quot;&gt;sayHello()&lt;/code&gt; method we wrote in &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello.idl&lt;/code&gt;, and then the &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt; interface extends the &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloOperations&lt;/code&gt; interface. The &lt;code class=&quot;highlighter-rouge&quot;&gt;_HelloStub&lt;/code&gt; class implements the &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt; interface, and the client side will use it to call the &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt; implementation on servant side. We haven’t written an implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt; interface for servant side, and we’ll do it later. Now let’s check the &lt;code class=&quot;highlighter-rouge&quot;&gt;sayHello()&lt;/code&gt; method generated in &lt;code class=&quot;highlighter-rouge&quot;&gt;_HelloStub&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public String sayHello ()
{
        org.omg.CORBA.portable.InputStream $in = null;
        try {
            org.omg.CORBA.portable.OutputStream $out = _request (&quot;sayHello&quot;, true);
            $in = _invoke ($out);
            String $result = $in.read_string ();
            return $result;
        } catch (org.omg.CORBA.portable.ApplicationException $ex) {
            $in = $ex.getInputStream ();
            String _id = $ex.getId ();
            throw new org.omg.CORBA.MARSHAL (_id);
        } catch (org.omg.CORBA.portable.RemarshalException $rm) {
            return sayHello (        );
        } finally {
            _releaseReply ($in);
        }
} // sayHello
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From the above code we can see the method uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;InputStream&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;OutputStream&lt;/code&gt; to represent the request and the response of the call. In addition, the &lt;code class=&quot;highlighter-rouge&quot;&gt;_request()&lt;/code&gt; method and &lt;code class=&quot;highlighter-rouge&quot;&gt;_invoke()&lt;/code&gt; method are called to get the result we need. We’ll check the detail of this process later. The other class I’d like to explain is the &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloHelper&lt;/code&gt; class. This class contains helper functions for us to deal with the objects transferred via the network, such as the data marshalling and unmarshalling work. For example, here is the &lt;code class=&quot;highlighter-rouge&quot;&gt;narrow(...)&lt;/code&gt; method in &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloHelper&lt;/code&gt; class:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static HelloApp.Hello narrow (org.omg.CORBA.Object obj)
 {
   if (obj == null)
     return null;
   else if (obj instanceof HelloApp.Hello)
     return (HelloApp.Hello)obj;
   else if (!obj._is_a (id ()))
     throw new org.omg.CORBA.BAD_PARAM ();
   else
   {
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl)obj)._get_delegate ();
     HelloApp._HelloStub stub = new HelloApp._HelloStub ();
     stub._set_delegate(delegate);
     return stub;
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From the above code we can see the &lt;code class=&quot;highlighter-rouge&quot;&gt;org.omg.CORBA.Object&lt;/code&gt; typed parameter is cast to &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloApp.Hello&lt;/code&gt; typed return value. We will use this &lt;code class=&quot;highlighter-rouge&quot;&gt;narrow(...)&lt;/code&gt; method later. That’s all I’d like to explain for client side. The next step is to generate the servant side classes.&lt;/p&gt;

&lt;h2 id=&quot;generating-the-servant-side-classes&quot;&gt;Generating The Servant Side Classes&lt;/h2&gt;

&lt;p&gt;Now we need to generate the classes for the servant side. Most client side and servant side classes are the same, so we won’t get many more files by generating the servant side classes. Here is the command to generate the servant side classes:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ idlj -fserver Hello.idl
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above command will generate the classes for servant side, and many classes are common with the client side, so there is just one additional class named &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloPOA&lt;/code&gt; added into the directory. We can check the files we have now:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ls
Hello.java           HelloHelper.java     HelloHolder.java     HelloOperations.java HelloPOA.java        _HelloStub.java
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;POA&lt;/code&gt; is abbreviation of &lt;code class=&quot;highlighter-rouge&quot;&gt;Portable Object Adapter&lt;/code&gt;&lt;sup id=&quot;fnref:poa&quot;&gt;&lt;a href=&quot;#fn:poa&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;, and is it part of the CORBA specification. The &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloPOA&lt;/code&gt; class is a servant side skeleton class that can help us to register the defined methods into naming service. Let’s see the defintion of this class:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public abstract class HelloPOA extends org.omg.PortableServer.Servant
 implements HelloApp.HelloOperations, org.omg.CORBA.portable.InvokeHandler
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From the above class definition, we can see the &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloPOA&lt;/code&gt; class extends the &lt;code class=&quot;highlighter-rouge&quot;&gt;org.omg.PortableServer.Servant&lt;/code&gt; and implements &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloApp.HelloOperations&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;org.omg.CORBA.portable.InvokeHandler&lt;/code&gt;. This is an abstract class, and we need to extend this class and implement the &lt;code class=&quot;highlighter-rouge&quot;&gt;sayHello()&lt;/code&gt; method in the &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloOperations&lt;/code&gt; interface. Firstly let’s check the detail code in &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloPOA&lt;/code&gt; class:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private static java.util.Hashtable _methods = new java.util.Hashtable ();
static
{
  _methods.put (&quot;sayHello&quot;, new java.lang.Integer (0));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As the code shown above, it stores our defined methods into &lt;code class=&quot;highlighter-rouge&quot;&gt;_methods&lt;/code&gt; hashtable. Then let’s check the &lt;code class=&quot;highlighter-rouge&quot;&gt;_invoke()&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                              org.omg.CORBA.portable.InputStream in,
                              org.omg.CORBA.portable.ResponseHandler $rh)
{
  org.omg.CORBA.portable.OutputStream out = null;
  java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
  if (__method == null)
    throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

  switch (__method.intValue ())
  {
     case 0:  // HelloApp/Hello/sayHello
     {
       String $result = null;
       $result = this.sayHello ();
       out = $rh.createReply();
       out.write_string ($result);
       break;
     }

     default:
       throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
  }

  return out;
} // _invoke
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As the code shown above, the &lt;code class=&quot;highlighter-rouge&quot;&gt;_invoke()&lt;/code&gt; method will firstly call the &lt;code class=&quot;highlighter-rouge&quot;&gt;sayHello()&lt;/code&gt; method in servant side with the actual &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloOperations&lt;/code&gt; implementation. Here is the relative part of the code in the method:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$result = this.sayHello ();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After the above local invocation is done in servant side, it will create the reply and write to client side via network like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;out = $rh.createReply();
out.write_string ($result);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above code will transfer the the response of local invocation to client side via network. After looked at the code in &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloPOA&lt;/code&gt;, now let’s see this class diagram that includes all the classes we have generated:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-05-03/hello-server-client.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above diagram, we can see the relationship between these classes, and we can see the shared classes between client side and servant side. Nevertheless, these classes can not form a complete client or servant yet. We need to implement some client side and servant side classes by oursevles. Now let’s implment the servant side implementation of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt; interface.&lt;/p&gt;

&lt;h3 id=&quot;servant-implementation&quot;&gt;Servant Implementation&lt;/h3&gt;

&lt;p&gt;For the servant side, we need to write a &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloImpl&lt;/code&gt; class that extends &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloPOA&lt;/code&gt; to implement the &lt;code class=&quot;highlighter-rouge&quot;&gt;sayHello()&lt;/code&gt; method. Here is the code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package HelloApp;

import org.omg.CORBA.ORB;

/**
 * Created by weli on 25/04/2017.
 */
public class HelloImpl extends HelloPOA {


    private ORB orb;

    public void setORB(ORB orbVal) {
        orb = orbVal;
    }



    @Override
    public String sayHello() {
        return &quot;\nHello, world!\n&quot;;
    }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From the above code, we can see that the &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloImpl&lt;/code&gt; class I wrote implements the &lt;code class=&quot;highlighter-rouge&quot;&gt;sayHello()&lt;/code&gt; method, and it will accept a &lt;code class=&quot;highlighter-rouge&quot;&gt;org.omg.CORBA.ORB&lt;/code&gt; instance for network communication. We’ll check the detail of network communication layer later. The following diagram shows the servant side classes we have so far:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-05-03/HelloImpl.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above diagram, we can see the two generated classes by &lt;code class=&quot;highlighter-rouge&quot;&gt;idlj&lt;/code&gt; compiler, which are &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloOperations&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloPOA&lt;/code&gt;, and a handwritten class &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloImpl&lt;/code&gt;. Their relationship is shown in above diagram. Until now, we have &lt;code class=&quot;highlighter-rouge&quot;&gt;_HelloStub&lt;/code&gt; class for client side to call the method in &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloImpl&lt;/code&gt; from server side, and the network communication detail in between is handled by the POA class. Actually the &lt;code class=&quot;highlighter-rouge&quot;&gt;ORB&lt;/code&gt; layer will deal with the network communication, and it’s handled by the generated classes. We don’t have to dig into the network layer so deep now. Let’s write a &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloServer&lt;/code&gt; class that accepts the call from client and invocate the &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloImpl.sayHello()&lt;/code&gt; method, and then return the result back to the client. Here is the code of the &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloServer&lt;/code&gt; class:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package HelloApp;

import org.omg.CORBA.ORB;
import org.omg.CosNaming.NameComponent;
import org.omg.CosNaming.NamingContextExt;
import org.omg.CosNaming.NamingContextExtHelper;
import org.omg.PortableServer.POA;
import org.omg.PortableServer.POAHelper;

import java.util.Properties;

/**
 * Created by weli on 25/04/2017.
 */
public class HelloServer {
    public static void main(String[] args) throws Exception {
        ORB orb = ORB.init(args, null);

        POA rootpoa = POAHelper.narrow(orb.resolve_initial_references(&quot;RootPOA&quot;));

        rootpoa.the_POAManager().activate();

        HelloImpl helloImpl = new HelloImpl();
        helloImpl.setORB(orb);

        org.omg.CORBA.Object ref = rootpoa.servant_to_reference(helloImpl);
        Hello href = HelloHelper.narrow(ref);

        org.omg.CORBA.Object objRef = orb.resolve_initial_references(&quot;NameService&quot;);
        NamingContextExt ncRef = NamingContextExtHelper.narrow(objRef);

        String name = &quot;Hello&quot;;
        NameComponent path[] = ncRef.to_name(name);
        ncRef.rebind(path, href);

        System.out.println(&quot;Server started. Accepting requests...&quot;);

        orb.run();

    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From the above code, we can see the &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloServer&lt;/code&gt; class generally performs three steps: Firstly, it activates the servant manager:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POA rootpoa = POAHelper.narrow(orb.resolve_initial_references(&quot;RootPOA&quot;));
rootpoa.the_POAManager().activate();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As the above code shows, the servant manager is in &lt;code class=&quot;highlighter-rouge&quot;&gt;rootpoa&lt;/code&gt;, and it’s retrieved by &lt;code class=&quot;highlighter-rouge&quot;&gt;ORB&lt;/code&gt; from naming service. The name of the &lt;code class=&quot;highlighter-rouge&quot;&gt;POA&lt;/code&gt; object in naming service is &lt;code class=&quot;highlighter-rouge&quot;&gt;RootPOA&lt;/code&gt;. This is the architecture defined by CORBA specification. There is a naming service for the servants to be registered and fetched. For example, our &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloImpl&lt;/code&gt; can be registered into the naming service. The naming service is provided by naming server. In this article, I’ll use a tool provided by JDK named &lt;code class=&quot;highlighter-rouge&quot;&gt;orbd&lt;/code&gt; for this purpose. It is a CORBA naming service daemon provided by JDK.&lt;/p&gt;

&lt;p&gt;Secondly, the above code registers &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloImpl&lt;/code&gt; into naming service. The code is shown in below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HelloImpl helloImpl = new HelloImpl();
helloImpl.setORB(orb);

org.omg.CORBA.Object ref = rootpoa.servant_to_reference(helloImpl);
Hello href = HelloHelper.narrow(ref);

org.omg.CORBA.Object objRef = orb.resolve_initial_references(&quot;NameService&quot;);
NamingContextExt ncRef = NamingContextExtHelper.narrow(objRef);

String name = &quot;Hello&quot;;
NameComponent path[] = ncRef.to_name(name);
ncRef.rebind(path, href);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From the above code, we can see that we use &lt;code class=&quot;highlighter-rouge&quot;&gt;orb&lt;/code&gt; to get &lt;code class=&quot;highlighter-rouge&quot;&gt;NameService&lt;/code&gt; itself from naming service, and then we register our &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloImpl&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt; service.&lt;/p&gt;

&lt;p&gt;Thirdly, we start our service to listen to the client requests:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;System.out.println(&quot;Server started. Accepting requests...&quot;);

orb.run();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In above code, the last line will put the servant into listening status, and it will start to listen for requests from clients via network. As we have prepared the servant side, now we need to implement the client side.&lt;/p&gt;

&lt;h3 id=&quot;client-side-implementation&quot;&gt;Client Side Implementation&lt;/h3&gt;

&lt;p&gt;We should write a client side class named &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloClient&lt;/code&gt; that can help us to fetch the &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt; servant from the naming service, and then issue a &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello.sayHello()&lt;/code&gt; call to the servant. Here is the call for &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloClient&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package HelloApp;


import org.omg.CORBA.ORB;
import org.omg.CosNaming.NamingContext;
import org.omg.CosNaming.NamingContextExt;
import org.omg.CosNaming.NamingContextExtHelper;
import org.omg.CosNaming.NamingContextHelper;

import java.util.Properties;

/**
 * Created by weli on 25/04/2017.
 */
public class HelloClient {

    static Hello helloImpl;

    public static void main(String[] args) throws Exception {

        ORB orb = ORB.init(args, null);

        org.omg.CORBA.Object objRef = orb.resolve_initial_references(&quot;NameService&quot;);

        NamingContextExt ncRef = NamingContextExtHelper.narrow(objRef);

        String name = &quot;Hello&quot;;

        helloImpl = HelloHelper.narrow(ncRef.resolve_str(name));

        System.out.println(helloImpl.sayHello());

    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Same like server side, the above client side implementation also uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;orb&lt;/code&gt; object to fetch &lt;code class=&quot;highlighter-rouge&quot;&gt;NameService&lt;/code&gt;, and here is thre relative code in above &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloClient&lt;/code&gt; class:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;org.omg.CORBA.Object objRef = orb.resolve_initial_references(&quot;NameService&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This happens via network, and we will see the detail later. And then the &lt;code class=&quot;highlighter-rouge&quot;&gt;NamingContextExtHelper&lt;/code&gt; will help the client side to convert the &lt;code class=&quot;highlighter-rouge&quot;&gt;objRef&lt;/code&gt; gotten from network to &lt;code class=&quot;highlighter-rouge&quot;&gt;NamingContextExt&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NamingContextExt ncRef = NamingContextExtHelper.narrow(objRef);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The next step in client is to get the &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt; interface via network, and here is the relative code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;helloImpl = HelloHelper.narrow(ncRef.resolve_str(name));
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above code is simliar to the process of getting &lt;code class=&quot;highlighter-rouge&quot;&gt;NameService&lt;/code&gt; in above. We use &lt;code class=&quot;highlighter-rouge&quot;&gt;ncRef.resolve_str(...)&lt;/code&gt; to fetch the remote object from naming server. If we check the type of &lt;code class=&quot;highlighter-rouge&quot;&gt;helloImpl&lt;/code&gt;, we will see the type is &lt;code class=&quot;highlighter-rouge&quot;&gt;_HelloStub&lt;/code&gt;, and this class will handle the network communication with server side. When we call &lt;code class=&quot;highlighter-rouge&quot;&gt;helloImpl.sayHello()&lt;/code&gt; method later, the stub will actually invoke the &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloImpl.sayHello()&lt;/code&gt; implementation at servant side. Now let’s check how does servant side receives the call from client side and processes the request.&lt;/p&gt;

&lt;h3 id=&quot;request-processing-of-servant-side&quot;&gt;Request Processing Of Servant Side&lt;/h3&gt;

&lt;p&gt;At the servant side, the &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloImpl&lt;/code&gt; class extends the generated &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloPOA&lt;/code&gt; class as we saw in above. We have checked that the &lt;code class=&quot;highlighter-rouge&quot;&gt;_invoke()&lt;/code&gt; method in &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloPOA&lt;/code&gt; class, and knows it will receive the network requests, and then dispatch the requests to local implementations. Let’s review the core part in the &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloPOA._invoke(...)&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private static java.util.Hashtable _methods = new java.util.Hashtable ();
static
{
_methods.put (&quot;sayHello&quot;, new java.lang.Integer (0));
}

...

switch (__method.intValue ())
{
   case 0:  // HelloApp/Hello/sayHello
   {
	 String $result = null;
	 $result = this.sayHello ();
	 out = $rh.createReply();
	 out.write_string ($result);
	 break;
   }

   default:
	 throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
}

return out;
} // _invoke
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As the code shown above, we can see how does servant side deals with the request from client side. Now let’s see the &lt;code class=&quot;highlighter-rouge&quot;&gt;sayHello()&lt;/code&gt; call in &lt;code class=&quot;highlighter-rouge&quot;&gt;_HelloStub&lt;/code&gt; from client side:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-05-03/HelloApp._HelloStub.sayHello().png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above sequence diagram, we can see how does &lt;code class=&quot;highlighter-rouge&quot;&gt;_HelloStub.sayHello()&lt;/code&gt; method invokes a call to remote server side, and remarshal the reply message received from servant. Here is the sequence diagram of &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloPOA._invoke(...)&lt;/code&gt; method in server side:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-05-03/HelloApp.HelloPOA._invoke(String, org.omg.CORBA.portable.InputStream, org.omg.CORBA.portable.ResponseHandler).png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above seqeuence diagram, we can see how does servant side deal with the requests from the client side. To sum up, here is the description of the whole process: Firstly, there is a naming service daemon started that allows multiple servants to be registered and client can fetch the servant from the naming service.&lt;/p&gt;

&lt;p&gt;Secondly, we register our &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloImpl&lt;/code&gt; servant into the naming service, and the service name is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt;. The client side fetches the &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt; servant from the naming service, and knows the network location of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt; servant. Then the client side invokes a request by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello.sayHello()&lt;/code&gt; method. This is done via the &lt;code class=&quot;highlighter-rouge&quot;&gt;_HelloStub&lt;/code&gt; class. The &lt;code class=&quot;highlighter-rouge&quot;&gt;_HelloStub&lt;/code&gt; class deals with the network communication with the servant side. The servant side used &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloPOA&lt;/code&gt; class to deal with the request from client side. It invokes the &lt;code class=&quot;highlighter-rouge&quot;&gt;sayHello()&lt;/code&gt; method in &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloImpl&lt;/code&gt;, and then marshal the return message and send back the message to client side.&lt;/p&gt;

&lt;p&gt;Thirdly, the client side receives the the network data reply from the servant side, and remarhal the data as the return value of the &lt;code class=&quot;highlighter-rouge&quot;&gt;sayHello()&lt;/code&gt; method of &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt; interface..&lt;/p&gt;

&lt;p&gt;From the user’s perspective, the client side invokes &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello.sayHello()&lt;/code&gt; method as if it’s a local method call, but actually it is a remote call to the &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloImpl.sayHello()&lt;/code&gt; in a servant. The network communication and server implementation details are hidden to users. This is one of the design purposes of the CORBA architecture. In addition, the client side, servant side and naming service side are independent from each other. Now let’s deploy our whole project into running state.&lt;/p&gt;

&lt;h2 id=&quot;deployment-of-the-project&quot;&gt;Deployment Of The Project&lt;/h2&gt;

&lt;p&gt;Now we can start the project deployment phase. We will use the &lt;code class=&quot;highlighter-rouge&quot;&gt;orbd&lt;/code&gt; command to start the naming service, and then register our &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt; servant into the naming service. After this, the client side will fetech the servant from naming service, and then make a remote call via stub interface. Here is the deployment diagram of naming service, servant side and client side:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-05-03/deployment.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above diagram, we can see the three sides will be deployed into different machines and they are connected by the network. That is what I’d like to show you in this section. I will start the &lt;code class=&quot;highlighter-rouge&quot;&gt;orbd&lt;/code&gt; on machine A. The servant that has &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloImpl&lt;/code&gt; will be deployed on machine B, and  it will register itself into the naming service on machine A. At last I will deploy the client on machine C. The client side will fetch the &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt; servant from naming service. The naming service will tell the client side that the &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt; servant is on machine B, and then the client will make a remote call to the servant on machine B. Now let’s take the first step: starting the &lt;code class=&quot;highlighter-rouge&quot;&gt;orbd&lt;/code&gt; on machine A.&lt;/p&gt;

&lt;h3 id=&quot;start-the-orbd&quot;&gt;Start the ORBD&lt;/h3&gt;

&lt;p&gt;The first step is to start the &lt;code class=&quot;highlighter-rouge&quot;&gt;orbd&lt;/code&gt; on machine A. Here is the command and the output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ orbd -ORBInitialPort 1050 -ORBInitialHost 10.0.1.155  &amp;amp;
[1] 20458
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As the command shown above, we have started the naming service daemon on machine A. The &lt;code class=&quot;highlighter-rouge&quot;&gt;ORBInitialHost&lt;/code&gt; option defines the hostname or IP address that &lt;code class=&quot;highlighter-rouge&quot;&gt;orbd&lt;/code&gt; will listen to. Because the public IP address of machine A is &lt;code class=&quot;highlighter-rouge&quot;&gt;10.0.1.155&lt;/code&gt;, so the option is set to it. the &lt;code class=&quot;highlighter-rouge&quot;&gt;ORBInitialPort&lt;/code&gt; option is used to set the port that &lt;code class=&quot;highlighter-rouge&quot;&gt;orbd&lt;/code&gt; will allow servant or client to fetch the &lt;code class=&quot;highlighter-rouge&quot;&gt;NameService&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;NameService&lt;/code&gt; is the default service provided by &lt;code class=&quot;highlighter-rouge&quot;&gt;orbd&lt;/code&gt;, and servanta need to register itself into it. Meanwhile the client also need to fetch servants from &lt;code class=&quot;highlighter-rouge&quot;&gt;NameService&lt;/code&gt;. Please note &lt;code class=&quot;highlighter-rouge&quot;&gt;orbd&lt;/code&gt; has another port called &lt;code class=&quot;highlighter-rouge&quot;&gt;activation port&lt;/code&gt; which accepts multiple commands to operate on servants. We will check the details later. The default port for activation is &lt;code class=&quot;highlighter-rouge&quot;&gt;1049&lt;/code&gt;. Please make sure you have configured your firewall properly so the communication between three machines are not blocked. I recommend you to turn off the firewall on machine A, B, C for testing purpose. Next we should register our &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloImpl&lt;/code&gt; servant on machine B to the naming service on machine A.&lt;/p&gt;

&lt;h3 id=&quot;servant-registration&quot;&gt;Servant Registration&lt;/h3&gt;

&lt;p&gt;Now we should go to machine B and start the &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloServer&lt;/code&gt;. It will register the &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloImpl&lt;/code&gt; into the naming service on machine A. I added some options into &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloServer&lt;/code&gt; for it to connect to the naming service. Here is the detail of the code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; public static void main(String[] args) throws Exception {

        Properties prop = new Properties();

        prop.put(&quot;org.omg.CORBA.ORBInitialHost&quot;, &quot;10.0.1.155&quot;);
        prop.put(&quot;org.omg.CORBA.ORBInitialPort&quot;, &quot;1050&quot;);

        ORB orb = ORB.init(args, prop);

        POA rootpoa = POAHelper.narrow(orb.resolve_initial_references(&quot;RootPOA&quot;));

        rootpoa.the_POAManager().activate();

        HelloImpl helloImpl = new HelloImpl();
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As the code shown above, I have set the &lt;code class=&quot;highlighter-rouge&quot;&gt;org.omg.CORBA.ORBInitialHost&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;org.omg.CORBA.ORBInitialPort&lt;/code&gt; properties to point to machine A. Thre properties are injected into &lt;code class=&quot;highlighter-rouge&quot;&gt;orb&lt;/code&gt; instance, which deals with the concrete network communication. Then the &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloServer&lt;/code&gt; will start the servant registration process. I set four breakpoints in IntelliJ IDEA, because these four steps involve network communication. The breakpoints are shown in the following screenshot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-05-03/breakpoints.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above diagram, we can see there are four lines of code that involves network comunication. Now I start to debug running the code and it stops at the first line of breakpoint:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-05-03/first-line.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The above line of code is like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;org.omg.CORBA.Object objRef = orb.resolve_initial_references(&quot;NameService&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above line of code will fetch the &lt;code class=&quot;highlighter-rouge&quot;&gt;NameService&lt;/code&gt; from the naming service running on machine A. I started the Wireshark network data analyzer on machine A to check how the above command looks like at network level, and here is the screenshot of the network data I got on machine A:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-05-03/-enp0s5_014.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above diagram, you can see I have applied a filter that will only show GIOP packets. GIOP is the protocol used by CORBA to transfer data. We can see the GIOP data is transferred via TCP protocol, and this is called IIOP. In a word, the GIOP data trasferred via TCP protocol is called IIOP.&lt;/p&gt;

&lt;p&gt;We can see the benefit to support a standard communication protocol in network level: Because Java RMI-IIOP standard supports the IIOP protocol, so it can interact with other systems with different language platoforms. Different language platforms just need to generate the interface from IDL file and make the invocation, and don’t need to worry about the detail implementation on the other side.&lt;/p&gt;

&lt;p&gt;In addition, we can see there is a request GIOP data from the source IP address &lt;code class=&quot;highlighter-rouge&quot;&gt;10.0.1.75&lt;/code&gt; to the destination IP address &lt;code class=&quot;highlighter-rouge&quot;&gt;10.0.1.155&lt;/code&gt;. The source IP address &lt;code class=&quot;highlighter-rouge&quot;&gt;10.0.1.75&lt;/code&gt; is machine B, which wants to register &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloImpl&lt;/code&gt; servant, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;10.0.1.155&lt;/code&gt; is the naming service itself. Meanwhile, we can see the TCP port used by naming service is &lt;code class=&quot;highlighter-rouge&quot;&gt;1050&lt;/code&gt;. Because the code is to fetch the &lt;code class=&quot;highlighter-rouge&quot;&gt;NameService&lt;/code&gt;, from the Wireshark data analyzer we can see the request operation is &lt;code class=&quot;highlighter-rouge&quot;&gt;get&lt;/code&gt;, and the service we want to get is &lt;code class=&quot;highlighter-rouge&quot;&gt;NameService&lt;/code&gt;, here is the relative screenshot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-05-03/-enp0s5_017.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above screenshot we can see GIOP data contains operations and data necessary for communication. Now we can check the reply data, and here is the screenshot of the reply data:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-05-03/-enp0s5_019.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see from above that the naming service will send the data requested by servant, which is the &lt;code class=&quot;highlighter-rouge&quot;&gt;NamingService&lt;/code&gt;. Now we should let the code go to the next line, and here is the code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NamingContextExt ncRef = NamingContextExtHelper.narrow(objRef);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The corresponding data of above request from &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloServer&lt;/code&gt; on machine B captured in machine A, and here is the screenshot of the captured data:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-05-03/op.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see the &lt;code class=&quot;highlighter-rouge&quot;&gt;NamingContextExtHelper.narrow(...)&lt;/code&gt; will issue an &lt;code class=&quot;highlighter-rouge&quot;&gt;_is_a&lt;/code&gt; operation on naming service side. This time the &lt;code class=&quot;highlighter-rouge&quot;&gt;_is_a&lt;/code&gt; operation uses TCP port &lt;code class=&quot;highlighter-rouge&quot;&gt;1049&lt;/code&gt; for communication:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-05-03/1049.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As the screenshot shown above, we can see the naming service uses two different ports for different purposes. The port &lt;code class=&quot;highlighter-rouge&quot;&gt;1050&lt;/code&gt; is used for intially fetching the &lt;code class=&quot;highlighter-rouge&quot;&gt;NameService&lt;/code&gt;, and all the following actions will use port &lt;code class=&quot;highlighter-rouge&quot;&gt;1049&lt;/code&gt;. The code will then run to this line on in &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloServer&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NameComponent path[] = ncRef.to_name(name);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From the above &lt;code class=&quot;highlighter-rouge&quot;&gt;ncRef.to_name(...)&lt;/code&gt; call, the relative GIOP message received at machine A is like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-05-03/to_name.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The GIOP message shows that the operation name at network level is also &lt;code class=&quot;highlighter-rouge&quot;&gt;to_name&lt;/code&gt;. Next we come to this line of &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloServer&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ncRef.rebind(path, href);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is the command that will register the &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloImpl&lt;/code&gt; into naming service, and here is the corresponding GIOP message:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-05-03/rebind.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above screenshot, we see the &lt;code class=&quot;highlighter-rouge&quot;&gt;rebind&lt;/code&gt; operation has a protocol name called &lt;code class=&quot;highlighter-rouge&quot;&gt;COSNAMING&lt;/code&gt;. This is actually part of the CORBA intefaces transferred via GIOP, and Wireshark has the ability to decode them, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;CosEvents&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;CosNaming&lt;/code&gt;. Here is the screenshot of the decoded &lt;code class=&quot;highlighter-rouge&quot;&gt;CosNaming&lt;/code&gt; data:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-05-03/CosNaming.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above screenshot, we can see the information of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt; servant has been registered into the naming service. The IP address &lt;code class=&quot;highlighter-rouge&quot;&gt;10.72.12.42&lt;/code&gt; is another public IP of machine B, and later the client from machine C will fetch this info of &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt; servant and use it to communicate with the servant on machine B.&lt;/p&gt;

&lt;p&gt;The whole message is encapulated in a data structure called &lt;code class=&quot;highlighter-rouge&quot;&gt;IOR&lt;/code&gt;. The fullname of &lt;code class=&quot;highlighter-rouge&quot;&gt;IOR&lt;/code&gt; is called &lt;code class=&quot;highlighter-rouge&quot;&gt;Interoperable Object Reference&lt;/code&gt;, this data structure is part of the CORBA standard, and Java RMI-IIOP standard fully supports it and trafer it via the network. After the above registration is done, our &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloServer&lt;/code&gt; will be put into server mode by running &lt;code class=&quot;highlighter-rouge&quot;&gt;orb.run()&lt;/code&gt; at last line, and finally the output is like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-05-03/server-started.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As the screenshot shown above, the servant is ready for accepting requests. We have analyzed the registration process of the servant to naming service, next we should start a client side call from machine C to see the network communication process.&lt;/p&gt;

&lt;h3 id=&quot;client-call&quot;&gt;Client Call&lt;/h3&gt;

&lt;p&gt;The client on machine C needs to communicate with the naming server on machine A to fetch the &lt;code class=&quot;highlighter-rouge&quot;&gt;NameService&lt;/code&gt;, and then it will fetch the info of &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt; servant from the &lt;code class=&quot;highlighter-rouge&quot;&gt;NameService&lt;/code&gt;. After getting the info of &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt; servant, it knows the servant server is located at machine B, and then the &lt;code class=&quot;highlighter-rouge&quot;&gt;_HelloStub&lt;/code&gt; will communicate with machine B and remotely call the &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloImpl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In summary, client on machine C will firstly contact with the naming service on machine A, and get the info of &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt; servant, and then it wil call the &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt; servant server on machine B.&lt;/p&gt;

&lt;p&gt;Now let’s check the detail process and analyze the network data. This time we need to start Wireshark on both machine A and machine B, because the client on machine C will contact with both of them. Firstly, I added two lines into &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloClient&lt;/code&gt; on machine C:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static void main(String[] args) throws Exception {

        Properties prop = new Properties();
        prop.put(&quot;org.omg.CORBA.ORBInitialHost&quot;, &quot;10.0.1.155&quot;);
        prop.put(&quot;org.omg.CORBA.ORBInitialPort&quot;, &quot;1050&quot;);

        ORB orb = ORB.init(args, prop);
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As the code shown above, I have configured the &lt;code class=&quot;highlighter-rouge&quot;&gt;ORB&lt;/code&gt; to point to the naming service on machine A. Same like the analyze method on &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloServer&lt;/code&gt;, I have put four breakpoints on &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloClient&lt;/code&gt; code, it’s shown in following screenshot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-05-03/client-breakpoints.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As the screenshot shown above, there are four lines of code related with network communication. The first three lines is to contact with the naming service on machine A to fetch the &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt; servant info from &lt;code class=&quot;highlighter-rouge&quot;&gt;NameService&lt;/code&gt;, the code is like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;org.omg.CORBA.Object objRef = orb.resolve_initial_references(&quot;NameService&quot;);
NamingContextExt ncRef = NamingContextExtHelper.narrow(objRef);
helloImpl = HelloHelper.narrow(ncRef.resolve_str(name));
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The first two lines is to fetch &lt;code class=&quot;highlighter-rouge&quot;&gt;NameService&lt;/code&gt;, and the third line is to get the &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt; servant. After these steps are done, now the client side knows where to called the &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt; servant, because it gets the IP address of machine B from the naming server. Here is the corresponding GIOP messages fetched from machine A:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-05-03/fetcg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As the screenshot shown above, we see the three requests corresponding to the three lines of code in above. Now as we have the servant info in client side, the last call will communicate to the servant. Here is the last line of code in &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloClient&lt;/code&gt; on machine C:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;System.out.println(helloImpl.sayHello());
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;helloImpl&lt;/code&gt; has the type of &lt;code class=&quot;highlighter-rouge&quot;&gt;_HelloStub&lt;/code&gt;, and it will remotely call the servant on machine B. Here is the GIOP message captured from machine B:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-05-03/sayHello.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As the screenshot shown above, we can see the &lt;code class=&quot;highlighter-rouge&quot;&gt;sayHello&lt;/code&gt; operation is requested from client machine C to servant machine B. Please note the IP address &lt;code class=&quot;highlighter-rouge&quot;&gt;10.72.12.42&lt;/code&gt; is the public address of client machine C, and the address &lt;code class=&quot;highlighter-rouge&quot;&gt;10.72.12.42&lt;/code&gt; is the second public IP address of servant machine B, which is registered into naming service on machine A. Here is the final output from client machine C:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-05-03/client-output.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above screenshot, we can see client on machine A gets the result from &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloImpl.sayHello()&lt;/code&gt; method on machine C. From user’s perspective, it seems like the &lt;code class=&quot;highlighter-rouge&quot;&gt;helloImpl.sayHello()&lt;/code&gt; is a local method call, but actually it is a remote call to another machine. What’s amazing is that we fetch the servant from an independent naming service on machine B, and we could easily change the servant in future, because some other servant can replace the &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello&lt;/code&gt; service by registering itself into naming server by using the same service name. This gives us great flexibility during our distributed service deployment.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article, we have written a Java application with CORBA standard and Java RMI-IIOP implementation. We have seen the achitecture defined by the CORBA, and we see how does Java platform provides us multiple tools to write the application that conforms to the standard. The CORBA and Java RMI-IIOP standards are the basis of many modern application servers. I wish this article is a good start for you to dig deeper in this area in future.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;&lt;em&gt;References&lt;/em&gt;&lt;/h3&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:corba&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Common_Object_Request_Broker_Architecture&quot;&gt;CORBA&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:corba&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:wildfly&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://wildfly.org/&quot;&gt;Wildfly&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:wildfly&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:rmi&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Java_remote_method_invocation&quot;&gt;Java remote method invocation&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:rmi&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:idl&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Interface_description_language&quot;&gt;Interface_description_language&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:idl&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:poa&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/technotes/guides/idl/POA.html&quot;&gt;Portable Object Adapter (POA)&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:poa&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
          <pubDate>2017-05-03T00:00:00+00:00</pubDate>
          <link>/2017/05/03/corba-iiop.html</link>
          <guid isPermaLink="true">/2017/05/03/corba-iiop.html</guid>
        </item>
      
    
      
        <item>
          <title>Multiple Application Support In Jersey And Comparing It With RESTEasy Implementation</title>
          <description>&lt;p&gt;Jersey supports multiple Application classes to be registered, on the other side currently RESTEasy doesn’t support multiple Application classes deployment yet. In this article I’d like to give a brief introduction on Jersey implementation and compare it with RESTEasy current design.&lt;/p&gt;

&lt;p&gt;Firstly, we can see &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyDeployment&lt;/code&gt; doesn’t store multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;Application&lt;/code&gt; classes:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ResteasyDeployment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deployment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResteasyDeployment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;deployment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setApplicationClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;applicationClass&lt;/code&gt; will be used to create an &lt;code class=&quot;highlighter-rouge&quot;&gt;Application&lt;/code&gt; instance. Here is the relative code in &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyDeployment.start()&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;applicationClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;applicationClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;providerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From the above code we can see &lt;code class=&quot;highlighter-rouge&quot;&gt;createApplication()&lt;/code&gt; method accepts the &lt;code class=&quot;highlighter-rouge&quot;&gt;applicationClass&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatcher&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;providerFactory&lt;/code&gt; as parameters, and here is the internal process of &lt;code class=&quot;highlighter-rouge&quot;&gt;createApplication()&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContextClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;applicationClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;providerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createProviderInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDefaultContextObjects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ResteasyProviderFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pushContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PropertyInjector&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propertyInjector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;providerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInjectorFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createPropertyInjector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;providerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;propertyInjector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From the above code, we can see RESTEasy stores a single &lt;code class=&quot;highlighter-rouge&quot;&gt;Application&lt;/code&gt; instance internally. The data structure needs to be modified to store multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;Application&lt;/code&gt; instances. In Jersey, the &lt;code class=&quot;highlighter-rouge&quot;&gt;JerseyServletContainerInitializer&lt;/code&gt; class accepts multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;Application&lt;/code&gt; definitions. Here is the relative code in &lt;code class=&quot;highlighter-rouge&quot;&gt;onStartupImpl()&lt;/code&gt; method&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicationClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getApplicationClasses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;addServletWithExistingRegistration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servletRegistration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicationClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From the above code we can see Jersey accepts multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;Application&lt;/code&gt; classes with &lt;code class=&quot;highlighter-rouge&quot;&gt;getApplicationClasses()&lt;/code&gt; method and deals with them in a loop. Here is the implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;getApplicationsClasses()&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getApplicationClasses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LinkedHashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isAssignableFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asSubclass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we can go back to &lt;code class=&quot;highlighter-rouge&quot;&gt;addServletWithExistingRegistration()&lt;/code&gt; method to see how does it deals with &lt;code class=&quot;highlighter-rouge&quot;&gt;Application&lt;/code&gt; class:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// create a new servlet container for a given app.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResourceConfig&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resourceConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResourceConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forApplicationClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getInitParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;registration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Utils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContextParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The main logic of &lt;code class=&quot;highlighter-rouge&quot;&gt;addServletWithExistingRegistration()&lt;/code&gt; is shown above. It will create an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceConfig&lt;/code&gt; class&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. This class contains &lt;code class=&quot;highlighter-rouge&quot;&gt;Application&lt;/code&gt; and the resource classes registered under the &lt;code class=&quot;highlighter-rouge&quot;&gt;Application&lt;/code&gt;. Here is the class diagram of the &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceConfig&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-04-10-ResourceConfig.png&quot; alt=&quot;2017-04-10-ResourceConfig.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above diagram, we can see &lt;code class=&quot;highlighter-rouge&quot;&gt;WrappingResourceConfig&lt;/code&gt; contains &lt;code class=&quot;highlighter-rouge&quot;&gt;application : javax.ws.rs.core.Application&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;defaultClasses : java.util.Set&amp;lt;Class&amp;lt;?&amp;gt;&amp;gt; = new HashSet&amp;lt;&amp;gt;()&lt;/code&gt;, this provides the &lt;code class=&quot;highlighter-rouge&quot;&gt;application -&amp;gt; resources&lt;/code&gt; mapping. If RESTEasy wants to support multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;Application&lt;/code&gt; deployment, it also needs to have a data structure to record the relationship between each Application instance and its included resources.&lt;/p&gt;

&lt;p&gt;Please note &lt;code class=&quot;highlighter-rouge&quot;&gt;Application&lt;/code&gt; is just a method to help users to register their resteful resources easier in Servlet container, both Jersey and RESTEasy core design don’t merely rely on the &lt;code class=&quot;highlighter-rouge&quot;&gt;Application&lt;/code&gt; to find and register resources, and other non-servet containers just don’t need &lt;code class=&quot;highlighter-rouge&quot;&gt;Application&lt;/code&gt; to register resources. You can refer to RESTEasy’s Netty container document&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; to see how it register resource classes via programmable interfaces.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;&lt;em&gt;References&lt;/em&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/jersey/jersey/blob/master/containers/jersey-servlet/src/main/java/org/glassfish/jersey/servlet/init/JerseyServletContainerInitializer.java#L156&quot;&gt;JerseyServletContainerInitializer.java&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/jersey/jersey/blob/master/core-server/src/main/java/org/glassfish/jersey/server/ResourceConfig.java#L108&quot;&gt;ResourceConfig.java&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://docs.jboss.org/resteasy/docs/3.1.2.Final/userguide/html/RESTEasy_Embedded_Container.html#d4e1597&quot;&gt;RESTEasy_Embedded_Container.html.&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
          <pubDate>2017-04-10T00:00:00+00:00</pubDate>
          <link>/2017/04/10/multiple-application-support-in-jersey-and-comparing-it-with-resteasy-implementation.html</link>
          <guid isPermaLink="true">/2017/04/10/multiple-application-support-in-jersey-and-comparing-it-with-resteasy-implementation.html</guid>
        </item>
      
    
      
        <item>
          <title>RESTEasy Application Support</title>
          <description>&lt;p&gt;In this article I’d like to give you a brief introduction on RESTEasy Application Support.&lt;/p&gt;

&lt;p&gt;Application is an JAX-RS spec defined feature that support users to register restful resources into containers. Here are the descriptions to the Application in section &lt;code class=&quot;highlighter-rouge&quot;&gt;2.3.2 Servlet&lt;/code&gt; of the &lt;code class=&quot;highlighter-rouge&quot;&gt;jsr339-jaxrs-2.0-final-spec&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-04-05-spec1.png&quot; alt=&quot;2016-04-05-spec1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-04-05-spec2.png&quot; alt=&quot;2016-04-05-spec2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-04-05-spec3.png&quot; alt=&quot;2016-04-05-spec3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-04-05-spec4.png&quot; alt=&quot;2016-04-05-spec4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Please note Application is used with Servlet container, that means, not all the containers need to follow this Application workflow to register resources. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;resteasy-netty4&lt;/code&gt; container doesn’t need Application to work. Here is an example to use &lt;code class=&quot;highlighter-rouge&quot;&gt;resteasy-netty4&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ResteasyDeployment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deployment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResteasyDeployment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;netty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NettyJaxrsServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;netty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDeployment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deployment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;netty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;netty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRootResourcePath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;netty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSecurityDomain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;netty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;deployment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addPerRequestResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BasicResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As the example shown above, we can see that the &lt;code class=&quot;highlighter-rouge&quot;&gt;BasicResource&lt;/code&gt; is added into &lt;code class=&quot;highlighter-rouge&quot;&gt;Registry&lt;/code&gt; directly, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Registry&lt;/code&gt; is contained in &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyDeployment&lt;/code&gt;. We can see the whole process doesn’t involve Application. This makes us understanding two things: The first one is that Application is just a way to provide root resource path and resources to the container; The second thing is that RESTEasy can directly accept resource classes and store it in its classes.&lt;/p&gt;

&lt;p&gt;Now let’s check how does RESTEasy deals with the Application. There is a &lt;code class=&quot;highlighter-rouge&quot;&gt;createApplication()&lt;/code&gt; method defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyDeployment&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicationClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dispatcher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResteasyProviderFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;providerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContextClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;applicationClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClassNotFoundException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;providerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createProviderInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDefaultContextObjects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ResteasyProviderFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pushContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PropertyInjector&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propertyInjector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;providerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInjectorFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createPropertyInjector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;providerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;propertyInjector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From the above code, we can see the method will create an Application class instance from the &lt;code class=&quot;highlighter-rouge&quot;&gt;String applicationClass&lt;/code&gt; defined by user, so it will be the user extended Application class. The following is the sequence diagram of above code:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2016-04-05-org.jboss.resteasy.spi.ResteasyDeployment.createApplication.png&quot; alt=&quot;2016-04-05-org.jboss.resteasy.spi.ResteasyDeployment.createApplication.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above analysis, we can see the instance of Application will be stored into multiple classes, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;Dispatcher&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyProviderFactory&lt;/code&gt;. Here are the two places that are using &lt;code class=&quot;highlighter-rouge&quot;&gt;createApplication()&lt;/code&gt; method:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-04-05-create-application.png&quot; alt=&quot;2017-04-05-create-application.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As the screenshot shown above, one is in &lt;code class=&quot;highlighter-rouge&quot;&gt;ServletContainerDispatcher.init()&lt;/code&gt;, and the other one is &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyDeployment.start()&lt;/code&gt;. Here is the usage of &lt;code class=&quot;highlighter-rouge&quot;&gt;createApplication()&lt;/code&gt; method in &lt;code class=&quot;highlighter-rouge&quot;&gt;ServletContainerDispatcher.init()&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-04-05-servletcontainerdispatcher.png&quot; alt=&quot;2017-04-05-servletcontainerdispatcher.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see there is a &lt;code class=&quot;highlighter-rouge&quot;&gt;processApplication()&lt;/code&gt; method after &lt;code class=&quot;highlighter-rouge&quot;&gt;createApplication()&lt;/code&gt; method. Here is the sequence diagram of the &lt;code class=&quot;highlighter-rouge&quot;&gt;ServletContainerDispatcher.processApplication()&lt;/code&gt; method:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-04-05-processapplication.png&quot; alt=&quot;2017-04-05-processapplication.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see the &lt;code class=&quot;highlighter-rouge&quot;&gt;processApplication()&lt;/code&gt; method will fetch the resources from Application instance and register them into various classes. This is the usage of Application in RESTEasy. Next let’s see the &lt;code class=&quot;highlighter-rouge&quot;&gt;createApplication()&lt;/code&gt; method in &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyDeployment.start()&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-04-05-resteasydeployment.png&quot; alt=&quot;2017-04-05-resteasydeployment.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Please note RESTEasy doesn’t process the &lt;code class=&quot;highlighter-rouge&quot;&gt;@ApplicationPath&lt;/code&gt; annotation by itself, it’s the container’s responsibility to deal with it. &lt;code class=&quot;highlighter-rouge&quot;&gt;WadlUndertowConnector&lt;/code&gt; is a good example:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jboss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;resteasy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;wadl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.undertow.servlet.api.DeploymentInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.undertow.servlet.api.ServletInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.jboss.resteasy.plugins.server.servlet.HttpServlet30Dispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.jboss.resteasy.plugins.server.undertow.UndertowJaxrsServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.jboss.resteasy.spi.ResteasyDeployment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.ws.rs.ApplicationPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.ws.rs.core.Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;undertow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;servlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Servlets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;servlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * Created by weli on 7/26/16.
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WadlUndertowConnector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UndertowJaxrsServer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deployToServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UndertowJaxrsServer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ApplicationPath&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAnnotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApplicationPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;appPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deployToServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UndertowJaxrsServer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deployToServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UndertowJaxrsServer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contextPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ResteasyDeployment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deployment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResteasyDeployment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;deployment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setApplicationClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;DeploymentInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;di&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;undertowDeployment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deployment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;ServletInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resteasyWadlServlet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ResteasyWadlServlet&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResteasyWadlServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAsyncSupported&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setLoadOnStartup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/application.xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;di&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resteasyWadlServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;di&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;di&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setContextPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contextPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;di&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDeploymentName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Resteasy&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contextPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;di&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From the above code, we can see the &lt;code class=&quot;highlighter-rouge&quot;&gt;ApplicationPath&lt;/code&gt; is extracted from Application instance:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ApplicationPath&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAnnotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApplicationPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And then it’s injected into the Undertow&lt;sup id=&quot;fnref:undertow&quot;&gt;&lt;a href=&quot;#fn:undertow&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; container:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;di&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setContextPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contextPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From the above study, we know that Application can help users to register resources into Servlet container in a cleaner way, nevertheless RESTEasy doesn’t rely on Application to register classes. In addition, some RESTEasy non-servlet containers such as Netty4 and Sun JDK HTTP Server doesn’t need Application to register resources.&lt;/p&gt;

&lt;p&gt;For Servlet Container, RESTEasy provides helper classes such as &lt;code class=&quot;highlighter-rouge&quot;&gt;ServletContainerDispatcher&lt;/code&gt; to help the container to prepare RESTEasy classes more conveniently. Here are the relative classes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-04-05-dispatcher.png&quot; alt=&quot;2017-04-05-dispatcher.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;RESTEasy Undertow server is a servlet container, and &lt;code class=&quot;highlighter-rouge&quot;&gt;UndertowJaxrsServer&lt;/code&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;ServletContainerDispatcher&lt;/code&gt; like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ServletInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resteasyServlet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ResteasyServlet&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServlet30Dispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAsyncSupported&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setLoadOnStartup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I won’t dig into more details in this article, but you should get a good understanding on RESTEasy Application support now.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;&lt;em&gt;References&lt;/em&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:undertow&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://undertow.io/&quot;&gt;http://undertow.io.&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:undertow&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
          <pubDate>2017-04-05T00:00:00+00:00</pubDate>
          <link>/2017/04/05/resteasy-applications.html</link>
          <guid isPermaLink="true">/2017/04/05/resteasy-applications.html</guid>
        </item>
      
    
      
        <item>
          <title>An Analysis On RESTEasy Security Modules And Comparing Its Features With Keycloak</title>
          <description>&lt;p&gt;In this article I’d like to share with you my study on RESTEasy security modules and Keycloak features.&lt;/p&gt;

&lt;p&gt;I haven’t finished all the investigations on this topic, but I’d like to share with you some of my findings till now. Firstly I’d like to give a brief introduction to Keycloak. This project is actually an Single-Sign-On solution. You can compare this project with Apereo CAS&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. The protcols that Keycloak supports by default are OpenID&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; and SAML&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;. These proctcols are just defining the credential exchanging framework, but Keycloak also provides IdP(Identity Provider)&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; that can help customers to setup a credential server using Wildfly that can store username/password pairs and act as credentials provider, and Keycloak also provides different adapters to various kinds of clients(Service Provider in SSO concept). On the other hand, the RESTEasy security modules are listed here:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ls -1
jose-jwt
keystone
login-module-authenticator
resteasy-crypto
resteasy-oauth
skeleton-key-idm
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’ll introduce the above modules one by one and refer to Keycloak when necessary.&lt;/p&gt;

&lt;h3 id=&quot;jose-jwt&quot;&gt;jose-jwt&lt;/h3&gt;

&lt;p&gt;The first one is &lt;code class=&quot;highlighter-rouge&quot;&gt;jose-jwt&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;jose&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;Javascript Object Signing and Encryption&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;jws&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON Web Token&lt;/code&gt;&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;jose-jws&lt;/code&gt; module contains classes to deal with these two encryption modules. Keycloak copied part of these classes into its own project:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pwd
/Users/weli/projs/keycloak/keycloak-github
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And here are the classes:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ find . | grep jose
./core/src/main/java/org/keycloak/jose
./core/src/main/java/org/keycloak/jose/jwk
./core/src/main/java/org/keycloak/jose/jwk/JSONWebKeySet.java
./core/src/main/java/org/keycloak/jose/jwk/JWK.java
./core/src/main/java/org/keycloak/jose/jwk/JWKBuilder.java
./core/src/main/java/org/keycloak/jose/jwk/JWKParser.java
./core/src/main/java/org/keycloak/jose/jwk/RSAPublicJWK.java
./core/src/main/java/org/keycloak/jose/jws
./core/src/main/java/org/keycloak/jose/jws/Algorithm.java
./core/src/main/java/org/keycloak/jose/jws/AlgorithmType.java
./core/src/main/java/org/keycloak/jose/jws/crypto
./core/src/main/java/org/keycloak/jose/jws/crypto/HashProvider.java
./core/src/main/java/org/keycloak/jose/jws/crypto/HMACProvider.java
./core/src/main/java/org/keycloak/jose/jws/crypto/RSAProvider.java
./core/src/main/java/org/keycloak/jose/jws/crypto/SignatureProvider.java
./core/src/main/java/org/keycloak/jose/jws/JWSBuilder.java
./core/src/main/java/org/keycloak/jose/jws/JWSHeader.java
./core/src/main/java/org/keycloak/jose/jws/JWSInput.java
./core/src/main/java/org/keycloak/jose/jws/JWSInputException.java
./core/src/test/java/org/keycloak/jose
./core/src/test/java/org/keycloak/jose/HmacTest.java
./core/src/test/java/org/keycloak/jose/JsonWebTokenTest.java
./core/src/test/java/org/keycloak/jose/jwk
./core/src/test/java/org/keycloak/jose/jwk/JWKBuilderTest.java
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Keycloak doesn’t contain &lt;code class=&quot;highlighter-rouge&quot;&gt;jwt&lt;/code&gt; classes:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ find . | grep jwt
./adapters/oidc/adapter-core/src/test/resources/keycloak-jwt.json
./examples/authz/photoz/photoz-html5-client/src/main/webapp/lib/jwt-decode.min.js
./testsuite/integration-arquillian/test-apps/photoz/photoz-html5-client/src/main/webapp/lib/jwt-decode.min.js
./themes/src/main/resources/theme/base/admin/resources/partials/client-credentials-jwt-key-export.html
./themes/src/main/resources/theme/base/admin/resources/partials/client-credentials-jwt-key-import.html
./themes/src/main/resources/theme/base/admin/resources/partials/client-credentials-jwt.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here are the contents of RESTEasy &lt;code class=&quot;highlighter-rouge&quot;&gt;jose-jws&lt;/code&gt; module. The directory is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pwd
/Users/weli/projs/resteasy-upstream/security/jose-jwt/src
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here are the classes:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ find . | grep -v test
.
./main
./main/java
./main/java/org
./main/java/org/jboss
./main/java/org/jboss/resteasy
./main/java/org/jboss/resteasy/jose
./main/java/org/jboss/resteasy/jose/Base64Url.java
./main/java/org/jboss/resteasy/jose/i18n
./main/java/org/jboss/resteasy/jose/i18n/LogMessages.java
./main/java/org/jboss/resteasy/jose/i18n/Messages.java
./main/java/org/jboss/resteasy/jose/jwe
./main/java/org/jboss/resteasy/jose/jwe/Algorithm.java
./main/java/org/jboss/resteasy/jose/jwe/CompressionAlgorithm.java
./main/java/org/jboss/resteasy/jose/jwe/crypto
./main/java/org/jboss/resteasy/jose/jwe/crypto/AES.java
./main/java/org/jboss/resteasy/jose/jwe/crypto/AESCBC.java
./main/java/org/jboss/resteasy/jose/jwe/crypto/AESGCM.java
./main/java/org/jboss/resteasy/jose/jwe/crypto/AuthenticatedCipherText.java
./main/java/org/jboss/resteasy/jose/jwe/crypto/CompositeKey.java
./main/java/org/jboss/resteasy/jose/jwe/crypto/DeflateHelper.java
./main/java/org/jboss/resteasy/jose/jwe/crypto/DeflateUtils.java
./main/java/org/jboss/resteasy/jose/jwe/crypto/DirectDecrypter.java
./main/java/org/jboss/resteasy/jose/jwe/crypto/DirectEncrypter.java
./main/java/org/jboss/resteasy/jose/jwe/crypto/HMAC.java
./main/java/org/jboss/resteasy/jose/jwe/crypto/JWECryptoParts.java
./main/java/org/jboss/resteasy/jose/jwe/crypto/RSA1_5.java
./main/java/org/jboss/resteasy/jose/jwe/crypto/RSA_OAEP.java
./main/java/org/jboss/resteasy/jose/jwe/crypto/RSADecrypter.java
./main/java/org/jboss/resteasy/jose/jwe/crypto/RSAEncrypter.java
./main/java/org/jboss/resteasy/jose/jwe/EncryptionMethod.java
./main/java/org/jboss/resteasy/jose/jwe/JWEBuilder.java
./main/java/org/jboss/resteasy/jose/jwe/JWEHeader.java
./main/java/org/jboss/resteasy/jose/jwe/JWEInput.java
./main/java/org/jboss/resteasy/jose/jws
./main/java/org/jboss/resteasy/jose/jws/Algorithm.java
./main/java/org/jboss/resteasy/jose/jws/crypto
./main/java/org/jboss/resteasy/jose/jws/crypto/HMACProvider.java
./main/java/org/jboss/resteasy/jose/jws/crypto/RSAProvider.java
./main/java/org/jboss/resteasy/jose/jws/JWSBuilder.java
./main/java/org/jboss/resteasy/jose/jws/JWSHeader.java
./main/java/org/jboss/resteasy/jose/jws/JWSInput.java
./main/java/org/jboss/resteasy/jwt
./main/java/org/jboss/resteasy/jwt/JsonSerialization.java
./main/java/org/jboss/resteasy/jwt/JsonWebToken.java
./main/java/org/jboss/resteasy/jwt/JWTContextResolver.java
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Generally speaking, the classes in Keycloak is a subset of the classes in RESTEasy &lt;code class=&quot;highlighter-rouge&quot;&gt;jose-jwt&lt;/code&gt;. In addition, Wildfly uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;resteasy-crypto&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;jose-jws&lt;/code&gt; modules by default. Here are the default modules in &lt;code class=&quot;highlighter-rouge&quot;&gt;wildfly-10.1.0.Final&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;system/layers/base/org/jboss/resteasy/jose-jwt/main/jose-jwt-3.0.19.Final.jar
system/layers/base/org/jboss/resteasy/jose-jwt/main/module.xml
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now let’s check the &lt;code class=&quot;highlighter-rouge&quot;&gt;resteasy-crypto&lt;/code&gt; module.&lt;/p&gt;

&lt;h3 id=&quot;resteasy-crypto&quot;&gt;resteasy-crypto&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;resteasy-crypto&lt;/code&gt; provides a basic toolset for common encryption work. For example, it contains classes like &lt;code class=&quot;highlighter-rouge&quot;&gt;DKIMSignature&lt;/code&gt; for dealing with DKIM headers&lt;sup id=&quot;fnref:6&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;, and it contains &lt;code class=&quot;highlighter-rouge&quot;&gt;KeyTools&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;PemUtils&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;DerUtils&lt;/code&gt; for processing JSSE&lt;sup id=&quot;fnref:7&quot;&gt;&lt;a href=&quot;#fn:7&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt; classes like &lt;code class=&quot;highlighter-rouge&quot;&gt;PrivateKey&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;PublicKey&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;X509Certificate&lt;/code&gt;. Same like &lt;code class=&quot;highlighter-rouge&quot;&gt;jose-jwt&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;resteasy-crypto&lt;/code&gt; is shipped by default by Wildfly:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;system/layers/base/org/jboss/resteasy/resteasy-crypto/main/module.xml
system/layers/base/org/jboss/resteasy/resteasy-crypto/main/resteasy-crypto-3.0.19.Final.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Keycloak&lt;/code&gt; has simliar classes, some are same, but they are not equal:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ls -1 ./common/src/main/java/org/keycloak/common/util | grep -i util
CRLUtils.java
CertificateUtils.java
CollectionUtil.java
DerUtils.java
EnvUtil.java
HostUtils.java
HtmlUtils.java
KerberosSerializationUtils.java
KeyUtils.java
KeystoreUtil.java
MimeTypeUtil.java
NetworkUtils.java
OCSPUtils.java
ObjectUtil.java
PemUtils.java
StreamUtil.java
UriUtils.java
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In the future maybe we should try to maintain the shared part of classes between Keycloak and RESTEasy.&lt;/p&gt;

&lt;h3 id=&quot;resteasy-oauth&quot;&gt;resteasy-oauth&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;resteasy-oauth&lt;/code&gt; is a restful adapter to support OAuth protocol. I haven’t checked the detail implementation in Keycloak side, but I guess this module is no longer needed and can be replaced by the feature provided by Keycloak. I need a more fine-grained study on Keycloak side to give my conclusion.&lt;/p&gt;

&lt;h3 id=&quot;skeleton-key-idm&quot;&gt;skeleton-key-idm&lt;/h3&gt;

&lt;p&gt;I believe this project is now fully replaced by Keycloak and can be deprecated. Here are two articles you may want to read that describes the design and architecture of the &lt;code class=&quot;highlighter-rouge&quot;&gt;skeleton-key-idm&lt;/code&gt;&lt;sup id=&quot;fnref:8&quot;&gt;&lt;a href=&quot;#fn:8&quot; class=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&quot;fnref:9&quot;&gt;&lt;a href=&quot;#fn:9&quot; class=&quot;footnote&quot;&gt;9&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h3 id=&quot;keystone&quot;&gt;keystone&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;keystone&lt;/code&gt; is  a &lt;code class=&quot;highlighter-rouge&quot;&gt;Skeleton Keystone IDM&lt;/code&gt; that supports &lt;code class=&quot;highlighter-rouge&quot;&gt;Openstack's Keystone protocol&lt;/code&gt;. IMHO, the development of this project should be moved to Keycloak side, and RESTEasy should deprecate this module.&lt;/p&gt;

&lt;h3 id=&quot;login-module-authenticator&quot;&gt;login-module-authenticator&lt;/h3&gt;

&lt;p&gt;This module is just a simple one that contains two classes:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;login-module-authenticator weli$ tree src/
src/
└── main
    └── java
        └── org
            └── jboss
                └── security
                    └── web
                        ├── DomainDelegatingAuthenticator.java
                        └── ThreadContext.java

6 directories, 2 files
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I haven’t done full analysis on the usage of this project. Maybe it’s used by JBoss Web? I don’t know yet. But I believe this sub-module could be removed in future.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Here are my conclusions on RESTEasy security modules, it may not be accurate, and it’s just based on my study till now. You can’t use this as the final decision of RESTEasy community for the future. Here are the points:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We should keep &lt;code class=&quot;highlighter-rouge&quot;&gt;jose-jwt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;resteasy-crypto&lt;/code&gt; modules because they are used by Wildfly.&lt;/li&gt;
  &lt;li&gt;Maybe we can coordinate with Keycloak team to merge the shared part of codes. IMHO Keycloak can use &lt;code class=&quot;highlighter-rouge&quot;&gt;jose-jwt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;resteasy-crypto&lt;/code&gt; and don’t maintain it in Keycloak, or vice versa.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;resteasy-oauth&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;skeleton-key-idm&lt;/code&gt; should be deprecated and users should use Keycloak instead.&lt;/li&gt;
  &lt;li&gt;The development of &lt;code class=&quot;highlighter-rouge&quot;&gt;keystone&lt;/code&gt; support should be moved to Keycloak side.&lt;/li&gt;
  &lt;li&gt;Who is using &lt;code class=&quot;highlighter-rouge&quot;&gt;login-module-authenticator&lt;/code&gt;? I guess it should be removed from RESTEasy. We need to know what project is using it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Above are just some personal comments and they are not the decisions from RESTEasy community.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;&lt;em&gt;References&lt;/em&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/apereo/cas&quot;&gt;Central Authentication Service (CAS).&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/OpenID&quot;&gt;OpenID.&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language&quot;&gt;Security Assertion Markup Language.&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Identity_provider&quot;&gt;Identity provider.&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://jose.readthedocs.io/en/latest/&quot;&gt;Javascript Object Signing and Encryption (JOSE).&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:6&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.dkim.org/&quot;&gt;DomainKeys Identified Mail (DKIM).&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:6&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:7&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Java_Secure_Socket_Extension&quot;&gt;Java Secure Socket Extension.&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:7&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:8&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://bill.burkecentral.com/2012/11/21/scoping-out-resteasy-skeleton-key-security/&quot;&gt;Scoping out Resteasy Skeleton Key Security.&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:8&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:9&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://developer.jboss.org/wiki/ResteasySkeletonKeyWebSSOOAuth&quot;&gt;Resteasy Skeleton Key Web SSO/OAuth.&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:9&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
          <pubDate>2017-03-30T00:00:00+00:00</pubDate>
          <link>/2017/03/30/an-analysis-on-resteasy-security-modules-and-comparing-its-features-with-keycloak.html</link>
          <guid isPermaLink="true">/2017/03/30/an-analysis-on-resteasy-security-modules-and-comparing-its-features-with-keycloak.html</guid>
        </item>
      
    
      
        <item>
          <title>Using RESTEasy WADL To Demonstrate The Startup Process Of RESTEasy Container</title>
          <description>&lt;p&gt;RESTEasy WADL is a module that can generate WADL data for the restful resources. It needs to scan the RESTEasy container to get all the resources and methods information to generate the WADL data correctly, so analyzing the RESTEasy WADL intialization process can help us to better understanding the RESTEasy container structure. In this article I will use the code of RESTEasy WADL for this purpose.&lt;/p&gt;

&lt;p&gt;In the WADL section of RESTEasy document&lt;sup id=&quot;fnref:doc&quot;&gt;&lt;a href=&quot;#fn:doc&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, it shows the usage of the WADL module. Here is the code shown in &lt;code class=&quot;highlighter-rouge&quot;&gt;51.2. RESTEasy WADL support for Sun JDK HTTP Server&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jboss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;resteasy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HttpContextBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contextBuilder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jboss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;resteasy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HttpContextBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;contextBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDeployment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getActualResourceClasses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResteasyWadlDefaultResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above code show us how the resource classes are added into the &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyDeployment&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpContextBuilder&lt;/code&gt; is a RESTEasy wrapper class for the Sun JDK HTTP Server, and we don’t need to care about its details in this article. We need to understand the &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyWadlDefaultResource&lt;/code&gt; is added into &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyDeployment&lt;/code&gt; from above code. This tells us the &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyDeployment&lt;/code&gt; class stores all the resource classes. I won’t dive into the &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyDeployment&lt;/code&gt; in this article, but if you’d like to learn more about the core classes of RESTEasy you can check this&lt;sup id=&quot;fnref:core&quot;&gt;&lt;a href=&quot;#fn:core&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Now we can go on checking the following code in the document:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;ResteasyWadlDefaultResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getServices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;ResteasyWadlGenerator&lt;/span&gt;
  			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;generateServiceRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contextBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDeployment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From above code we can see the &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyWadlGenerator&lt;/code&gt; class is used to create the &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyWadlServiceRegistry&lt;/code&gt;. It will use the &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyDeployment&lt;/code&gt; to get all the resource classes and their method information. This is reasonable because &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyDeployment&lt;/code&gt; contains all the resources as we see above. Here is the code of &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyWadlGenerator&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResteasyWadlGenerator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResteasyWadlServiceRegistry&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generateServiceRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResteasyDeployment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deployment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ResourceMethodRegistry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResourceMethodRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deployment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ResteasyProviderFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;providerFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deployment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProviderFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ResteasyWadlServiceRegistry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResteasyWadlServiceRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;providerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From the above implementation, we can see the &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceMethodRegistry&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyProviderFactory&lt;/code&gt; are fetched from &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyDeployment&lt;/code&gt;. These two classes are put into &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyWadlServiceRegistry&lt;/code&gt;, so the &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceMethodRegistry&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyProviderFactory&lt;/code&gt; must contain sufficient information about restful resources, or &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyWadlServiceRegistry&lt;/code&gt; will not get all the necessary information about the  resources. Now let’s see the class diagram of &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyWadlServiceRegistry&lt;/code&gt; and the relative classes it contains:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-23-ResteasyWadlServiceRegistry.png&quot; alt=&quot;2017-03-23-ResteasyWadlServiceRegistry.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above diagram, we can see &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyWadlServiceRegistry&lt;/code&gt; contains &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceMethodRegistry&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyProviderFactory&lt;/code&gt;, and with these two classes, it can later fetch all the following classes it needs. Please note &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyWadlServiceRegistry&lt;/code&gt; stores two kinds of resources. The first kind is &lt;code class=&quot;highlighter-rouge&quot;&gt;resources&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResteasyWadlResourceMetaData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From the above &lt;code class=&quot;highlighter-rouge&quot;&gt;Map&lt;/code&gt; data structure, we can guess the resources contain url &amp;lt;-&amp;gt; class entries, and &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyWadlResourceMetaData&lt;/code&gt; is used to store resource class information. The second kind is &lt;code class=&quot;highlighter-rouge&quot;&gt;locators&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResteasyWadlServiceRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locators&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This one contains resource locators, because resource locators are actually nested resources, so they are a list of &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyWadlServiceRegistry&lt;/code&gt; itself. We can check the &lt;code class=&quot;highlighter-rouge&quot;&gt;scanRegistry()&lt;/code&gt; method of &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyWadlServiceRegistry&lt;/code&gt; to see how it fetches, processes and stores the resources information:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-24-scanRegistry.png&quot; alt=&quot;2017-03-24-scanRegistry.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above sequence diagram we can see how &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyWadlServiceRegistry&lt;/code&gt; deals with two types of resources. If the resource type is &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceMethodInvoker&lt;/code&gt;, then it will create &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyWadlMethodMetaData&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyWadlResourceMetaData&lt;/code&gt; to store the resource classes and methods information. The name of this class is misleading, it should be called &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceClassAndMethodInvoker&lt;/code&gt;, because it contains both resource class their methods information. Here is the relative code in &lt;code class=&quot;highlighter-rouge&quot;&gt;scanRegistry()&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invoker&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResourceMethodInvoker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ResteasyWadlMethodMetaData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodMetaData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResteasyWadlMethodMetaData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResourceMethodInvoker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invoker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ResteasyWadlResourceMetaData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resourceMetaData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;methodMetaData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKlassUri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resourceMetaData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;resourceMetaData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResteasyWadlResourceMetaData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;methodMetaData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKlassUri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;methodMetaData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKlassUri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resourceMetaData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;resourceMetaData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addMethodMetaData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;methodMetaData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;On other hand, if the resource type is &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceLocator&lt;/code&gt;, then it will add the locator into the &lt;code class=&quot;highlighter-rouge&quot;&gt;locators&lt;/code&gt; array. Here is the relative code:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invoker&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResourceLocator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ResourceMethodRegistry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locatorRegistry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResourceMethodRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;providerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;locatorRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addResourceFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locatorResourceType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;locators&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResteasyWadlServiceRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locatorRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;providerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The name of &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceMethodRegistry&lt;/code&gt; is also misleading, it might be better called &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceClassAndMethodRegistry&lt;/code&gt; because it also contains both resource classes and methods information. The instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceMethodRegistry&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;locatorRegistry&lt;/code&gt;, and it is passed to the constructor of &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyWadlServiceRegistry&lt;/code&gt;, and the created &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyWadlServiceRegistry&lt;/code&gt; is added into &lt;code class=&quot;highlighter-rouge&quot;&gt;locators&lt;/code&gt;. This is the line of code that does this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;locators&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResteasyWadlServiceRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locatorRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;providerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Please note the constructor of &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyWadlServiceRegistry&lt;/code&gt; will call the &lt;code class=&quot;highlighter-rouge&quot;&gt;scanRegistry()&lt;/code&gt; method, so here we have a recursive call of &lt;code class=&quot;highlighter-rouge&quot;&gt;scanRegistry()&lt;/code&gt; for resource locators. This implementation reflects the fact that resource locator is a kind of nested resource. Now let’s check the &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyWadlResourceMetaData&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyWadlMethodMetaData&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ResteasyWadlMethodMetaData.png&quot; alt=&quot;ResteasyWadlMethodMetaData.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above diagram, we can see &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyWadlResourceMetaData&lt;/code&gt; has a list of &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyWadlMethodMetaData&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyWadlMethodMetaData&lt;/code&gt; contains the &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceMethodInvoker&lt;/code&gt;, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceMethodInvoker&lt;/code&gt; is the implementation class to do the actual resource method invocations. Now we can check how &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyWadlWriter&lt;/code&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyWadlResourceMetaData&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyWadlMethodMetaData&lt;/code&gt; to convert resource classes and methods to WADL data:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-24-processWadl.png&quot; alt=&quot;2017-03-24-processWadl.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above sequence diagram we can see how &lt;code class=&quot;highlighter-rouge&quot;&gt;resourceMetaDataEntry&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;methodMetaData&lt;/code&gt; are used in &lt;code class=&quot;highlighter-rouge&quot;&gt;processWadl&lt;/code&gt; method. Here is the relative code:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResteasyWadlResourceMetaData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resourceMetaDataEntry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serviceRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;entrySet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;resourceClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resourceMetaDataEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resourceClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResteasyWadlMethodMetaData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodMetaData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resourceMetaDataEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMethodsMetaData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In addition, at the end of the &lt;code class=&quot;highlighter-rouge&quot;&gt;processWadl&lt;/code&gt; method, it deals with the resource locators in a recursive way:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResteasyWadlServiceRegistry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serviceRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLocators&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;processWadl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can see again from here that the resource locators are just nested resources.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;&lt;em&gt;References&lt;/em&gt;&lt;/h3&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:doc&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://docs.jboss.org/resteasy/docs/3.1.1.Final/userguide/html_single/index.html#WADL&quot;&gt;http://docs.jboss.org.&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:doc&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:core&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://weinan.io/2017/03/15/core-classes-to-implement-resteasy-container.html&quot;&gt;http://weinan.io.&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:core&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
          <pubDate>2017-03-23T00:00:00+00:00</pubDate>
          <link>/2017/03/23/using-resteasy-wadl-to-demonstrate-the-startup-process-of-resteasy-container.html</link>
          <guid isPermaLink="true">/2017/03/23/using-resteasy-wadl-to-demonstrate-the-startup-process-of-resteasy-container.html</guid>
        </item>
      
    
      
        <item>
          <title>A Non-recursive Approach To The Fibonacci Sequence Generator</title>
          <description>&lt;p&gt;We usually know the Fibonacci sequence generator for learning the recursive algorithm. In this article, I’d like to introduce to you a non-recursive implementation.&lt;/p&gt;

&lt;p&gt;Here is the recursive version of the Fibonacci sequence generator we usually learn from the text book&lt;sup id=&quot;fnref:fibrec&quot;&gt;&lt;a href=&quot;#fn:fibrec&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The disadvantage of the above implementation is that the stack memory usage will increase exponentially as the argument &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; increases. In addition, this recursion is not a tail-recursion&lt;sup id=&quot;fnref:tail&quot;&gt;&lt;a href=&quot;#fn:tail&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, so it can’t be optimized easily by compiler.&lt;/p&gt;

&lt;p&gt;Actually we can use loop instead of recursion to implement the fibonacci sequence more efficiently. Here is the one I wrote for example:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nonrecursiveFibonacci&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// for n == 2&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// using `a` for temporary storage&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As the codes shown above, I used a loop and some fine-grained boundary conditions to replace the recursion. In this way we totally eliminate the exponentially grown stack memory usages of the recursive version of the implementation. Now let’s write some codes for benchmark:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;result: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Time consumed by `fibonacci` method:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And this is for the non-recursive implementation benchmark:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonrecursiveFibonacci&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;result: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Time consumed by `nonrecursiveFibonacci` method:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As the codes shown above, we used two different versions of implementations to calculate the 40th fibonacci number. And here’s the running result:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;result: 165580141
Time consumed by `fibonacci` method:756
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here’s the result for the non-recursive implementation:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;result: 165580141
Time consumed by `nonrecursiveFibonacci` method:0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can see the recursive implementation used 756 milliseconds to complete the calculation, and the time used by the non-recursive implementation can be neglected at millisecond level. In addition, the bigger the fibonacci number we want to calculate, the more performance difference between two implementations we’ll get. More seriously, the recursive version will finally fail as the argument &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; grows, because it will throw stack memory overflow exception for its exponentially grown stack memory usage.&lt;/p&gt;

&lt;p&gt;In conclusion, though the recursive implementation is clean in design, but sometimes it’s not as efficient as the loop alternative. From the practical perspective, we should fine-tune our implementation to maximize the performance.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;&lt;em&gt;References&lt;/em&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:fibrec&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://introcs.cs.princeton.edu/java/23recursion/Fibonacci.java.html&quot;&gt;http://introcs.cs.princeton.edu.&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:fibrec&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:tail&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Tail_call&quot;&gt;https://en.wikipedia.org.&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:tail&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
          <pubDate>2017-03-20T00:00:00+00:00</pubDate>
          <link>/2017/03/20/a-non-recursive-approach-to-the-fibonacci-sequence-generator.html</link>
          <guid isPermaLink="true">/2017/03/20/a-non-recursive-approach-to-the-fibonacci-sequence-generator.html</guid>
        </item>
      
    
      
        <item>
          <title>Using NetworkManager-tui To Manage The Network From Text User Interface</title>
          <description>&lt;p&gt;Sometimes it’s more convenient to manage the network from text user interface. In this article I’d like to share a curses-based tool named NetworkManager-tui.&lt;/p&gt;

&lt;p&gt;This package is provided by Fedora Linux&lt;sup id=&quot;fnref:fedora&quot;&gt;&lt;a href=&quot;#fn:fedora&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; distributions, and I’m using Fedora Version 24 in my local machine, so I can check it with the &lt;code class=&quot;highlighter-rouge&quot;&gt;dnf&lt;/code&gt; command. Here is the info of this package:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ dnf info NetworkManager-tui
Name        : NetworkManager-tui
Arch        : x86_64
Epoch       : 1
Version     : 1.2.6
Release     : 1.fc24
Size        : 197 k
Repo        : updates
Summary     : NetworkManager curses-based UI
URL         : http://www.gnome.org/projects/NetworkManager/
License     : GPLv2+
Description : This adds a curses-based &quot;TUI&quot; (Text User Interface) to
            : NetworkManager, to allow performing some of the operations supported
            : by nm-connection-editor and nm-applet in a non-graphical environment.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;dnf&lt;/code&gt; command to download and install it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo dnf install NetworkManager-tui
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above command will install the &lt;code class=&quot;highlighter-rouge&quot;&gt;NetworkManager-tui&lt;/code&gt; and its dependencies. After the packages are installed, we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;nmtui&lt;/code&gt; command to open the manager in the text interface like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-20-016.png&quot; alt=&quot;2017-03-20-016.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above screenshot, we can see the manager supports us to edit the connections, or to open or close a connection. We can select the &lt;code class=&quot;highlighter-rouge&quot;&gt;Activate a connection&lt;/code&gt; in the menu, and then we will enter this page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-20-019.png&quot; alt=&quot;2017-03-20-019.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As the screenshot shown above, it entered into the connection selection page. I selected my VPN connection and hit enter, then it asked me to enter my password to VPN:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-20-017.png&quot; alt=&quot;2017-03-20-017.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After I entered my password, the connection is activated like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-20-020.png&quot; alt=&quot;2017-03-20-020.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above screenshot, we can see there is a &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; before the activated connection to show its active status. Until now, we have seen the basic usages of &lt;code class=&quot;highlighter-rouge&quot;&gt;nmtui&lt;/code&gt; tool. Actually this curses-based&lt;sup id=&quot;fnref:curses&quot;&gt;&lt;a href=&quot;#fn:curses&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; tool is a wrapper of a command line tool called &lt;code class=&quot;highlighter-rouge&quot;&gt;nmcli&lt;/code&gt;. All your operations in &lt;code class=&quot;highlighter-rouge&quot;&gt;nmtui&lt;/code&gt; interface will be converted to the command calls to &lt;code class=&quot;highlighter-rouge&quot;&gt;nmcli&lt;/code&gt;. For example, here is the command to show all the active connections by using &lt;code class=&quot;highlighter-rouge&quot;&gt;nmcli&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ nmcli connection show --active
NAME                    UUID                                  TYPE            DEVICE  
Beijing PEK2 (OpenVPN)  13bdb983-e5b4-4951-9e69-7ba42d6edc49  vpn             enp0s5  
docker0                 969fc191-391e-42a1-aa70-34b6199a8fbd  bridge          docker0
enp0s5                  417ac8e9-b2de-3466-bc5e-5bdcb76c0b87  802-3-ethernet  enp0s5  
tun0                    cc15051d-83ad-4f72-9142-ddf51fc80087  tun             tun0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I won’t explain much about the usage of &lt;code class=&quot;highlighter-rouge&quot;&gt;nmcli&lt;/code&gt; in this article. If you need to manage the network via command line, please check the Fedora document for &lt;code class=&quot;highlighter-rouge&quot;&gt;nmcli&lt;/code&gt;&lt;sup id=&quot;fnref:nmcli&quot;&gt;&lt;a href=&quot;#fn:nmcli&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;&lt;em&gt;References&lt;/em&gt;&lt;/h3&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:fedora&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://getfedora.org/&quot;&gt;https://getfedora.org.&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:fedora&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:curses&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Curses_(programming_library)&quot;&gt;https://en.wikipedia.org.&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:curses&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:nmcli&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://fedoraproject.org/wiki/Networking/CLI&quot;&gt;https://fedoraproject.org.&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:nmcli&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
          <pubDate>2017-03-20T00:00:00+00:00</pubDate>
          <link>/2017/03/20/Using-NetworkManager-tui-to-manage-the-network.html</link>
          <guid isPermaLink="true">/2017/03/20/Using-NetworkManager-tui-to-manage-the-network.html</guid>
        </item>
      
    
      
        <item>
          <title>An Analysis Of RESTEasy Core Classes</title>
          <description>&lt;p&gt;RESTEasy has some embedded containers, such as the Netty container, the Sun JDK HTTP Server container, and the Undertow container. For each container, their basic requirement is to initialize the RESTEasy core classes properly so RESTEasy can provide resource classes and URL to method matching properly. In this article, I’d like to show you my researches on RESTEasy core classes.&lt;/p&gt;

&lt;p&gt;Here is the class diagram that shows the core classes of RESTEasy:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-15-resteasy-core.png&quot; alt=&quot;2017-03-15-resteasy-core.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As the diagram shown above, there are three core classes that forms the RESTEasy basic structure: &lt;code class=&quot;highlighter-rouge&quot;&gt;ReseteasyDeployment&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyProviderFactory&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceMethodRegistry&lt;/code&gt;. I have written &lt;em&gt;RESTEasy Implementation of JAX-RS SPEC 2.0 Section 3.7.&lt;/em&gt;&lt;sup id=&quot;fnref:jaxrs-spec3_7&quot;&gt;&lt;a href=&quot;#fn:jaxrs-spec3_7&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;(abbreviated as [sec3.7] in this article) to explain the design of &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceMethodRegistry&lt;/code&gt; and the following URL matching classes. You may want to check the article for more details on RESTEasy implementation of URL matching process and method invoking process.&lt;/p&gt;

&lt;p&gt;Now let’s check the &lt;code class=&quot;highlighter-rouge&quot;&gt;ReseteasyDeployment&lt;/code&gt; class. This is the basic container of the RESTEasy, and it contains &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyProviderFactory&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceMethodRegistry&lt;/code&gt; classes. The &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyProviderFactory&lt;/code&gt; contains many basic data that will be used during RESTEasy runtime. You can see from the diagram it is a very big class that contains a lot of data. For example, it contains multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;MessageReader&lt;/code&gt; classes, &lt;code class=&quot;highlighter-rouge&quot;&gt;MessageWriter&lt;/code&gt; classes, &lt;code class=&quot;highlighter-rouge&quot;&gt;Filter&lt;/code&gt; classes and &lt;code class=&quot;highlighter-rouge&quot;&gt;Interceptor&lt;/code&gt; classes.&lt;/p&gt;

&lt;p&gt;We can see from the diagram that &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceMethodRegistry&lt;/code&gt; uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyProviderFactory&lt;/code&gt;. The following sequence diagram shows the &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceMethodRegistry.processMethod()&lt;/code&gt; method call process and its usage of &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyProviderFactory&lt;/code&gt; and other core classes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-15-call-digram.png&quot; alt=&quot;2017-03-15-call-digram.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above diagram, we can see how does &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceMethodRegistry&lt;/code&gt; coordinating various components to form a RESTEasy container for dealing with requests. We can see the info is fetched from &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyProviderFactory&lt;/code&gt;, and we can see &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceMethodInvoker&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceLocatorInvoker&lt;/code&gt; are added into multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;Node&lt;/code&gt; classes. In this way, the &lt;code class=&quot;highlighter-rouge&quot;&gt;Node&lt;/code&gt; classes with its &lt;code class=&quot;highlighter-rouge&quot;&gt;Invoker&lt;/code&gt; classes can be used for later requests matching and processing work. For more details on this part, you can refer to the [sec3.7].&lt;/p&gt;

&lt;p&gt;Now we should check the &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyDeployment&lt;/code&gt; start process. The &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyDeployment.start()&lt;/code&gt; method is the initialization method of the RESTEasy container. Here is the sequence diagram of the method:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ResteasyProviderFactory.start.png&quot; alt=&quot;ResteasyProviderFactory.start.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above diagram, we can see &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyDeployment.start()&lt;/code&gt; method will create and initialize &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyProviderFactory&lt;/code&gt;. In addition, it will initialize multiple dispatcher classes. In addition, we can see &lt;em&gt;Step 1.44&lt;/em&gt; is a call to &lt;code class=&quot;highlighter-rouge&quot;&gt;registration()&lt;/code&gt;. This method is to add providers into &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyProviderFactory&lt;/code&gt;, and to add resource classes into &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceMethodRegistry&lt;/code&gt;. Here is the sequence diagram of the &lt;code class=&quot;highlighter-rouge&quot;&gt;registration&lt;/code&gt; method:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ResteasyProviderFactory.registration.png&quot; alt=&quot;ResteasyProviderFactory.registration.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After the &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyDeployment.start()&lt;/code&gt; is done, the provider factory and the registry is prepared to use for processing requests. Now let’s check the dispatchers. The &lt;code class=&quot;highlighter-rouge&quot;&gt;Dispatcher&lt;/code&gt; interface is the runtime entry of the RESTEasy container. If you check the &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyHttpHandler&lt;/code&gt;&lt;sup id=&quot;fnref:handler&quot;&gt;&lt;a href=&quot;#fn:handler&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, then you can see how does it handles the incoming request in its &lt;code class=&quot;highlighter-rouge&quot;&gt;handle&lt;/code&gt; method:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-15-ResteasyHttpHandler.handle.png&quot; alt=&quot;/assets/2017-03-15-ResteasyHttpHandler.handle.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As the screenshot shown above, the &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatcher.invoke()&lt;/code&gt; method is the entry of whole processing work. The &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyHttpHandler&lt;/code&gt; class is the request handler of &lt;code class=&quot;highlighter-rouge&quot;&gt;resteasy-jdk-http&lt;/code&gt; embedded server which uses &lt;em&gt;Sun JDK HTTP Server&lt;/em&gt; as the webserver. Here is the class diagram show the dispatcher classes and the relationship with &lt;code class=&quot;highlighter-rouge&quot;&gt;Registry&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyProviderFactory&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-15-dispatchers.png&quot; alt=&quot;/assets/2017-03-15-dispatchers.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Please check there are two kinds of dispatchers: one is synchronous and the other is asynchronous. You can guess the &lt;code class=&quot;highlighter-rouge&quot;&gt;AsynchronousDispatcher&lt;/code&gt; is to support some asynchronous requests, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;SynchronousDispatcher&lt;/code&gt; is used for traditional request handling. We won’t dive into the details of two kinds of dispatchers in this article. Now let’s see sequence diagram of the &lt;code class=&quot;highlighter-rouge&quot;&gt;SynchronousDispatcher.invoke()&lt;/code&gt; method:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-15-invoke.png&quot; alt=&quot;/assets/2017-03-15-invoke.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above diagram we can see the main logic is to get the invoker and call the &lt;code class=&quot;highlighter-rouge&quot;&gt;invoke()&lt;/code&gt; method of the invoker. Here is the sequence diagram of the &lt;code class=&quot;highlighter-rouge&quot;&gt;SynchronousDispatcher.getInvoker()&lt;/code&gt; method:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-15-getinvoker.png&quot; alt=&quot;/assets/2017-03-15-getinvoker.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above diagram we can see the main logic is &lt;code class=&quot;highlighter-rouge&quot;&gt;registry.getResourceInvoker(request)&lt;/code&gt;. We have discussed the details about RESTEasy implementation on URL matching process in [sec3.7].&lt;/p&gt;

&lt;p&gt;After getting the invoker, the dispatcher will run &lt;code class=&quot;highlighter-rouge&quot;&gt;invoker.invoke()&lt;/code&gt; method to call the real method matches the incoming request. The discussion on invoker is out of the scope in this article, and I’ll write another article to introduce the design on invoker.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;&lt;em&gt;References&lt;/em&gt;&lt;/h3&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:jaxrs-spec3_7&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://weinan.io/2017/03/04/jaxrs-spec3_7.html&quot;&gt;RESTEasy Implementation of JAX-RS SPEC 2.0 Section 3.7&lt;/a&gt;.&amp;nbsp;&lt;a href=&quot;#fnref:jaxrs-spec3_7&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:handler&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/resteasy/Resteasy/blob/master/server-adapters/resteasy-jdk-http/src/main/java/org/jboss/resteasy/plugins/server/sun/http/ResteasyHttpHandler.java&quot;&gt;ResteasyHttpHandler.java&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:handler&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
          <pubDate>2017-03-15T00:00:00+00:00</pubDate>
          <link>/2017/03/15/core-classes-to-implement-resteasy-container.html</link>
          <guid isPermaLink="true">/2017/03/15/core-classes-to-implement-resteasy-container.html</guid>
        </item>
      
    
      
        <item>
          <title>A Brief Introduction To Cite This For Me</title>
          <description>&lt;p&gt;Cite This For Me is an online citation tool for students and researchers to cite multiple types of sources. In this article, I’d like to provide a brief introduction to the tool.&lt;/p&gt;

&lt;p&gt;The major advantage of &lt;em&gt;Cite This For Me&lt;/em&gt;&lt;sup id=&quot;fnref:citethisforme&quot;&gt;&lt;a href=&quot;#fn:citethisforme&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; is that it can cite multiple types of sources, not merely limited to journal articles. Here is the screenshot that shows the reference types the tool supports:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-09-cite-types.png&quot; alt=&quot;2017-03-09-cite-types.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see in above screenshot, the tool can support various types of reference types. This is especially useful when you want to refer to some online resources in academic citation styles.&lt;/p&gt;

&lt;p&gt;Though for standard journal papers it usually doesn’t allow to refer to resources like blogs or multimedia resources, but for writing blogs or online articles, it’s usually useful to cite various kinds of online sources. So the ability to support the citations of various types of resources is valuable.&lt;/p&gt;

&lt;p&gt;Now let me demonstrate the usage of the tool. For example, I want to generate a citation my own blog site. Firstly, I need to click the icon for adding a website like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-09-cite-add-website.png&quot; alt=&quot;2017-03-09-cite-add-website.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then the &lt;em&gt;Autocite&lt;/em&gt; dialog will popup, and I could input the URL of my own blog site like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-09-cite-autocite.png&quot; alt=&quot;2017-03-09-cite-autocite.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next step is to click the &lt;code class=&quot;highlighter-rouge&quot;&gt;autocite&lt;/code&gt; button as shown in above screenshot, and then the basic info of the target website will be automatically fetched:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-09-cite-fetch.png&quot; alt=&quot;2017-03-09-cite-fetch.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then I can click the &lt;code class=&quot;highlighter-rouge&quot;&gt;Final step&lt;/code&gt; button as shown above, and it will be redirected to the edit page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-09-cite-edit.png&quot; alt=&quot;2017-03-09-cite-edit.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In above page, we can review and modify the info as shown above. After everything is done, we can click the &lt;code class=&quot;highlighter-rouge&quot;&gt;Add reference&lt;/code&gt; button to add the citation entry:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-09-entry.png&quot; alt=&quot;2017-03-09-entry.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see from above screenshot a citation entry for my blog site is generated&lt;sup id=&quot;fnref:weinan&quot;&gt;&lt;a href=&quot;#fn:weinan&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, and we can see the citation style is currently &lt;code class=&quot;highlighter-rouge&quot;&gt;Chicago&lt;/code&gt;. Nevertheless, the &lt;em&gt;Cite This For Me&lt;/em&gt; supports a wide range of citation styles, and here is the screenshot of the style list:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-09-style.png&quot; alt=&quot;2017-03-09-style.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can try to change the citation style to &lt;code class=&quot;highlighter-rouge&quot;&gt;IEEE&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-09-ieee.png&quot; alt=&quot;2017-03-09-ieee.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, we can copy and paste the citation text for our own usages. At the end of this article, you can check the references. They are generated by the &lt;em&gt;Cite This For Me&lt;/em&gt; and it’s using the &lt;code class=&quot;highlighter-rouge&quot;&gt;Chicago&lt;/code&gt; citation style.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;&lt;em&gt;References&lt;/em&gt;&lt;/h3&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:citethisforme&quot;&gt;
      &lt;p&gt;“Save Time And Improve Your Marks With Citethisforme, The No. 1 Citation Tool”. 2017. Cite This For Me. &lt;a href=&quot;http://www.citethisforme.com/&quot;&gt;http://www.citethisforme.com/&lt;/a&gt;.&amp;nbsp;&lt;a href=&quot;#fnref:citethisforme&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:weinan&quot;&gt;
      &lt;p&gt;“Weinan.Io By Liweinan”. 2017. Weinan.Io. &lt;a href=&quot;http://weinan.io/&quot;&gt;http://weinan.io/&lt;/a&gt;.&amp;nbsp;&lt;a href=&quot;#fnref:weinan&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
          <pubDate>2017-03-09T00:00:00+00:00</pubDate>
          <link>/2017/03/09/a-brief-introduction-to-citethisforme.html</link>
          <guid isPermaLink="true">/2017/03/09/a-brief-introduction-to-citethisforme.html</guid>
        </item>
      
    
      
        <item>
          <title>Usage Of Typographic Ligature In Coding</title>
          <description>&lt;p&gt;In writing and typography, a ligature occurs where two or more graphemes or letters are joined as a single glyph. In this article, I’d like to introduce several fonts that supports ligatures you can use in various coding tools and text editors.&lt;/p&gt;

&lt;p&gt;The concept of &lt;em&gt;Typographic ligature&lt;/em&gt; is defined like this&lt;sup id=&quot;fnref:ligature&quot;&gt;&lt;a href=&quot;#fn:ligature&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In writing and typography, a ligature occurs where two or more graphemes or letters are joined as a single glyph. An example is the character æ as used in English, in which the letters a and e are joined. The common ampersand (&amp;amp;) developed from a ligature in which the handwritten Latin letters e and t (spelling et, from the Latin for “and”) were combined.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The benefit of ligatures is the improvement of the readability of the symbols. Here is a comparison of the fonts that supports ligatures&lt;sup id=&quot;fnref:firacode&quot;&gt;&lt;a href=&quot;#fn:firacode&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; versus the ordinary monospaced&lt;sup id=&quot;fnref:monospace&quot;&gt;&lt;a href=&quot;#fn:monospace&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; one:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/all_ligatures.png&quot; alt=&quot;all_ligatures&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As the diagram shown above, the ligatures greatly improved the conciseness and readability of the symbols. There are many monospaced fonts that supports ligatures that we can use in our daily coding work. Here are some popular ones: &lt;em&gt;FiraCode&lt;/em&gt;, &lt;em&gt;Hasklig&lt;/em&gt;&lt;sup id=&quot;fnref:hasklig&quot;&gt;&lt;a href=&quot;#fn:hasklig&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; and &lt;em&gt;PragmataPro&lt;/em&gt;&lt;sup id=&quot;fnref:pragmatapro&quot;&gt;&lt;a href=&quot;#fn:pragmatapro&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Here is a screenshot of using &lt;em&gt;FiraCode&lt;/em&gt; in &lt;em&gt;Atom&lt;/em&gt;&lt;sup id=&quot;fnref:atom&quot;&gt;&lt;a href=&quot;#fn:atom&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-07-atom.png&quot; alt=&quot;atom&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As the screenshot shown above, we can see how the symbols like &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;!=&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;=&lt;/code&gt; are displayed with ligatures enabled.&lt;/p&gt;

&lt;p&gt;Not only &lt;em&gt;Atom&lt;/em&gt;, but many coding tools and text editors are supporting ligatures nowadays, such as &lt;em&gt;IntelliJ&lt;/em&gt;&lt;sup id=&quot;fnref:intellij&quot;&gt;&lt;a href=&quot;#fn:intellij&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt; and &lt;em&gt;Emacs&lt;/em&gt;. You can check your editors to see if it supports ligatures or not. Here is a screenshot that shows how to enable font ligatures in &lt;em&gt;IntelliJ&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-08-intellij-ligature.png&quot; alt=&quot;2017-03-08-intellij-ligature.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, I’d like to recommend an interesting article related with ligatures&lt;sup id=&quot;fnref:decline-and-fall-of-the-ligature&quot;&gt;&lt;a href=&quot;#fn:decline-and-fall-of-the-ligature&quot; class=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt; for reading.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;&lt;em&gt;References&lt;/em&gt;&lt;/h3&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:ligature&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Typographic_ligature&quot;&gt;Typographic ligature&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:ligature&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:firacode&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/tonsky/FiraCode&quot;&gt;FiraCode: Monospaced font with programming ligatures&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:firacode&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:monospace&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Monospaced_font&quot;&gt;Monospaced font&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:monospace&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:hasklig&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/i-tu/Hasklig&quot;&gt;Hasklig - a code font with monospaced ligatures&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:hasklig&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:pragmatapro&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.fsd.it/shop/fonts/pragmatapro/&quot;&gt;PragmataPro™ is a condensed monospaced font optimized for screen, designed to be the ideal font for coding, math and engineering&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:pragmatapro&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:atom&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://atom.io/&quot;&gt;Atom: A hackable text editor for the 21st Century&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:atom&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:intellij&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://confluence.jetbrains.com/display/IDEADEV/Support+for+Ligatures+in+Editor&quot;&gt;IntelliJ IDEA: Support for Ligatures in Editor&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:intellij&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:decline-and-fall-of-the-ligature&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://ilovetypography.com/2007/09/09/decline-and-fall-of-the-ligature/&quot;&gt;Decline And Fall Of The Ligature&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:decline-and-fall-of-the-ligature&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
          <pubDate>2017-03-07T00:00:00+00:00</pubDate>
          <link>/2017/03/07/using-font-ligatures-in-daily-coding.html</link>
          <guid isPermaLink="true">/2017/03/07/using-font-ligatures-in-daily-coding.html</guid>
        </item>
      
    
      
        <item>
          <title>An Introduction To Material Design And Relative Atom Themes</title>
          <description>&lt;p&gt;Material Design is a design guideline developed by Google, and in Atom there are relative themes using the guideline. In this article, I’d like to give you a brief introduction on the guideline and the relative Atom themes.&lt;/p&gt;

&lt;p&gt;Firstly, here is an explanation of &lt;em&gt;Material Design&lt;/em&gt; from &lt;em&gt;Wikipedia&lt;/em&gt;&lt;sup id=&quot;fnref:wiki&quot;&gt;&lt;a href=&quot;#fn:wiki&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Material Design (codenamed Quantum Paper) is a design language developed in 2014 by Google. Expanding upon the “card” motifs that debuted in Google Now, Material Design makes more liberal use of grid-based layouts, responsive animations and transitions, padding, and depth effects such as lighting and shadows.&lt;/p&gt;

  &lt;p&gt;Designer Matías Duarte explained that, “unlike real paper, our digital material can expand and reform intelligently. Material has physical surfaces and edges. Seams and shadows provide meaning about what you can touch.” Google states that their new design language is based on paper and ink.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is a diagram copied from &lt;em&gt;Wikipedia&lt;/em&gt; that shows some typical &lt;em&gt;Material Design UI components&lt;/em&gt;&lt;sup id=&quot;fnref:ui&quot;&gt;&lt;a href=&quot;#fn:ui&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Material_Design.png&quot; alt=&quot;Material Design&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Atom&lt;/em&gt;&lt;sup id=&quot;fnref:atom&quot;&gt;&lt;a href=&quot;#fn:atom&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;, there are relative themes and highlight syntaxs that conforms to the &lt;em&gt;Material Design Guideline&lt;/em&gt;. Here is the screenshot about the themes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-07-atom-theme.png&quot; alt=&quot;2017-03-07-atom-theme.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As the screenshot shown above, I have installed &lt;code class=&quot;highlighter-rouge&quot;&gt;atom-material-syntax&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;atom-material-ui&lt;/code&gt; and enabled them in &lt;code class=&quot;highlighter-rouge&quot;&gt;UI Theme&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Syntax Theme&lt;/code&gt; settings. Here is a screenshot of the &lt;em&gt;Atom&lt;/em&gt; appearance after the above two themes are applied:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-07-atom-appearance.png&quot; alt=&quot;2017-03-07-atom-appearance.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Please note there are some dynamic behaviors that cannot be shown from above screenshot. In addition, I’d like to recommend you to install a font that supports ligatures. I have also written an article to explain the concept of &lt;em&gt;Typographic Ligature&lt;/em&gt;&lt;sup id=&quot;fnref:ligatures&quot;&gt;&lt;a href=&quot;#fn:ligatures&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;&lt;em&gt;References&lt;/em&gt;&lt;/h3&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:wiki&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Material_Design&quot;&gt;https://en.wikipedia.org/wiki/Material_Design&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:wiki&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:ui&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Material_Design#/media/File:Material_Design.svg&quot;&gt;Some typical Material Design UI components&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:ui&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:atom&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://atom.io/&quot;&gt;Atom: A hackable text editor for the 21st Century&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:atom&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:ligatures&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://weinan.io/2017/03/07/using-font-ligatures-in-daily-coding.html&quot;&gt;Usage Of Typographic Ligature In Coding&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:ligatures&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
          <pubDate>2017-03-07T00:00:00+00:00</pubDate>
          <link>/2017/03/07/material-design.html</link>
          <guid isPermaLink="true">/2017/03/07/material-design.html</guid>
        </item>
      
    
      
        <item>
          <title>Using Papers And Manuscripts To Add Academic Citations into GitHub Pages</title>
          <description>&lt;p&gt;In this article I’d like to share with you how to use Papers 3 and Manuscripts under MacOS to add academic citations into your GitHub Pages.&lt;/p&gt;

&lt;p&gt;Unfortunately, &lt;em&gt;GitHub Pages&lt;/em&gt; does not support &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-scholar&lt;/code&gt; plugin by default&lt;sup id=&quot;fnref:versions&quot;&gt;&lt;a href=&quot;#fn:versions&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, which means you can not use the graceful &lt;em&gt;BibTex&lt;/em&gt; support provided by the plugin. This is painful, but this is the reality.&lt;/p&gt;

&lt;p&gt;Nevertheless, there are several ways we can overcome it to some extent. For example, we can fully discard the built-in support of &lt;em&gt;Jekyll&lt;/em&gt; provided by &lt;em&gt;GitHub&lt;/em&gt; and generate our whole blog site locally and push it online. In this way, we can take full control of our own website, but this is even more painful, because &lt;em&gt;GitHub&lt;/em&gt; has eased our maintenance work a lot by generating &lt;em&gt;HTML&lt;/em&gt; files on-the-fly from our &lt;em&gt;Markdown&lt;/em&gt; files with its built-in &lt;em&gt;Jekyll&lt;/em&gt; engine. I don’t want to discard the &lt;em&gt;GitHub&lt;/em&gt; built-in support for &lt;em&gt;Jekyll&lt;/em&gt; just for academic citation support.&lt;/p&gt;

&lt;p&gt;The next solution is to convert the &lt;em&gt;BibTex&lt;/em&gt; file into &lt;em&gt;Markdown&lt;/em&gt; format locally, and then we can add the converted &lt;em&gt;Markdown&lt;/em&gt; text into our posts. There is a tool that can do it actually&lt;sup id=&quot;fnref:bibtextomd&quot;&gt;&lt;a href=&quot;#fn:bibtextomd&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;The third solution is to use &lt;em&gt;javascript&lt;/em&gt; library that can convert &lt;em&gt;BibTex&lt;/em&gt; formatted text into &lt;em&gt;HTML&lt;/em&gt; format on-the-fly. There is a library that can do this&lt;sup id=&quot;fnref:bipub&quot;&gt;&lt;a href=&quot;#fn:bipub&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;However, I want a solution that can fully control the output I need and cite it manually in my article. There are a lot of free tools that can help us to convert &lt;code class=&quot;highlighter-rouge&quot;&gt;.bib&lt;/code&gt; file to formal citation styles, but I’d like to use some professional tools that can ensure the correctness of the output and can support multiple citation styles like &lt;em&gt;APA&lt;/em&gt;, &lt;em&gt;MLA&lt;/em&gt;, &lt;em&gt;Chicago&lt;/em&gt;, etc&lt;sup id=&quot;fnref:citestyle&quot;&gt;&lt;a href=&quot;#fn:citestyle&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;To achieve this goal, we can use several professional academic reference managers such as &lt;em&gt;Mendeley&lt;/em&gt; or &lt;em&gt;Papers&lt;/em&gt;. My favorite tool on &lt;em&gt;MacOS&lt;/em&gt; is &lt;em&gt;Papers 3&lt;/em&gt;. It can export paper reference as &lt;em&gt;BibTex&lt;/em&gt; library file like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/bibtexexport.png&quot; alt=&quot;bibtexexport&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I can fully control the exported citation style in &lt;em&gt;Papars 3&lt;/em&gt; with its help. After the export is done, we get the &lt;code class=&quot;highlighter-rouge&quot;&gt;.bib&lt;/code&gt; file like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;exported.bib
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can use free tools provided by &lt;em&gt;LaTex&lt;/em&gt; family to convert the above &lt;code class=&quot;highlighter-rouge&quot;&gt;.bib&lt;/code&gt; file to &lt;em&gt;PDF&lt;/em&gt; format, and then copy the generated citation text from the &lt;em&gt;PDF&lt;/em&gt; file into our post page. For myself, I have a paper writing software called &lt;em&gt;Manuscripts&lt;/em&gt; that can do this. &lt;em&gt;Manuscripts&lt;/em&gt; has a feature to import &lt;code class=&quot;highlighter-rouge&quot;&gt;.bib&lt;/code&gt; file and generate the bibliography for us:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/importbib.png&quot; alt=&quot;importbib&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The generated bibliography conforms to formal formats:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/bib.png&quot; alt=&quot;bib&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can copy the citation text into our post. Here is the example how I can use it in this post:&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(E &amp;amp; Huang 2001)&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;^Huang2001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;^Huang2001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;E,&lt;/span&gt; W. &amp;amp; Huang, Z., 2001. Matching Conditions in Atomistic-Continuum Modeling of Materials. _arXiv.org_, (13), p.135501. Available at: &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;http://arxiv.org/abs/cond-mat/0106615v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;http://arxiv.org/abs/cond-mat/0106615v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here’s the output demo:&lt;/p&gt;

&lt;p&gt;(E &amp;amp; Huang 2001)&lt;sup id=&quot;fnref:Huang2001&quot;&gt;&lt;a href=&quot;#fn:Huang2001&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;In this way, we have added academic citations into this post manually.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;&lt;em&gt;References&lt;/em&gt;&lt;/h3&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:versions&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://pages.github.com/versions/&quot;&gt;GitHub Pages Dependency versions&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:versions&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:bibtextomd&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/bryanwweber/bibtextomd&quot;&gt;Convert BibTeX entries to formatted Markdown for use with the kramdown processor&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:bibtextomd&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:bipub&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/vkaravir/bib-publication-list&quot;&gt;bib-publication-list to automatically generate an interactive HTML publication list from a BibTeX file&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:bipub&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:citestyle&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://pitt.libguides.com/citationhelp&quot;&gt;Citation Styles: APA, MLA, Chicago, Turabian, IEEE: Home&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:citestyle&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:Huang2001&quot;&gt;
      &lt;p&gt;E, W. &amp;amp; Huang, Z., 2001. Matching Conditions in Atomistic-Continuum Modeling of Materials. &lt;em&gt;arXiv.org&lt;/em&gt;, (13), p.135501. Available at: &lt;a href=&quot;http://arxiv.org/abs/cond-mat/0106615v1&quot;&gt;http://arxiv.org/abs/cond-mat/0106615v1&lt;/a&gt;.&amp;nbsp;&lt;a href=&quot;#fnref:Huang2001&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
          <pubDate>2017-03-06T00:00:00+00:00</pubDate>
          <link>/2017/03/06/using-papers-and-manuscripts-to-do-correct-citation.html</link>
          <guid isPermaLink="true">/2017/03/06/using-papers-and-manuscripts-to-do-correct-citation.html</guid>
        </item>
      
    
      
        <item>
          <title>Using Google Scholar for Citations</title>
          <description>&lt;p&gt;In this article I’d like to show you how to use Google Scholar to search for papers and books and get their citations, and I will also show you how to export BibTeX formatted text from Google Scholar and save it locally for future references.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Google Scholar&lt;/em&gt;&lt;sup id=&quot;fnref:scholar&quot;&gt;&lt;a href=&quot;#fn:scholar&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; is a very convenient tool to search for publications and citations of these publications. Here is an example to search the book &lt;em&gt;Grokking Algorithms&lt;/em&gt;&lt;sup id=&quot;fnref:grokking&quot;&gt;&lt;a href=&quot;#fn:grokking&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/grokking.png&quot; alt=&quot;grokking&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As the screenshot shown above, you can see there is a &lt;code class=&quot;highlighter-rouge&quot;&gt;cite&lt;/code&gt; link under the searched book entry. If you click the &lt;code class=&quot;highlighter-rouge&quot;&gt;cite&lt;/code&gt; link, it will popup a dialog window that show you several different citation styles of text you can use for reference:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-06-cite.png&quot; alt=&quot;2017-03-06-cite.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can choose from one of the styles and copy the text directly into your paper or post. From the above screenshot, you can see there are several different formats we can use to export the citation text, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;BibTeX&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;EndNote&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;RefMan&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;RefWorks&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can choose one of your favorite formats and save the citation locally. For myself, I prefer to save the citation as &lt;code class=&quot;highlighter-rouge&quot;&gt;BibTeX&lt;/code&gt; format, so I clicked the &lt;code class=&quot;highlighter-rouge&quot;&gt;BibTeX&lt;/code&gt; link, and then I can get the exported &lt;code class=&quot;highlighter-rouge&quot;&gt;BibTeX&lt;/code&gt; formatted text like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-06-bibtex.png&quot; alt=&quot;2017-03-06-bibtex.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now I can copy the formatted text and paste it into my local &lt;code class=&quot;highlighter-rouge&quot;&gt;.bib&lt;/code&gt; file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-06-bibfile.png&quot; alt=&quot;2017-03-06-bibfile.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In my local computer, I can use the tools that can support &lt;code class=&quot;highlighter-rouge&quot;&gt;.bib&lt;/code&gt; file to manage it for future usage. For example, I can use the popular open-sourced tool, &lt;em&gt;BibDesk&lt;/em&gt;&lt;sup id=&quot;fnref:bibdesk&quot;&gt;&lt;a href=&quot;#fn:bibdesk&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;, to view and manage the citations:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-06-bibdesk.png&quot; alt=&quot;2017-03-06-bibdesk.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By maintaining the local &lt;code class=&quot;highlighter-rouge&quot;&gt;.bib&lt;/code&gt; file properly, I can use these citations for future usages.&lt;/p&gt;

&lt;p&gt;As you can see in this article, with the help of &lt;em&gt;Google Scholar&lt;/em&gt; and &lt;em&gt;BibDesk&lt;/em&gt;, I didn’t use any commercial softwares to fetch and manage these citations.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;&lt;em&gt;References&lt;/em&gt;&lt;/h3&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:scholar&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://scholar.google.com/&quot;&gt;https://scholar.google.com/&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:scholar&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:grokking&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://scholar.google.com/scholar?hl=en&amp;amp;q=grokking+algorithms&amp;amp;btnG=&amp;amp;as_sdt=1%2C34&amp;amp;as_sdtp=&quot;&gt;Bhargava, A. (2016). Grokking algorithms.&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:grokking&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:bibdesk&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://bibdesk.sourceforge.net/&quot;&gt;BibDesk&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:bibdesk&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
          <pubDate>2017-03-06T00:00:00+00:00</pubDate>
          <link>/2017/03/06/using-google-scholar-for-citation.html</link>
          <guid isPermaLink="true">/2017/03/06/using-google-scholar-for-citation.html</guid>
        </item>
      
    
      
        <item>
          <title>An Introduction to Visual Paradigm</title>
          <description>&lt;p&gt;There are many UML modeling tools on the market. In this article, I’d like to introduce the one I used in my daily work called Visual Paradigm.&lt;/p&gt;

&lt;p&gt;I have used many UML and modeling tools in my career, some are open-sourced and some are commercial softwares. There are many options in this field you can choose from, such as &lt;em&gt;ArgoUML&lt;/em&gt;&lt;sup id=&quot;fnref:argo&quot;&gt;&lt;a href=&quot;#fn:argo&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, &lt;em&gt;StarUML&lt;/em&gt;&lt;sup id=&quot;fnref:star&quot;&gt;&lt;a href=&quot;#fn:star&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, &lt;em&gt;OmniGraffle&lt;/em&gt;&lt;sup id=&quot;fnref:omni&quot;&gt;&lt;a href=&quot;#fn:omni&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;, or etc. You can check the links of these tools I’ve provided to you to see if they can fit your requirements.&lt;/p&gt;

&lt;p&gt;The tool I used in my daily work is called  &lt;em&gt;Visual Paradigm&lt;/em&gt;&lt;sup id=&quot;fnref:vpuml&quot;&gt;&lt;a href=&quot;#fn:vpuml&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;, and it is abbreviated as &lt;em&gt;VP&lt;/em&gt;. Here is a brief introduction of this tool&lt;sup id=&quot;fnref:vpintro&quot;&gt;&lt;a href=&quot;#fn:vpintro&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This software is a UML CASE Tool supporting UML 2, SysML and Business Process Modeling Notation (BPMN)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are many features provided by &lt;em&gt;VP&lt;/em&gt;, not limited to &lt;em&gt;UML&lt;/em&gt; diagrams:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-06-vp-features.png&quot; alt=&quot;VP Features&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As the screenshot shown above, you can see there are a lot of features provided by the tool. I use this tool mainly for its reversing engineering capabilities to generate &lt;em&gt;UML Class Diagram&lt;/em&gt; and &lt;em&gt;Sequence Diagram&lt;/em&gt; from &lt;em&gt;Java&lt;/em&gt; or &lt;em&gt;C++&lt;/em&gt; codes. As you can see in the following diagram, &lt;em&gt;VP&lt;/em&gt; can generate &lt;em&gt;UML 2 Class Diagram&lt;/em&gt; directly from &lt;em&gt;Java Class File&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-06-vp-reverse-class.png&quot; alt=&quot;VP Reverse Class&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The generated class diagram is like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-06-vp-generated-class.png&quot; alt=&quot;VP Generated Class&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And I can also generate class diagram for multiple classes to analyze their relationships:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-06-vp-generated-multiple-classes.png&quot; alt=&quot;VP Generated Classes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;VP&lt;/em&gt; can also generate &lt;em&gt;UML Sequence Diagram&lt;/em&gt; directly from class methods:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-06-vp-reverse-sequence.png&quot; alt=&quot;VP Reverse Sequence&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the generated sequence diagram that can be helpful to analyze the program logic:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-06-vp-generated-sequence.png&quot; alt=&quot;VP Generated Reverse Sequence&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In addition, the diagram can be exported as different formats for future usages:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-06-vp-export.png&quot; alt=&quot;VP Export&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Till now, I have shown you the basic usages of &lt;em&gt;Visual Paradigm&lt;/em&gt; from a programmer’s perspecitve. For project managers and designers, I believe they can dig out more values from the tool.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;&lt;em&gt;References&lt;/em&gt;&lt;/h3&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:argo&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://argouml.tigris.org/&quot;&gt;ArgoUML&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:argo&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:star&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://staruml.io/&quot;&gt;StarUML 2&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:star&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:omni&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.omnigroup.com/omnigraffle&quot;&gt;OmniGraffle 7 for Mac&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:omni&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:vpuml&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.visual-paradigm.com&quot;&gt;Visual Paradigm&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:vpuml&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:vpintro&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Visual_Paradigm_for_UML&quot;&gt;https://en.wikipedia.org/wiki/Visual_Paradigm_for_UML&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:vpintro&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
          <pubDate>2017-03-06T00:00:00+00:00</pubDate>
          <link>/2017/03/06/an-introduction-to-visual-paradigm.html</link>
          <guid isPermaLink="true">/2017/03/06/an-introduction-to-visual-paradigm.html</guid>
        </item>
      
    
      
        <item>
          <title>Write An Apache HTTPD Module</title>
          <description>&lt;p&gt;In this article I’d like to show you how to write a module for Apache HTTPD.&lt;/p&gt;

&lt;p&gt;I’m using &lt;em&gt;Fedora Linux&lt;/em&gt;, So I can use the &lt;em&gt;httpd&lt;/em&gt; and &lt;em&gt;httpd-devel&lt;/em&gt; provided by system:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/httpd_module_01.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The reason to install &lt;em&gt;httpd-devel&lt;/em&gt; is that we need the header files relative to module development provided by it&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. Now let’s write a simple module:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// foo_module.c
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &quot;apr_hash.h&quot;
#include &quot;ap_config.h&quot;
#include &quot;ap_provider.h&quot;
#include &quot;httpd.h&quot;
#include &quot;http_core.h&quot;
#include &quot;http_config.h&quot;
#include &quot;http_log.h&quot;
#include &quot;http_protocol.h&quot;
#include &quot;http_request.h&quot;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request_rec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foo_handler&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DECLINED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;ap_set_content_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;text/html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ap_rprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello, martian!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo_hooks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apr_pool_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ap_hook_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APR_HOOK_MIDDLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AP_MODULE_DECLARE_DATA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo_module&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;STANDARD20_MODULE_STUFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;foo_hooks&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This module will use &lt;code class=&quot;highlighter-rouge&quot;&gt;AP_MODULE_DECLARE_DATA&lt;/code&gt; to register a &lt;code class=&quot;highlighter-rouge&quot;&gt;foo_module&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AP_MODULE_DECLARE_DATA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo_module&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And it will use &lt;code class=&quot;highlighter-rouge&quot;&gt;foo_hooks&lt;/code&gt; to call &lt;code class=&quot;highlighter-rouge&quot;&gt;ap_hook_handler&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;ap_hook_handler&lt;/code&gt; will load our &lt;code class=&quot;highlighter-rouge&quot;&gt;foo_handler&lt;/code&gt; into &lt;em&gt;httpd&lt;/em&gt;：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo_hooks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apr_pool_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ap_hook_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APR_HOOK_MIDDLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Our main function &lt;code class=&quot;highlighter-rouge&quot;&gt;foo_handler&lt;/code&gt; is very simple. You can see it doesn’t deal with &lt;code class=&quot;highlighter-rouge&quot;&gt;request_rec&lt;/code&gt;. It will just output some HTML data：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ap_set_content_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;text/html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ap_rprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello, martian!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As we have understood the meaning of this simple module, now we can compile it. &lt;em&gt;Apache HTTPD&lt;/em&gt; has provided a module compiling and installing tool for us called &lt;code class=&quot;highlighter-rouge&quot;&gt;apxs&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/httpd_module_02.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can use it to compile our &lt;code class=&quot;highlighter-rouge&quot;&gt;foo_module&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/httpd_module_03.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As the snapshot shown above，we have used &lt;code class=&quot;highlighter-rouge&quot;&gt;apxs&lt;/code&gt; to compile &lt;em&gt;foo_module.c&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ apxs -a -c foo_module.c
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The output of compling process is like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/usr/lib64/apr-1/build/libtool --silent --mode=compile gcc -prefer-pic -O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic  -DLINUX -D_REENTRANT -D_GNU_SOURCE -pthread -I/usr/include/httpd  -I/usr/include/apr-1   -I/usr/include/apr-1   -c -o foo_module.lo foo_module.c &amp;amp;&amp;amp; touch foo_module.slo
/usr/lib64/apr-1/build/libtool --silent --mode=link gcc -Wl,-z,relro,-z,now   -o foo_module.la  -rpath /usr/lib64/httpd/modules -module -avoid-version    foo_module.lo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As the output shown above, we can see &lt;code class=&quot;highlighter-rouge&quot;&gt;apxs&lt;/code&gt; used &lt;em&gt;libtool&lt;/em&gt; to compile our module, and generated many files:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ls
foo_module.c  foo_module.la  foo_module.lo  foo_module.o  foo_module.slo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There are also generated files in &lt;em&gt;.libs&lt;/em&gt; directory：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ls -l ./.libs/
total 104
-rw-rw-r--. 1 weli weli 35580 Jan 27 02:55 foo_module.a
lrwxrwxrwx. 1 weli weli    16 Jan 27 02:55 foo_module.la -&amp;gt; ../foo_module.la
-rw-rw-r--. 1 weli weli   938 Jan 27 02:55 foo_module.lai
-rw-rw-r--. 1 weli weli 35432 Jan 27 02:55 foo_module.o
-rwxrwxr-x. 1 weli weli 25560 Jan 27 02:55 foo_module.so
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Most of the files on above are intermediate libraries genereated during compile process, what we care is the shared library, which is &lt;em&gt;.so&lt;/em&gt; file. This is the module file that can be loaded by Apache HTTPD.&lt;/p&gt;

&lt;p&gt;Nevertheless, we don’t have to install the module manually, we can also use the &lt;code class=&quot;highlighter-rouge&quot;&gt;apxs&lt;/code&gt; utility to install it to default &lt;em&gt;httpd&lt;/em&gt; installation location. Here is the command to install the module:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apxs -i foo_module.la
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Please note we have used &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt; to invoke &lt;code class=&quot;highlighter-rouge&quot;&gt;apxs&lt;/code&gt;, because the module will be installed to system provided &lt;em&gt;httpd&lt;/em&gt;, and its directories need root permission to modify. In addition, the &lt;code class=&quot;highlighter-rouge&quot;&gt;foo_module.la&lt;/code&gt; is a &lt;em&gt;libtool&lt;/em&gt; description file that describes the libraries it generated, and it is a pure text file if you’d like to check. Here is the output of above command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/usr/lib64/httpd/build/instdso.sh SH_LIBTOOL='/usr/lib64/apr-1/build/libtool' foo_module.la /usr/lib64/httpd/modules
/usr/lib64/apr-1/build/libtool --mode=install install foo_module.la /usr/lib64/httpd/modules/
libtool: install: install .libs/foo_module.so /usr/lib64/httpd/modules/foo_module.so
libtool: install: install .libs/foo_module.lai /usr/lib64/httpd/modules/foo_module.la
libtool: install: install .libs/foo_module.a /usr/lib64/httpd/modules/foo_module.a
libtool: install: chmod 644 /usr/lib64/httpd/modules/foo_module.a
libtool: install: ranlib /usr/lib64/httpd/modules/foo_module.a
libtool: finish: PATH=&quot;/sbin:/bin:/usr/sbin:/usr/bin:/sbin&quot; ldconfig -n /usr/lib64/httpd/modules
----------------------------------------------------------------------
Libraries have been installed in:
   /usr/lib64/httpd/modules

If you ever happen to want to link against installed libraries
in a given directory, LIBDIR, you must either use libtool, and
specify the full pathname of the library, or use the '-LLIBDIR'
flag during linking and do at least one of the following:
   - add LIBDIR to the 'LD_LIBRARY_PATH' environment variable
     during execution
   - add LIBDIR to the 'LD_RUN_PATH' environment variable
     during linking
   - use the '-Wl,-rpath -Wl,LIBDIR' linker flag
   - have your system administrator add LIBDIR to '/etc/ld.so.conf'

See any operating system documentation about shared libraries for
more information, such as the ld(1) and ld.so(8) manual pages.
----------------------------------------------------------------------
chmod 755 /usr/lib64/httpd/modules/foo_module.so
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The important line is at the bottom of above log, from which we can see &lt;em&gt;foo_module.so&lt;/em&gt; is installed to the default installation location of Fedora Linux provided &lt;em&gt;httpd&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The above &lt;code class=&quot;highlighter-rouge&quot;&gt;apxs&lt;/code&gt; command will just install the &lt;em&gt;.so&lt;/em&gt; file into httpd module directory, but it won’t load it in &lt;em&gt;httpd&lt;/em&gt; config file for you. If you’d like to activate your module by adding it into &lt;em&gt;httpd&lt;/em&gt; config file, you can use the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apxs -ia foo_module.la
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And this time there is an additional line in the output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chmod 755 /usr/lib64/httpd/modules/foo_module.so
[activating module 'foo' in /etc/httpd/conf/httpd.conf]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As the log shown above, we can see &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; module is added into &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/httpd/conf/httpd.conf&lt;/code&gt;, and we can check it:&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ &lt;span class=&quot;n&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; /&lt;span class=&quot;n&quot;&gt;etc&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;httpd&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;httpd&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# LoadModule foo_module modules/mod_foo.so
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoadModule&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo_module&lt;/span&gt;         /&lt;span class=&quot;n&quot;&gt;usr&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;lib64&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;httpd&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;modules&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;foo_module&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we should configure the module in httpd. From the source code of the module we saw:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request_rec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foo_handler&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DECLINED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ap_set_content_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;text/html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ap_rprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello, martian!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So if the handler name is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;foo_handler&lt;/code&gt;, it will accept the request and return a simple text to the client. We can add following lines into &lt;code class=&quot;highlighter-rouge&quot;&gt;httpd.conf&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;Location /foo&amp;gt;
SetHandler foo_handler
&amp;lt;/Location&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;With the above configuraton, we set the &lt;code class=&quot;highlighter-rouge&quot;&gt;foo_handler&lt;/code&gt; to serve the location &lt;code class=&quot;highlighter-rouge&quot;&gt;/foo&lt;/code&gt;, and our module will be used to deal with this location. Now we can start the httpd server:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo service httpd start
Redirecting to /bin/systemctl start  httpd.service
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If the service started correctly, we can see from the log like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ systemctl status httpd.service
● httpd.service - The Apache HTTP Server
   Loaded: loaded (/usr/lib/systemd/system/httpd.service; disabled; vendor preset: disabled)
   Active: active (running) since Thu 2017-04-13 18:04:46 CST; 20s ago
 Main PID: 16184 (httpd)
   Status: &quot;Total requests: 0; Idle/Busy workers 100/0;Requests/sec: 0; Bytes served/sec:   0 B/sec&quot;
    Tasks: 32 (limit: 512)
   Memory: 3.9M
      CPU: 133ms
   CGroup: /system.slice/httpd.service
           ├─16184 /usr/sbin/httpd -DFOREGROUND
           ├─16211 /usr/sbin/httpd -DFOREGROUND
           ├─16212 /usr/sbin/httpd -DFOREGROUND
           ├─16213 /usr/sbin/httpd -DFOREGROUND
           ├─16214 /usr/sbin/httpd -DFOREGROUND
           └─16215 /usr/sbin/httpd -DFOREGROUND

Apr 13 18:04:37 fedora.shared systemd[1]: Starting The Apache HTTP Server...
Apr 13 18:04:46 fedora.shared systemd[1]: Started The Apache HTTP Server.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we can access the location &lt;code class=&quot;highlighter-rouge&quot;&gt;/foo&lt;/code&gt; to see if our module works properly:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$  curl http://localhost/foo
Hello, martian!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As the command output shown above, our module works as expected.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;&lt;em&gt;References&lt;/em&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Kew, Nick. The Apache modules book: application development with Apache. Prentice Hall Professional, 2007.&amp;nbsp;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
          <pubDate>2017-03-05T00:00:00+00:00</pubDate>
          <link>/2017/03/05/write-an-apache-module.html</link>
          <guid isPermaLink="true">/2017/03/05/write-an-apache-module.html</guid>
        </item>
      
    
      
        <item>
          <title>A Test to Github Math Engine</title>
          <description>&lt;p&gt;This article is for testing the MathJax support in posts.&lt;/p&gt;

&lt;script type=&quot;text/x-mathjax-config&quot;&gt;
  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot; async=&quot;&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_CHTML&quot;&gt;
&lt;/script&gt;

&lt;p&gt;When $a \ne 0$, there are two solutions to $(ax^2 + bx + c = 0)$ and they are
&lt;script type=&quot;math/tex&quot;&gt;x = {-b \pm \sqrt{b^2-4ac} \over 2a}.&lt;/script&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sum_{i=0}^n i^2 = \frac{(n^2+n)(2n+1)}{6}&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
&amp;\begin{bmatrix}
1&amp;2&amp;1\\2&amp;4&amp;2\\1&amp;2&amp;1
\end{bmatrix}
\begin{bmatrix}
x_1\\x_2\\x_3
\end{bmatrix}\\
&amp;=(x_1+2x_2+x_3)\begin{bmatrix}
1\\2\\1\end{bmatrix}.\nonumber
\end{align} %]]&gt;&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{equation}
\Delta_A(\lambda)=\sum_{k=0}^n (-1)^{n-k}\lambda^k \sigma_{n-k}(A)=
\sum_{k=0}^n (-1)^{k}\lambda^{n-k }\sigma_{k}(A). \label{eq:characteristic}
\end{equation}&lt;/script&gt;
</description>
          <pubDate>2017-03-05T00:00:00+00:00</pubDate>
          <link>/2017/03/05/a-test-to-github-page-math-engine.html</link>
          <guid isPermaLink="true">/2017/03/05/a-test-to-github-page-math-engine.html</guid>
        </item>
      
    
      
        <item>
          <title>RESTEasy Implementation of JAX-RS SPEC 2.0 Section 3.7</title>
          <description>&lt;p&gt;In this article I’d like to share with you my study on JAX-RS SPEC 2.0 Section 3.7 and relative implementations in RESTEasy.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;JAX-RS SPEC 2.0&lt;/em&gt;&lt;sup id=&quot;fnref:spec&quot;&gt;&lt;a href=&quot;#fn:spec&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; shows us how to match a URI path to actual Java method in &lt;em&gt;Section 3.7&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;Identify a set of candidate root resource classes matching the request&lt;/li&gt;
    &lt;li&gt;Obtain a set of candidate resource methods for the request&lt;/li&gt;
    &lt;li&gt;Identify the method that will handle the request&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;To implement the above logic, RESTEasy has provided several classes in package &lt;code class=&quot;highlighter-rouge&quot;&gt;org.jboss.resteasy.registry&lt;/code&gt;, and here are the classes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/spec3.7.png&quot; alt=&quot;RESTEasy classes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above class diagram, we can see some relationships about these classes. Firstly, there are four &lt;code class=&quot;highlighter-rouge&quot;&gt;Node&lt;/code&gt; classes, which are &lt;code class=&quot;highlighter-rouge&quot;&gt;RootClassNode&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassNode&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;RootNode&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;SegmentNode&lt;/code&gt;. Secondly, there one &lt;code class=&quot;highlighter-rouge&quot;&gt;Expression&lt;/code&gt; interface and its two implementations, which are &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassExpression&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;MethodExpression&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;From the class name, we can deduce that the &lt;code class=&quot;highlighter-rouge&quot;&gt;Expression&lt;/code&gt; classes must contain information for matching the URI path. The &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassExpression&lt;/code&gt; class should be used to match classes, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;MethodExpression&lt;/code&gt; should be used to match methods.&lt;/p&gt;

&lt;p&gt;For the &lt;code class=&quot;highlighter-rouge&quot;&gt;Node&lt;/code&gt; classes, we can see &lt;code class=&quot;highlighter-rouge&quot;&gt;RootClassNode&lt;/code&gt; is only connected with &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassNode&lt;/code&gt;, as its &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; attribute. From the name of the class, we can deduce that &lt;code class=&quot;highlighter-rouge&quot;&gt;RootClassNode&lt;/code&gt; is the top data structure in matching process. We can verify this deduction later.&lt;/p&gt;

&lt;p&gt;Next we should check &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassNode&lt;/code&gt;. We can see &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassNode&lt;/code&gt; is connected with &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassExpression&lt;/code&gt; bidirectionally. &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassNode&lt;/code&gt; contains &lt;code class=&quot;highlighter-rouge&quot;&gt;targets&lt;/code&gt; field, which has the type &lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayList&amp;lt;ClassExpression&amp;gt;&lt;/code&gt;. In another direction, &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassExpression&lt;/code&gt; has a &lt;code class=&quot;highlighter-rouge&quot;&gt;parent&lt;/code&gt; field, and the type of the field is &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassNode&lt;/code&gt;. So this is a &lt;em&gt;One-To-Many&lt;/em&gt; relationship: one &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassNode&lt;/code&gt; instance contains many &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassExpression&lt;/code&gt; instances.&lt;/p&gt;

&lt;p&gt;We need to examine &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassExpression&lt;/code&gt; now. &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassExpression&lt;/code&gt; also contains a &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; field, which has a type of &lt;code class=&quot;highlighter-rouge&quot;&gt;RootNode&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;RootNode&lt;/code&gt; contains a &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; field too, which type is &lt;code class=&quot;highlighter-rouge&quot;&gt;SegmentNode&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we can check &lt;code class=&quot;highlighter-rouge&quot;&gt;SegmentNode&lt;/code&gt;. This class has a bidirectional relationship with &lt;code class=&quot;highlighter-rouge&quot;&gt;MethodExpression&lt;/code&gt;, which is simliar to the relationship between &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassNode&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassExpression&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;From the above analyze, we can deduce that &lt;code class=&quot;highlighter-rouge&quot;&gt;RootNode&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;SegmentNode&lt;/code&gt; are two abstract concepts that connects the class matching and method matching processes. The relationship between these classes is like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RootClassNode -&amp;gt; ClassNode &amp;lt;-&amp;gt; ClassExpression -&amp;gt; RootNode -&amp;gt; SegmentNode &amp;lt;-&amp;gt; MethodExpression
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So the whole matching process should start from &lt;code class=&quot;highlighter-rouge&quot;&gt;RootClassNode&lt;/code&gt;. We can verify our deduction by analyzing the real codes in RESTEasy. I have done this work, and I can say that the entry point of the matching process is &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceMethodRegistry.getResourceInvoker&lt;/code&gt; method call. Here is the sequence diagram of the method call:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/org.jboss.resteasy.core.ResourceMethodRegistry.getResourceInvoker.png&quot; alt=&quot;org.jboss.resteasy.core.ResourceMethodRegistry.getResourceInvoker.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The above diagram reflects the following codes in &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceMethodRegistry.getResourceInvoker&lt;/code&gt; method call:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResourceInvoker&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getResourceInvoker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;widerMatching&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rootNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RuntimeException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can see that &lt;code class=&quot;highlighter-rouge&quot;&gt;rootNode : RootNode&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;root : RootClassNode&lt;/code&gt; are used in two different conditions, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;widerMatching&lt;/code&gt; variable controls the above logic.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;widerMatching&lt;/code&gt; variable is defined by &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyDeployment&lt;/code&gt; class. In &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyDeployment&lt;/code&gt; class it contains a variable called &lt;code class=&quot;highlighter-rouge&quot;&gt;widerRequestMatching&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResteasyDeployment&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;widerRequestMatching&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And it is set by user controlled &lt;code class=&quot;highlighter-rouge&quot;&gt;Configuration Switches&lt;/code&gt;&lt;sup id=&quot;fnref:switch&quot;&gt;&lt;a href=&quot;#fn:switch&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-10-switch.png&quot; alt=&quot;2017-03-10-switch.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above screenshot of RESTEasy document, we can see the meaning of ` resteasy.wider.request.matching` switch:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Turns off the JAX-RS spec defined class-level expression filtering and instead tries to match version every method’s full path.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From the above descrption, we can see the switch is to override some &lt;em&gt;SPEC&lt;/em&gt; defined behaviors, and the default value is &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;. In this article I’ll focus on analyzing the &lt;em&gt;SPEC&lt;/em&gt; defined behavior, so I will ignore the logic:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;widerMatching&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rootNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And treat this as the matching logic entry point:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now let’s check the &lt;code class=&quot;highlighter-rouge&quot;&gt;Node&lt;/code&gt; classes. For all the &lt;code class=&quot;highlighter-rouge&quot;&gt;Node&lt;/code&gt; classes, there are &lt;code class=&quot;highlighter-rouge&quot;&gt;match()&lt;/code&gt; method inside. Let’s check these methods one by one. First is the &lt;code class=&quot;highlighter-rouge&quot;&gt;match&lt;/code&gt; method of &lt;code class=&quot;highlighter-rouge&quot;&gt;RootClassNode&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/org.jboss.resteasy.core.registry.RootClassNode.match.png&quot; alt=&quot;org.jboss.resteasy.core.registry.RootClassNode.match.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From above diagram, we can see the call chain like this: &lt;code class=&quot;highlighter-rouge&quot;&gt;RootClassNode.match() -&amp;gt; ClassNode.match() -&amp;gt; RootNode.match()&lt;/code&gt;. Now let’s check the &lt;code class=&quot;highlighter-rouge&quot;&gt;match&lt;/code&gt; method of &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassNode&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/org.jboss.resteasy.core.registry.ClassNode.match.png&quot; alt=&quot;org.jboss.resteasy.core.registry.ClassNode.match.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From above digram, we can see the &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassNode -&amp;gt; RootNode&lt;/code&gt; matching process is complex, and it uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassExpression&lt;/code&gt; in matching process. We’ll check the detail later. Now we should check &lt;code class=&quot;highlighter-rouge&quot;&gt;RootNode.match()&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/org.jboss.resteasy.core.registry.RootNode.match.png&quot; alt=&quot;org.jboss.resteasy.core.registry.RootNode.match.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see &lt;code class=&quot;highlighter-rouge&quot;&gt;RootNode -&amp;gt; SegmentNode&lt;/code&gt; is easy, because &lt;code class=&quot;highlighter-rouge&quot;&gt;RootNode.match()&lt;/code&gt; will just call &lt;code class=&quot;highlighter-rouge&quot;&gt;SegmentNode.match()&lt;/code&gt;. Let’s check the sequence diagram of &lt;code class=&quot;highlighter-rouge&quot;&gt;SegmentNode.match()&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/org.jboss.resteasy.core.registry.SegmentNode.match.png&quot; alt=&quot;org.jboss.resteasy.core.registry.SegmentNode.match.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above diagram, we can see &lt;code class=&quot;highlighter-rouge&quot;&gt;SegmentNode&lt;/code&gt; matching process is simliar to the &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassNode&lt;/code&gt; matching process, however the &lt;code class=&quot;highlighter-rouge&quot;&gt;MethodExpression&lt;/code&gt; class is used instead of the &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassExpression&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In conclusion, the matching processes are mainly in &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassNode&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;SegmentNode&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassNode&lt;/code&gt; deals with class matching process, and &lt;code class=&quot;highlighter-rouge&quot;&gt;SegmentNode&lt;/code&gt; processes the method matching process.&lt;/p&gt;

&lt;p&gt;Now let’s go back to &lt;em&gt;SPEC&lt;/em&gt; document and learn the terminology defined in &lt;em&gt;Section 1.5&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-10-terminology.png&quot; alt=&quot;2017-03-10-terminology.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above definitions, we need to understand the definitions of &lt;code class=&quot;highlighter-rouge&quot;&gt;Resource class&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Root resource class&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Sub-resource locator&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Sub-resource method&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now let’s check &lt;em&gt;Section 3.7.2, Request Matching&lt;/em&gt;. If you read through this section, regardless of the detail algorithms, you should catch some basic requirements: Firstly we need to have some candidate resources classes for the matching processes, secondly we need a relative regular expression to each class. This regular expression is actually the pattern of the resource classes that can be checked against the URL requests.&lt;/p&gt;

&lt;p&gt;Besides the candidate classes, we also need to have candidate methods inside the classes, and we need to store the relative regular expressions of these methods.&lt;/p&gt;

&lt;p&gt;To sum up the above requirements, RESTEasy has provided a &lt;code class=&quot;highlighter-rouge&quot;&gt;Registry&lt;/code&gt; interface and its implementation, the &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceMethodRegistry&lt;/code&gt; class, to support the storage of candidate resource classes.&lt;/p&gt;

&lt;p&gt;In addition, we have seen there is an abstract class &lt;code class=&quot;highlighter-rouge&quot;&gt;Expression&lt;/code&gt; and its two extended classes, &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassExpression&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;MethodExpression&lt;/code&gt; classes to store the relative regular expressions of the resource classes and methods.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Expression&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Registry&lt;/code&gt; implementations provides basic data unit for multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;Node&lt;/code&gt; classes to implement their &lt;code class=&quot;highlighter-rouge&quot;&gt;match()&lt;/code&gt; methods. The finally goal is to get a &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceInvoker&lt;/code&gt;, which contains the matched “class.method” and other useful information.&lt;/p&gt;

&lt;p&gt;Now let’s check the &lt;code class=&quot;highlighter-rouge&quot;&gt;Registry&lt;/code&gt; firstly, and then let’s see &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceInvoker&lt;/code&gt;. Here is the class diagram with &lt;code class=&quot;highlighter-rouge&quot;&gt;Registry&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceMethodRegistry&lt;/code&gt; included:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-10-registry.png&quot; alt=&quot;2017-03-10-registry.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above diagram, we can see &lt;code class=&quot;highlighter-rouge&quot;&gt;Registry&lt;/code&gt; is mainly designed to store different kinds of resource classes. The name of &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceMethodRegistry&lt;/code&gt; is a little bit confusing, be cause we can see in this class are actually stored resource classes.&lt;/p&gt;

&lt;p&gt;We can see &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceMethodRegistry&lt;/code&gt; connects with &lt;code class=&quot;highlighter-rouge&quot;&gt;RootNode&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;RootClassNode&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We know that &lt;code class=&quot;highlighter-rouge&quot;&gt;RootClassNode&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassNode&lt;/code&gt; are for class matching, and &lt;code class=&quot;highlighter-rouge&quot;&gt;RootNode&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;SegmentNode&lt;/code&gt; are for method processing.&lt;/p&gt;

&lt;p&gt;And we also know the class and method matching processes are majoyly in &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassNode.match()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;SegmentNode&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can also see &lt;code class=&quot;highlighter-rouge&quot;&gt;MethodExpression&lt;/code&gt; is connected with &lt;code class=&quot;highlighter-rouge&quot;&gt;SegmentNode&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassExpression&lt;/code&gt; has a &lt;code class=&quot;highlighter-rouge&quot;&gt;parent&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassNode&lt;/code&gt;, and has a &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;RootNode&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now let’s check the &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceInvoker&lt;/code&gt; class:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-10-resource-invoker.png&quot; alt=&quot;2017-03-10-resource-invoker.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see there are two types of &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceInvoker&lt;/code&gt;, one is &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceLocatorInvoker&lt;/code&gt; and the other is &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceMethodInvoker&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceMethodInvoker&lt;/code&gt; is for the method finally will be invoked by the request, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceLocatorInvoker&lt;/code&gt; is used for invoking &lt;code class=&quot;highlighter-rouge&quot;&gt;Sub-resource locator&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There is another important class we haven’t investigated till now, the &lt;code class=&quot;highlighter-rouge&quot;&gt;UriInfo&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyUriInfo&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-11-resteasy-uri-info.png&quot; alt=&quot;2017-03-11-resteasy-uri-info.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see the &lt;code class=&quot;highlighter-rouge&quot;&gt;UriInfo&lt;/code&gt; interface is in &lt;code class=&quot;highlighter-rouge&quot;&gt;javax.ws.rs.core&lt;/code&gt; package, which means this is an interface defined by the SPEC that should be implemented by RESTEasy. The &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyUriInfo&lt;/code&gt; is an implementation of this &lt;code class=&quot;highlighter-rouge&quot;&gt;UriInfo&lt;/code&gt; interface. Here is the javadoc in &lt;code class=&quot;highlighter-rouge&quot;&gt;UriInfo&lt;/code&gt; that describes the purpose of the interface:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An injectable interface that provides access to application and request URI information.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Besides the meaning of encapsulating URI info, it also defines many methods that deals with URI info. Here is the javadoc for &lt;code class=&quot;highlighter-rouge&quot;&gt;UriInfo.getMatchedURIs()&lt;/code&gt; method:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-13-get-matched-uri.png&quot; alt=&quot;2017-03-13-get-matched-uri.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And the &lt;code class=&quot;highlighter-rouge&quot;&gt;getMatchedURIs()&lt;/code&gt; method in the RESTEasy implementation, &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyUriInfo&lt;/code&gt;, should implement the behavior as described in above text.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;UriInfo&lt;/code&gt; interface defines the methods to retrieve the URI info, but it doesn’t define how to build this info. It depends on the implementation side to build it properly. We can check the &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyUriInfo&lt;/code&gt; to see how does RESTEasy build the URI info. Firstly here is the &lt;code class=&quot;highlighter-rouge&quot;&gt;initialize&lt;/code&gt; method used by the constructor of &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyUriInfo&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/org.jboss.resteasy.spi.ResteasyUriInfo.initialize.png&quot; alt=&quot;org.jboss.resteasy.spi.ResteasyUriInfo.initialize.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see &lt;code class=&quot;highlighter-rouge&quot;&gt;UriBuilder&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyUriBuilder&lt;/code&gt; are involved in the initializing process to build the initial variables. Here are part of the codes in the method:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ResteasyUriBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absoluteBuilder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResteasyUriBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UriBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fromUri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;absoluteUri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;absolutePath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absoluteBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;requestURI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absoluteBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;replaceQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queryString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;encodedPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PathHelper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEncodedPathInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;absolutePath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRawPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contextPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;baseURI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absolutePath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UriBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fromPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encodedPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;UriBuilder&lt;/code&gt; is a SPEC interface, and &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyUriBuilder&lt;/code&gt; is its implementation. Here is the class diagram:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-13-uribuilder.png&quot; alt=&quot;2017-03-13-uribuilder.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the javadoc of the &lt;code class=&quot;highlighter-rouge&quot;&gt;UriBuilder&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-13-uribuilder-doc.png&quot; alt=&quot;2017-03-13-uribuilder-doc.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the javadoc of the &lt;code class=&quot;highlighter-rouge&quot;&gt;javax.ws.rs.Path&lt;/code&gt; annotation:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-13-path.png&quot; alt=&quot;2017-03-13-path.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the javadoc of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Path.value()&lt;/code&gt; attribute:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-13-path-value.png&quot; alt=&quot;2017-03-13-path.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Before going back to &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyUriInfo&lt;/code&gt;, we should check another SPEC interface called &lt;code class=&quot;highlighter-rouge&quot;&gt;PathSegment&lt;/code&gt;, and its RESTEasy implementation &lt;code class=&quot;highlighter-rouge&quot;&gt;PathSegmentImpl&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-13-pathsegment.png&quot; alt=&quot;2017-03-13-pathsegment.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the javadoc of &lt;code class=&quot;highlighter-rouge&quot;&gt;PathSegment&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-13-pathsegment-javadoc.png&quot; alt=&quot;2017-03-13-pathsegment-javadoc.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Section 5.3 Client Targets&lt;/em&gt; of the document, it uses the term “path segment” like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-13-pathsegment-spec.png&quot; alt=&quot;2017-03-13-pathsegment-spec.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the sequence diagram of &lt;code class=&quot;highlighter-rouge&quot;&gt;PathSegmentImpl.parseSegmentsOptimization()&lt;/code&gt; method:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/org.jboss.resteasy.specimpl.PathSegmentImpl.parseSegmentsOptimization.png&quot; alt=&quot;org.jboss.resteasy.specimpl.PathSegmentImpl.parseSegmentsOptimization.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This method is used to split full URL path into path segments. The javadoc of the method is here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/org.jboss.resteasy.specimpl.PathSegmentImpl.parseSegmentsOptimization-javadoc.png&quot; alt=&quot;org.jboss.resteasy.specimpl.PathSegmentImpl.parseSegmentsOptimization-javadoc.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The above method is used in &lt;code class=&quot;highlighter-rouge&quot;&gt;ResteasyUriInfo.processPath()&lt;/code&gt; method:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/org.jboss.resteasy.spi.ResteasyUriInfo.processPath.png&quot; alt=&quot;org.jboss.resteasy.spi.ResteasyUriInfo.processPath.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we have built a knowledge base on &lt;code class=&quot;highlighter-rouge&quot;&gt;UriInfo&lt;/code&gt; and its &lt;code class=&quot;highlighter-rouge&quot;&gt;UriBuilder&lt;/code&gt;, now we can come back to review the sequence diagrams of the &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassNode.match()&lt;/code&gt; method and the &lt;code class=&quot;highlighter-rouge&quot;&gt;SegmentNode.match()&lt;/code&gt; method to see how they use the &lt;code class=&quot;highlighter-rouge&quot;&gt;UriInfo&lt;/code&gt;. Here is the sequence diagram of the &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassNode.match()&lt;/code&gt; method we have seen previously:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/org.jboss.resteasy.core.registry.ClassNode.match.png&quot; alt=&quot;org.jboss.resteasy.core.registry.ClassNode.match.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the sequence diagram of the &lt;code class=&quot;highlighter-rouge&quot;&gt;SegmentNode.match()&lt;/code&gt; method:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/org.jboss.resteasy.core.registry.SegmentNode.match.png&quot; alt=&quot;org.jboss.resteasy.core.registry.SegmentNode.match.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the whole picture of RESTEasy implementation related with resource matching process:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-13-whole-picture.png&quot; alt=&quot;2017-03-13-whole-picture.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above class diagram, we can clearly see the design of RESTeasy core part. Firstly, the &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceMethodRegistry&lt;/code&gt; is the center of these &lt;code class=&quot;highlighter-rouge&quot;&gt;Node&lt;/code&gt; classes. The purpose of this part is to implement the matching process described in &lt;em&gt;JAX-RS SPEC 2.0 Section 3.7&lt;/em&gt;. The matching result we finally get is a &lt;code class=&quot;highlighter-rouge&quot;&gt;MethodExpression&lt;/code&gt;, which has a &lt;code class=&quot;highlighter-rouge&quot;&gt;invoker&lt;/code&gt; instance. The &lt;code class=&quot;highlighter-rouge&quot;&gt;Invoker&lt;/code&gt; interface will do the real job to run the Java method, so we can see &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceMethodInvoker&lt;/code&gt; is the center of this part. We should remember the call sequence in &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceMethodRegistry.getResourceInvoker&lt;/code&gt; we have already seen in above:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/org.jboss.resteasy.core.ResourceMethodRegistry.getResourceInvoker.png&quot; alt=&quot;org.jboss.resteasy.core.ResourceMethodRegistry.getResourceInvoker.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In conclusion, we can see the whole picture is divided into two halves: The bottom half has the &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceMethodRegistry&lt;/code&gt; at center with some &lt;code class=&quot;highlighter-rouge&quot;&gt;Node&lt;/code&gt; classes to do the URL path to &lt;code class=&quot;highlighter-rouge&quot;&gt;MethodExpression&lt;/code&gt; matching work. The upper half has the &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceMethodInvoker&lt;/code&gt; at center, to do the real method running job. The name of &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceMethodRegistry&lt;/code&gt; is a little bit confusing, actually it doesn’t merely contain and deal with the method information, but also deal with resource classes. Maybe a more proper name should be &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceClassAndMethodRegistry&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We didn’t check the upper half in much detail in this article, because this article is focused on the bottom half of the above diagram. In future, I’ll write the article that focus on the &lt;code class=&quot;highlighter-rouge&quot;&gt;ResourceMethodInvoker&lt;/code&gt; side to check how does RESTEasy invoke the matched resource methods.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;&lt;em&gt;References&lt;/em&gt;&lt;/h3&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:spec&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://jcp.org/aboutJava/communityprocess/final/jsr339/index.html.&quot;&gt;“JSR-000339 The Javatm API For Restful Web Services”.&lt;/a&gt; 2017. Jcp.Org.&amp;nbsp;&lt;a href=&quot;#fnref:spec&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:switch&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://docs.jboss.org/resteasy/docs/3.1.0.Final/userguide/html/Installation_Configuration.html.&quot;&gt;“RESTFul Web Services for Java - Chapter 3. Installation/Configuration - 3.4. Configuration switches”.&lt;/a&gt; 2017. Docs.Jboss.Org.&amp;nbsp;&lt;a href=&quot;#fnref:switch&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
          <pubDate>2017-03-04T00:00:00+00:00</pubDate>
          <link>/2017/03/04/jaxrs-spec3_7.html</link>
          <guid isPermaLink="true">/2017/03/04/jaxrs-spec3_7.html</guid>
        </item>
      
    
      
        <item>
          <title>Using Java RegExp Engine</title>
          <description>&lt;p&gt;I’m playing Java RegExp Engine recently and I’d like to share some use experiences with you in this article.&lt;/p&gt;

&lt;p&gt;Here is the first example:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(^[A-Za-z]+)( [0-9]+)( [A-Za-z]+)(.*)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foo 42 bar xyz&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Matcher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We have used parentheses to group our pattern into four parts:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(^[A-Za-z]+)( [0-9]+)( [A-Za-z]+)(.*)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;matcher.find()&lt;/code&gt; method will help to match the text using our &lt;code class=&quot;highlighter-rouge&quot;&gt;Pattern&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;groupCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And the &lt;code class=&quot;highlighter-rouge&quot;&gt;matcher.group()&lt;/code&gt; can help us to print the matched group defined in pattern string:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0: foo 42 bar xyz
1: foo
2:  42
3:  bar
4:  xyz
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Please note the &lt;code class=&quot;highlighter-rouge&quot;&gt;group(0)&lt;/code&gt; is the whole text matched by the pattern. The groups are defined by parentheses in pattern. For example, if we change our pattern from:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(^[A-Za-z]+)( [0-9]+)( [A-Za-z]+)(.*)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;to:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(^[A-Za-z]+)( [0-9]+)( [A-Za-z]+).*&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The difference is that this time we don’t quote the last &lt;code class=&quot;highlighter-rouge&quot;&gt;.*&lt;/code&gt; part into parentheses. And let’s rerun the matching process:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;groupCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The result becomes:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0: foo 42 bar xyz
1: foo
2:  42
3:  bar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can see this time &lt;code class=&quot;highlighter-rouge&quot;&gt;xyz&lt;/code&gt; does not show，because the last &lt;code class=&quot;highlighter-rouge&quot;&gt;.*&lt;/code&gt; does not belong to any &lt;code class=&quot;highlighter-rouge&quot;&gt;group&lt;/code&gt;. Now let’s see how to use &lt;code class=&quot;highlighter-rouge&quot;&gt;region&lt;/code&gt; method. Here is the code example:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(.* )(.* )&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foo 42 bar xyz&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Matcher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;matcher.region(1, text.length())&lt;/code&gt; is to set the start index and the end index of the text that the matcher will search for. As you can see, we have set the matcher to search from text index &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; till the end of the text, so the first character(which is index 0) of &lt;code class=&quot;highlighter-rouge&quot;&gt;text&lt;/code&gt; will be ignored. Here’s the search code:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;groupCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And here is the result:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0: oo 42 bar
1: oo 42
2: bar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can see the first character in &lt;code class=&quot;highlighter-rouge&quot;&gt;text&lt;/code&gt;, which is &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; of the &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt;, is bypassed. We can also see from the result that Java RegExp engine is greedy by default, because the group 1 returns &lt;code class=&quot;highlighter-rouge&quot;&gt;oo 42&lt;/code&gt;, which matches maximum text of pattern &lt;code class=&quot;highlighter-rouge&quot;&gt;(.* )&lt;/code&gt;. Now let’s see the difference between &lt;code class=&quot;highlighter-rouge&quot;&gt;matches&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; methods of &lt;code class=&quot;highlighter-rouge&quot;&gt;Matcher&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;matches&lt;/code&gt; method will try to match the pattern with whole text. If the pattern doesn’t match the whole text, the method fails. Otherwise, if there are contents in the text that can match the pattern, the &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; method will match it. Here is the code example:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[a-z][a-z][a-z]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foo 42 bar xyz&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Matcher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I have written a pattern that will match three consecutive alphabets. Now let’s try to use ‘matches()’ method firstly:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The result is &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;. Because the pattern can’t match the whole &lt;code class=&quot;highlighter-rouge&quot;&gt;text&lt;/code&gt;. Now let’s try &lt;code class=&quot;highlighter-rouge&quot;&gt;find()&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The result is &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;, because the pattern can match partial contents in text, which could be &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt;. And each time we call &lt;code class=&quot;highlighter-rouge&quot;&gt;find()&lt;/code&gt;, it will try to search the next partial text that can match the pattern. Let’s see the code example:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[a-z][a-z][a-z]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foo 42 bar xyz&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Matcher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As the example shown above, we will call &lt;code class=&quot;highlighter-rouge&quot;&gt;find()&lt;/code&gt; method until it can’t find anything more. Here’s the result:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;foo
bar
xyz
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As the result shown above, we can see each time the &lt;code class=&quot;highlighter-rouge&quot;&gt;find()&lt;/code&gt; method call match the pattern with partial text. We used &lt;code class=&quot;highlighter-rouge&quot;&gt;group()&lt;/code&gt; method to return the whole matched text. Because our pattern has parentheses, so we can also use &lt;code class=&quot;highlighter-rouge&quot;&gt;group&lt;/code&gt; method to get the substring we want. Here’s the code example:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;([a-z])([a-z])([a-z])&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foo 42 bar xyz&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Matcher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Because our pattern is &lt;code class=&quot;highlighter-rouge&quot;&gt;([a-z])([a-z])([a-z])&lt;/code&gt;，so &lt;code class=&quot;highlighter-rouge&quot;&gt;group(1)&lt;/code&gt; will be the first &lt;code class=&quot;highlighter-rouge&quot;&gt;[a-z]&lt;/code&gt; in matched text. Here’s the result:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;f
b
x
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The result is the first group in the pattern for each found text. Please note both &lt;code class=&quot;highlighter-rouge&quot;&gt;matches&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; will alter the internal state of the matcher. As we can see above, each &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; will search next part of the text. Let’s see this code example:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;([a-z])([a-z])([a-z])&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Matcher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We used &lt;code class=&quot;highlighter-rouge&quot;&gt;matches&lt;/code&gt; method to match &lt;code class=&quot;highlighter-rouge&quot;&gt;text&lt;/code&gt; will the pattern, and it will succeed. So the &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; method won’t match anything at all, because the previous &lt;code class=&quot;highlighter-rouge&quot;&gt;matches&lt;/code&gt; method already processed the text and matches the text successfully. The result of above code will be &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; and nothing else. If we remove the &lt;code class=&quot;highlighter-rouge&quot;&gt;matcher.matches()&lt;/code&gt;, then the result will be &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt;, which is the &lt;code class=&quot;highlighter-rouge&quot;&gt;matcher.group(1)&lt;/code&gt; output.&lt;/p&gt;

&lt;p&gt;Non-capturing group is a concept that supports you to group something in the pattern but don’t count it in the result. Let’s see this code example:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;([a-z])([a-z])([a-z])&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foo bar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Matcher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The pattern is to match three consecutive alphabets, so &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt; will match for each &lt;code class=&quot;highlighter-rouge&quot;&gt;find()&lt;/code&gt;. And group 1 is the first &lt;code class=&quot;highlighter-rouge&quot;&gt;[a-z]&lt;/code&gt;, so it will match the first alphabet of &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt;. The result of above code is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;f
b
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Which is the same like we expected. Now let’s modify the pattern a little bit:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(?:[a-z])([a-z])([a-z])&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Please note we have added &lt;code class=&quot;highlighter-rouge&quot;&gt;?:&lt;/code&gt; into first group, which means this group is a non-capturing group. The matcher will still match it, but this group will not be counted in the result.&lt;/p&gt;

&lt;p&gt;So the &lt;code class=&quot;highlighter-rouge&quot;&gt;matcher.group(1)&lt;/code&gt; this time will become the second &lt;code class=&quot;highlighter-rouge&quot;&gt;[a-z]&lt;/code&gt;. Let’s rerun the codes and here’s the result:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;o
a
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Please note the first group, &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt;, are bypassed. Because the first group has been marked as non-capturing group with &lt;code class=&quot;highlighter-rouge&quot;&gt;?:&lt;/code&gt;.&lt;/p&gt;
</description>
          <pubDate>2017-03-04T00:00:00+00:00</pubDate>
          <link>/2017/03/04/java-regexp.html</link>
          <guid isPermaLink="true">/2017/03/04/java-regexp.html</guid>
        </item>
      
    
      
        <item>
          <title>How To Use Tomcat Vault</title>
          <description>&lt;p&gt;Tomcat Vault is a tool that allows you to encrypt the passwords in Apache Tomcat configuration files. In this article I’d like to show you how to integrate it into Apache Tomcat.&lt;/p&gt;

&lt;p&gt;Here is one line excerpted from &lt;code class=&quot;highlighter-rouge&quot;&gt;tomcat-users.xml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;user&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;username=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tomcat&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;password=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tomcat&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;roles=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tomcat&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As we can see above, the password is stored as plaintext and it’s a security risk. Though the configuration in store on server, it’s still very dangerous to store password in such way.&lt;/p&gt;

&lt;p&gt;Tomcat Vault is created to solve this problem, it will encrypt your password and store it in standard Java keystore, and let tomcat access the password in a safe way. In this article, I’d like to show you how to use it with Tomcat.&lt;/p&gt;

&lt;h3 id=&quot;installation-of-apache-tomcat-and-tomcat-vault&quot;&gt;Installation of Apache Tomcat and Tomcat Vault&lt;/h3&gt;

&lt;p&gt;First we need to have Apache Tomcat&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; and Tomcat-Vault&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; installed on our machine. For Tomcat, I am using 8.0.39 for this article. For Tomcat Vault, I just clone the project from GitHub into my local machine and build it from master branch:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/picketbox/tomcat-vault.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And then using Maven to build and install it:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;
/Users/weli/projs/tomcat-vault
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mvn install
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO] Scanning &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;projects...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO]
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO] ------------------------------------------------------------------------
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO] Building Vault extension &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;Apache Tomcat 1.0.8.Final
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO] ------------------------------------------------------------------------
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO]
...
copy dependency file to the correct module directory:
     &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;copy] Copying 1 file to /Users/weli/projs/tomcat-vault/modules/system/layers/base/tomcat-vault/main
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO] Executed tasks
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO]
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO] --- maven-install-plugin:2.4:install &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default-install&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; @ tomcat-vault ---
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO] Installing /Users/weli/projs/tomcat-vault/target/tomcat-vault-1.0.8.Final.jar to /Users/weli/.m2/repository/org/apache/tomcat/tomcat-vault/1.0.8.Final/tomcat-vault-1.0.8.Final.jar
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO] Installing /Users/weli/projs/tomcat-vault/pom.xml to /Users/weli/.m2/repository/org/apache/tomcat/tomcat-vault/1.0.8.Final/tomcat-vault-1.0.8.Final.pom
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO] Installing /Users/weli/projs/tomcat-vault/target/tomcat-vault-1.0.8.Final-jar-with-dependencies.jar to /Users/weli/.m2/repository/org/apache/tomcat/tomcat-vault/1.0.8.Final/tomcat-vault-1.0.8.Final-jar-with-dependencies.jar
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO] ------------------------------------------------------------------------
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO] BUILD SUCCESS
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO] ------------------------------------------------------------------------
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO] Total &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;: 2.567 s
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO] Finished at: 2016-12-20T16:34:53+08:00
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO] Final Memory: 17M/265M
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO] ------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After building it, we can get the tomcat-vault jars:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ls -1 target/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.jar
target/tomcat-vault-1.0.8.Final-jar-with-dependencies.jar
target/tomcat-vault-1.0.8.Final.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Next we will can try to play with &lt;code class=&quot;highlighter-rouge&quot;&gt;tomcat-vault-1.0.8.Final-jar-with-dependencies.jar&lt;/code&gt; to see if it can work correctly. First we should make sure that we are in the ‘target’ directory which contains the generated jar files:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;
/Users/weli/projs/tomcat-vault/target
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ls &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.jar
tomcat-vault-1.0.8.Final-jar-with-dependencies.jar tomcat-vault-1.0.8.Final.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Because the jar file contains a Main class, so we can invoke it like this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;java -classpath tomcat-vault-1.0.8.Final-jar-with-dependencies.jar org.apache.tomcat.vault.VaultTool
&lt;span class=&quot;k&quot;&gt;**********************************&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;****&lt;/span&gt;  JBoss Vault  &lt;span class=&quot;k&quot;&gt;***************&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;**********************************&lt;/span&gt;
Please enter a Digit::   0: Start Interactive Session  1: Remove Interactive Session  2: Exit
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If everything goes fine, you can directly using the &lt;code class=&quot;highlighter-rouge&quot;&gt;java&lt;/code&gt; command as shown above to start the &lt;code class=&quot;highlighter-rouge&quot;&gt;org.apache.tomcat.vault.VaultTool&lt;/code&gt;. The next step is to put tomcat-vault jar into our local Apache Tomcat directory:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;
/Users/weli/projs/apache-tomcat-8.0.39/lib
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cp ~/projs/tomcat-vault/target/tomcat-vault-1.0.8.Final-jar-with-dependencies.jar .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As the command shown above, we have the tomcat-vault jar with dependecies copied into tomcat lib directory. Till now, the installation step is finished, and next we can start to integrate tomcat-vault with tomcat.&lt;/p&gt;

&lt;h3 id=&quot;generating-java-keystore-for-tomcat-vault&quot;&gt;Generating Java Keystore for Tomcat Vault&lt;/h3&gt;

&lt;p&gt;Tomcat Vault relies on Java Keystore to store the passwords, so the first step is to use &lt;code class=&quot;highlighter-rouge&quot;&gt;keytool&lt;/code&gt; command provided by JDK to generate a keystore. Here is the command to generate keystore:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;keytool -genseckey -keystore vault.keystore -alias my_vault -storetype jceks -keyalg AES -keysize 128 -storepass my_password123 -keypass my_password123 -validity 730
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As the command shown above, we have generated a keystore named &lt;code class=&quot;highlighter-rouge&quot;&gt;vault.keystore&lt;/code&gt;, and set the password of the store to &lt;code class=&quot;highlighter-rouge&quot;&gt;my_password123&lt;/code&gt;. We also generate a key pair with the &lt;code class=&quot;highlighter-rouge&quot;&gt;alias&lt;/code&gt; name &lt;code class=&quot;highlighter-rouge&quot;&gt;my_vault&lt;/code&gt;, and set the password of this generated key pair to &lt;code class=&quot;highlighter-rouge&quot;&gt;my_password123&lt;/code&gt; (You should use different password for key store and key pair in production environment). Please note that I have put the above generated keystore file to &lt;code class=&quot;highlighter-rouge&quot;&gt;conf&lt;/code&gt; directory of Tomcat:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;
/Users/weli/projs/apache-tomcat-8.0.39/conf
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ls vault.keystore
vault.keystore
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In production environment, you should put the keystore into a safer place and set the permission of the file properly. Now we can check this keystore by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;keytool&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;keytool -list -v -keystore vault.keystore -storetype jceks -storepass my_password123

Keystore &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;: JCEKS
Keystore provider: SunJCE

Your keystore contains 1 entry

Alias name: my_vault
Creation date: Dec 20, 2016
Entry &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;: SecretKeyEntry


&lt;span class=&quot;k&quot;&gt;*******************************************&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*******************************************&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As the command output shown above, we can see our keystore contains one &lt;code class=&quot;highlighter-rouge&quot;&gt;SecretKeyEntry&lt;/code&gt; named &lt;code class=&quot;highlighter-rouge&quot;&gt;my_vault&lt;/code&gt;. Till now, we have generated the keystore for tomcat vault to use. The next step is to invoke tomcat vault to initialize the keystore for us.&lt;/p&gt;

&lt;h3 id=&quot;initializing-tomcat-vault&quot;&gt;Initializing Tomcat Vault&lt;/h3&gt;

&lt;p&gt;Now we can invoke tomcat vault to initialize the keystore so it can be used to store tomcat username and password information. First we need to go to the &lt;code class=&quot;highlighter-rouge&quot;&gt;lib&lt;/code&gt; directory of tomcat, because in previous steps we have put tomcat-vault jar into it:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;
/Users/weli/projs/apache-tomcat-8.0.39/lib
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ls tomcat-vault&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
tomcat-vault-1.0.8.Final-jar-with-dependencies.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We need to invoke the above tomcat-vault jar to initialize the keystore we generated in previous step, which is named &lt;code class=&quot;highlighter-rouge&quot;&gt;vault.keystore&lt;/code&gt;. Here is the whole step to use tomcat-vault to initialize the keystore:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;java -classpath tomcat-vault-1.0.8.Final-jar-with-dependencies.jar org.apache.tomcat.vault.VaultTool
&lt;span class=&quot;k&quot;&gt;**********************************&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;****&lt;/span&gt;  JBoss Vault  &lt;span class=&quot;k&quot;&gt;***************&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;**********************************&lt;/span&gt;
Please enter a Digit::   0: Start Interactive Session  1: Remove Interactive Session  2: Exit
0
Starting an interactive session
Enter directory to store encrypted files:/Users/weli/projs/apache-tomcat-8.0.39/conf
Enter Keystore URL:/Users/weli/projs/apache-tomcat-8.0.39/conf/vault.keystore
Enter Keystore password:
Enter Keystore password again:
Values match
Enter 8 character salt:1234abcd
Enter iteration count as a number &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Eg: 44&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:120
Enter Keystore Alias:my_vault
Initializing Vault
Dec 21, 2016 3:43:33 PM org.apache.tomcat.vault.security.vault.PicketBoxSecurityVault init
INFO: PBOX000361: Default Security Vault Implementation Initialized and Ready
Vault Configuration &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;tomcat properties file:
&lt;span class=&quot;k&quot;&gt;********************************************&lt;/span&gt;
...
&lt;span class=&quot;nv&quot;&gt;KEYSTORE_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/Users/weli/projs/apache-tomcat-8.0.39/conf/vault.keystore
&lt;span class=&quot;nv&quot;&gt;KEYSTORE_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;MASK-3CuP21KMHn7G6iH/A3YpM/
&lt;span class=&quot;nv&quot;&gt;KEYSTORE_ALIAS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;my_vault
&lt;span class=&quot;nv&quot;&gt;SALT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1234abcd
&lt;span class=&quot;nv&quot;&gt;ITERATION_COUNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;120
&lt;span class=&quot;nv&quot;&gt;ENC_FILE_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/Users/weli/projs/apache-tomcat-8.0.39/conf/
...
&lt;span class=&quot;k&quot;&gt;********************************************&lt;/span&gt;
Vault is initialized and ready &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;use
Handshake with Vault &lt;span class=&quot;nb&quot;&gt;complete
&lt;/span&gt;Please enter a Digit::   0: Store a secured attribute  1: Check whether a secured attribute exists  2: Exit
2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Above is the whole step to use tomcat-vault to initialize the keystore. Let’s see the above process step by step. Here is the explanation:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Please enter a Digit::   0: Start Interactive Session  1: Remove Interactive Session  2: Exit
0
Starting an interactive session
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We choose &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; to start an interactive session to initialize keystore with tomcat-vault.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Enter directory to store encrypted files:/Users/weli/projs/apache-tomcat-8.0.39/conf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We have assigned a directory to store tomcat-vault encrypted data file. The data file is used to store username and password information, and it’s encrypted by the key pair in the key store.&lt;/p&gt;

&lt;p&gt;We will configure tomcat-vault to use &lt;code class=&quot;highlighter-rouge&quot;&gt;vault.keystore&lt;/code&gt;, and we will also configure tomcat-vault to use the key pair &lt;code class=&quot;highlighter-rouge&quot;&gt;my_vault&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;vault.keystore&lt;/code&gt; for encryption in following steps.&lt;/p&gt;

&lt;p&gt;Let go on seeing the configuration process:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Enter Keystore URL:/Users/weli/projs/apache-tomcat-8.0.39/conf/vault.keystore
Enter Keystore password: my_password123
Enter Keystore password again: my_password123
Values match
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here we enter the keystore password so tomcat-vault can access it and use the key pair inside for data encryption. Let’s see the next step:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Enter 8 character salt:1234abcd
Enter iteration count as a number &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Eg: 44&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:120
Enter Keystore Alias:my_vault
Initializing Vault
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here we need to enter ‘salt’ and ‘iteration count’ as we like, these two attributes are used by tomcat-vault to encrypt its data file. After all above parameters are set, tomcat-vault will finish the initialization process and output the settings:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;KEYSTORE_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/Users/weli/projs/apache-tomcat-8.0.39/conf/vault.keystore
&lt;span class=&quot;nv&quot;&gt;KEYSTORE_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;MASK-3CuP21KMHn7G6iH/A3YpM/
&lt;span class=&quot;nv&quot;&gt;KEYSTORE_ALIAS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;my_vault
&lt;span class=&quot;nv&quot;&gt;SALT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1234abcd
&lt;span class=&quot;nv&quot;&gt;ITERATION_COUNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;120
&lt;span class=&quot;nv&quot;&gt;ENC_FILE_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/Users/weli/projs/apache-tomcat-8.0.39/conf/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We need to store above config into a file. In this article, I put above config into a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;vault.properties&lt;/code&gt; and put it into &lt;code class=&quot;highlighter-rouge&quot;&gt;conf&lt;/code&gt; directory of tomcat:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;
/Users/weli/projs/apache-tomcat-8.0.39/conf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ls vault.properties
vault.properties
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cat vault.properties
&lt;span class=&quot;nv&quot;&gt;KEYSTORE_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;../conf/vault.keystore
&lt;span class=&quot;nv&quot;&gt;KEYSTORE_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;MASK-3CuP21KMHn7G6iH/A3YpM/
&lt;span class=&quot;nv&quot;&gt;KEYSTORE_ALIAS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;my_vault
&lt;span class=&quot;nv&quot;&gt;SALT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1234abcd
&lt;span class=&quot;nv&quot;&gt;ITERATION_COUNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;120
&lt;span class=&quot;nv&quot;&gt;ENC_FILE_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;../conf/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From the above &lt;code class=&quot;highlighter-rouge&quot;&gt;ENC_FILE_DIR&lt;/code&gt; setting, we can see the place where tomcat-vault put its data file in. Please note that we can use relative path in &lt;code class=&quot;highlighter-rouge&quot;&gt;KEYSTORE_URL&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ENC_FILE_DIR&lt;/code&gt; settings. Now let’s check whether the &lt;code class=&quot;highlighter-rouge&quot;&gt;VAULT.dat&lt;/code&gt; is in position:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;
/Users/weli/projs/apache-tomcat-8.0.39/conf
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ls VAULT.dat
VAULT.dat
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As the command output shown above, we can see the default name of the data file used by tomcat-vault is &lt;code class=&quot;highlighter-rouge&quot;&gt;VAULT.dat&lt;/code&gt;. Till now, we have three files generated into &lt;code class=&quot;highlighter-rouge&quot;&gt;conf&lt;/code&gt; directory:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;find . | grep -i vault
./VAULT.dat
./vault.keystore
./vault.properties
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In production environment, you should put above files into a safer place. Now we have finished initializing tomcat vault, the next step is to configure the tomcat to use the vault.&lt;/p&gt;

&lt;h3 id=&quot;configuring-tomcat-to-use-vault&quot;&gt;Configuring Tomcat To Use Vault&lt;/h3&gt;

&lt;p&gt;Now we can configure Tomcat to use Tomcat-Vault. For the first step, we need to put one line configuration into &lt;code class=&quot;highlighter-rouge&quot;&gt;conf/catalina.properties&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;apache&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;tomcat&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;util&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;digester&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;PROPERTY_SOURCE&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;apache&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;tomcat&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;vault&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;util&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;PropertySourceVault&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;catalina.properties&lt;/code&gt; is a long file, and you can just put the above configuration at the bottom of the file. This will load tomcat-vault into Tomcat during server startup, and it will use &lt;code class=&quot;highlighter-rouge&quot;&gt;vault.properties&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;conf&lt;/code&gt; directory by default.&lt;/p&gt;

&lt;p&gt;Now we will use &lt;code class=&quot;highlighter-rouge&quot;&gt;tomcat-vault&lt;/code&gt; to generate a manager password for Tomcat. This password will be encrypted by the &lt;code class=&quot;highlighter-rouge&quot;&gt;SecretKeyEntry&lt;/code&gt; in keystore. We need to find the tomcat-vault jar correctly, and if you follow the steps previously, it should be located in &lt;code class=&quot;highlighter-rouge&quot;&gt;lib&lt;/code&gt; directory of Tomcat:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lib/tomcat-vault-1.0.8.Final-jar-with-dependencies.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;java&lt;/code&gt; to run the jar to start tomcat-vault command line interface. Here is the command to do so:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;java -classpath lib/tomcat-vault-1.0.8.Final-jar-with-dependencies.jar &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
org.apache.tomcat.vault.VaultTool &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--keystore conf/vault.keystore &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--keystore-password my_password123 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--alias my_vault &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--enc-dir conf/ &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--iteration 120 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--salt 1234abcd &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--vault-block my_block &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--attribute manager_password &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--sec-attr P@SSW0#D
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’m running the above command under the root of tomcat directory, so I can add &lt;code class=&quot;highlighter-rouge&quot;&gt;lib/&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;conf/&lt;/code&gt; in the filepath so the &lt;code class=&quot;highlighter-rouge&quot;&gt;VaultTool&lt;/code&gt; can find keystore file and vault data file correctly.&lt;/p&gt;

&lt;p&gt;In addition, please see I have requested tomcat-vault to add a password named &lt;code class=&quot;highlighter-rouge&quot;&gt;manager_password&lt;/code&gt; into vault data, and the value of the password is &lt;code class=&quot;highlighter-rouge&quot;&gt;P@SSW0#D&lt;/code&gt;. Here is the output result of above command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Jan 04, 2017 11:52:33 PM org.apache.tomcat.vault.security.vault.PicketBoxSecurityVault init
INFO: PBOX000361: Default Security Vault Implementation Initialized and Ready
Secured attribute value has been stored &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;vault.
Please make note of the following:
&lt;span class=&quot;k&quot;&gt;********************************************&lt;/span&gt;
Vault Block:my_block
Attribute Name:manager_password
Shared Key:
Configuration should be &lt;span class=&quot;k&quot;&gt;done &lt;/span&gt;as follows:
VAULT::my_block::manager_password::
&lt;span class=&quot;k&quot;&gt;********************************************&lt;/span&gt;
Vault Configuration &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;tomcat properties file:
&lt;span class=&quot;k&quot;&gt;********************************************&lt;/span&gt;
...
&lt;span class=&quot;nv&quot;&gt;KEYSTORE_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;conf/vault.keystore
&lt;span class=&quot;nv&quot;&gt;KEYSTORE_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;MASK-3CuP21KMHn7G6iH/A3YpM/
&lt;span class=&quot;nv&quot;&gt;KEYSTORE_ALIAS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;my_vault
&lt;span class=&quot;nv&quot;&gt;SALT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1234abcd
&lt;span class=&quot;nv&quot;&gt;ITERATION_COUNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;120
&lt;span class=&quot;nv&quot;&gt;ENC_FILE_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;conf/
...
&lt;span class=&quot;k&quot;&gt;********************************************&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As the result output shown above, we can now refer to &lt;code class=&quot;highlighter-rouge&quot;&gt;manager_password&lt;/code&gt; in Tomcat configuration, and it will point to the true password &lt;code class=&quot;highlighter-rouge&quot;&gt;P@SSW0#D&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;VAULT.dat&lt;/code&gt;. The true password is encrypted by the &lt;code class=&quot;highlighter-rouge&quot;&gt;SecretKeyEntry&lt;/code&gt; in keystore, and only Tomcat can access it with the masked password &lt;code class=&quot;highlighter-rouge&quot;&gt;KEYSTORE_PASSWORD&lt;/code&gt; configured in &lt;code class=&quot;highlighter-rouge&quot;&gt;vault.properties&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now let’s use the &lt;code class=&quot;highlighter-rouge&quot;&gt;manager_password&lt;/code&gt; in Tomcat configuration. We can use it as the password of Tomcat user &lt;code class=&quot;highlighter-rouge&quot;&gt;manager&lt;/code&gt;. The first step is to open &lt;code class=&quot;highlighter-rouge&quot;&gt;conf/tomcat-users.xml&lt;/code&gt;, and then we can put one line of user data at the bottom of this file:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;user&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;username=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;manager&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;password=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${VAULT::my_block::manager_password::}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;roles=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;manager-gui&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As the configuration shown above, we can see the password of &lt;code class=&quot;highlighter-rouge&quot;&gt;manager&lt;/code&gt; is no longer plaintext, but a reference to the entry in VAULT. Till now, all the configurations are done and we are ready to start the Tomcat server for testing.&lt;/p&gt;

&lt;h3 id=&quot;testing-tomcat-vault-integration&quot;&gt;Testing Tomcat-Vault Integration&lt;/h3&gt;

&lt;p&gt;Now we can start the Tomcat server to test our configuration. Firstly, we need to start the server using the script &lt;code class=&quot;highlighter-rouge&quot;&gt;startup.sh&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;bin&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./startup.sh
Using CATALINA_BASE:   /Users/weli/projs/thoughts-on-jboss-webserver/apache-tomcat-8.0.39
Using CATALINA_HOME:   /Users/weli/projs/thoughts-on-jboss-webserver/apache-tomcat-8.0.39
Using CATALINA_TMPDIR: /Users/weli/projs/thoughts-on-jboss-webserver/apache-tomcat-8.0.39/temp
Using JRE_HOME:        /Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home
Using CLASSPATH:       /Users/weli/projs/thoughts-on-jboss-webserver/apache-tomcat-8.0.39/bin/bootstrap.jar:/Users/weli/projs/thoughts-on-jboss-webserver/apache-tomcat-8.0.39/bin/tomcat-juli.jar
Tomcat started.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From the above log output we can see Tomcat is started, and now let’s check whether tomcat-vault is loaded correctly. We can do a &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt; at &lt;code class=&quot;highlighter-rouge&quot;&gt;catalian.out&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;log&lt;/code&gt; directory of Tomcat:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cat catalina.out  | grep -i vault
05-Jan-2017 22:02:39.410 INFO &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;main] org.apache.tomcat.vault.security.vault.PicketBoxSecurityVault.init PBOX000361: Default Security Vault Implementation Initialized and Ready
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As the result shown above, we can see tomcat-vault is loaded correctly. The next step to verify that we can use the password stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;VAULT.dat&lt;/code&gt; for account &lt;code class=&quot;highlighter-rouge&quot;&gt;manager&lt;/code&gt;. By default the Tomcat server is listening on port &lt;code class=&quot;highlighter-rouge&quot;&gt;8080&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://127.0.0.1:8080
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can access the URL shown above and get the following page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/vault01.png&quot; alt=&quot;Tomcat Default Page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As the image shown above, we can see the default homepage of our Tomcat server. There is a button named &lt;code class=&quot;highlighter-rouge&quot;&gt;Manager App&lt;/code&gt; at top-right of the page, please click it, and the login window will popup:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/vault02.png&quot; alt=&quot;Login Page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can input &lt;code class=&quot;highlighter-rouge&quot;&gt;manager&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;Name&lt;/code&gt; field, and in &lt;code class=&quot;highlighter-rouge&quot;&gt;Password&lt;/code&gt; field we can input &lt;code class=&quot;highlighter-rouge&quot;&gt;P@SSW0#D&lt;/code&gt; as we set before. If tomcat-vault is working, then Tomcat should accept the password, though it’s encrypted and stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;VAULT.dat&lt;/code&gt;. Let’s try it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/vault03.png&quot; alt=&quot;Enter username and password&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The authentication is passed and we entered the manager page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/vault04.png&quot; alt=&quot;Manager Page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Till now we have gone through all the steps to integrate Tomcat-Vault into Tomcat. I have put a complete tomcat server into this repository, and it contains all the configuration files and keystore files we have used in this article. You can check it out and play with it&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;&lt;em&gt;References&lt;/em&gt;&lt;/h3&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://tomcat.apache.org/&quot;&gt;http://tomcat.apache.org/&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/picketbox/tomcat-vault&quot;&gt;https://github.com/picketbox/tomcat-vault&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
          <pubDate>2017-03-04T00:00:00+00:00</pubDate>
          <link>/2017/03/04/how-to-use-tomcat-vault.html</link>
          <guid isPermaLink="true">/2017/03/04/how-to-use-tomcat-vault.html</guid>
        </item>
      
    
      
        <item>
          <title>How To Use Apache Commons Daemon</title>
          <description>&lt;p&gt;Apache Commons Daemon is a tool provided by Apache community which can help you to manage your Java application as a standard system daemon. In this article I’d like to show you the basic usage of it.&lt;/p&gt;

&lt;p&gt;The Apache Commons Daemon consists of two parts: One part is written in Java called &lt;code class=&quot;highlighter-rouge&quot;&gt;commons-daemon&lt;/code&gt;, the other part is called &lt;code class=&quot;highlighter-rouge&quot;&gt;jsvc&lt;/code&gt; which is written in C.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;commons-daemon&lt;/code&gt; part gives you some Java interfaces that you should follow to wrap your server program. The most important interface you need to implement is &lt;code class=&quot;highlighter-rouge&quot;&gt;Daemon.java&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Daemon&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Initializes this &amp;lt;code&amp;gt;Daemon&amp;lt;/code&amp;gt; instance.
     * &amp;lt;p&amp;gt;
     *   This method gets called once the JVM process is created and the
     *   &amp;lt;code&amp;gt;Daemon&amp;lt;/code&amp;gt; instance is created thru its empty public
     *   constructor.
     * &amp;lt;/p&amp;gt;
     * &amp;lt;p&amp;gt;
     *   Under certain operating systems (typically Unix based operating
     *   systems) and if the native invocation framework is configured to do
     *   so, this method might be called with &amp;lt;i&amp;gt;super-user&amp;lt;/i&amp;gt; privileges.
     * &amp;lt;/p&amp;gt;
     * &amp;lt;p&amp;gt;
     *   For example, it might be wise to create &amp;lt;code&amp;gt;ServerSocket&amp;lt;/code&amp;gt;
     *   instances within the scope of this method, and perform all operations
     *   requiring &amp;lt;i&amp;gt;super-user&amp;lt;/i&amp;gt; privileges in the underlying operating
     *   system.
     * &amp;lt;/p&amp;gt;
     * &amp;lt;p&amp;gt;
     *   Apart from set up and allocation of native resources, this method
     *   must not start the actual operation of the &amp;lt;code&amp;gt;Daemon&amp;lt;/code&amp;gt; (such
     *   as starting threads calling the &amp;lt;code&amp;gt;ServerSocket.accept()&amp;lt;/code&amp;gt;
     *   method) as this would impose some serious security hazards. The
     *   start of operation must be performed in the &amp;lt;code&amp;gt;start()&amp;lt;/code&amp;gt;
     *   method.
     * &amp;lt;/p&amp;gt;
     *
     * @param context A &amp;lt;code&amp;gt;DaemonContext&amp;lt;/code&amp;gt; object used to
     * communicate with the container.
     * @exception DaemonInitException An exception that prevented
     * initialization where you want to display a nice message to the user,
     * rather than a stack trace.
     * @exception Exception Any exception preventing a successful
     *                      initialization.
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DaemonContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DaemonInitException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Starts the operation of this &amp;lt;code&amp;gt;Daemon&amp;lt;/code&amp;gt; instance. This
     * method is to be invoked by the environment after the init()
     * method has been successfully invoked and possibly the security
     * level of the JVM has been dropped. Implementors of this
     * method are free to start any number of threads, but need to
     * return control after having done that to enable invocation of
     * the stop()-method.
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Stops the operation of this &amp;lt;code&amp;gt;Daemon&amp;lt;/code&amp;gt; instance. Note
     * that the proper place to free any allocated resources such as
     * sockets or file descriptors is in the destroy method, as the
     * container may restart the Daemon by calling start() after
     * stop().
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Frees any resources allocated by this daemon such as file
     * descriptors or sockets. This method gets called by the container
     * after stop() has been called, before the JVM exits. The Daemon
     * can not be restarted after this method has been called without a
     * new call to the init() method.
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;destroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From the above interface we can see there are several methods related with a server cycle you should implement. How does &lt;code class=&quot;highlighter-rouge&quot;&gt;commons-daemon&lt;/code&gt; uses the above interface to manage your Java application? The answers lies in &lt;code class=&quot;highlighter-rouge&quot;&gt;jsvc&lt;/code&gt; part. &lt;code class=&quot;highlighter-rouge&quot;&gt;jsvc&lt;/code&gt; is written in C, and it provides you three processes&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, which are called the &lt;code class=&quot;highlighter-rouge&quot;&gt;Launcher Process&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;Controller Process&lt;/code&gt;, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;Controlled Process&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The purpose of the launcher process is very straight-forward, which will launch a child process. The child process will be a Java instance and it’s called the &lt;code class=&quot;highlighter-rouge&quot;&gt;controller process&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The controller process will start JVM and start your Java application by properly calling the &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;start&lt;/code&gt; methods defined in above interface. Then it will wait for standard Linux/UNIX process signals. So afterthen you can send standard Linux/UNIX signals to stop your Java application, and this process will call &lt;code class=&quot;highlighter-rouge&quot;&gt;stop&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;destroy&lt;/code&gt; methods according to the signal you send to this process.&lt;/p&gt;

&lt;p&gt;The started Java application process is called the &lt;code class=&quot;highlighter-rouge&quot;&gt;controlled process&lt;/code&gt;, it’s your Java application that is running. This process is downgraded to normal user privileges by using system capabilities like &lt;code class=&quot;highlighter-rouge&quot;&gt;setuid&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;setgid&lt;/code&gt; or so.&lt;/p&gt;

&lt;p&gt;How can &lt;code class=&quot;highlighter-rouge&quot;&gt;jsvc&lt;/code&gt; start JVM? It uses &lt;code class=&quot;highlighter-rouge&quot;&gt;JNI&lt;/code&gt; to interact with Java Virtual Machine. The fullname of &lt;code class=&quot;highlighter-rouge&quot;&gt;JNI&lt;/code&gt; is called &lt;code class=&quot;highlighter-rouge&quot;&gt;Java Native Interface&lt;/code&gt;&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, and it is a stanard framework to enables Java code running in a Java Virtual Machine (JVM) to call and be called by native applications. You don’t have to understand the details of &lt;code class=&quot;highlighter-rouge&quot;&gt;jsvc&lt;/code&gt;, but if you are interested in the implementation, you can see the usage of &lt;code class=&quot;highlighter-rouge&quot;&gt;JNI_CreateJavaVM()&lt;/code&gt; method provided by Java in &lt;code class=&quot;highlighter-rouge&quot;&gt;jsvc&lt;/code&gt; source code as a start point to learn about &lt;code class=&quot;highlighter-rouge&quot;&gt;jsvc&lt;/code&gt;. In general, the purpose of the &lt;code class=&quot;highlighter-rouge&quot;&gt;jsvc&lt;/code&gt; is to manage the lifecycle of your Java application by interacting with &lt;code class=&quot;highlighter-rouge&quot;&gt;Daemon&lt;/code&gt; interface on Java side, and you get the ability to start/stop your Java application by using standard system signals scheme.&lt;/p&gt;

&lt;p&gt;Now let’s start to learn how to use &lt;code class=&quot;highlighter-rouge&quot;&gt;commons-daemon&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;jsvc&lt;/code&gt; to manage the lifecycle of our Java application. There is an article that roughly describes the steps to integrate your Java application with &lt;code class=&quot;highlighter-rouge&quot;&gt;commons-daemon&lt;/code&gt;&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; you can check. In this article I’ll provide a more detailed explaination.&lt;/p&gt;

&lt;h3 id=&quot;integrate-your-java-application-with-commons-daemon&quot;&gt;Integrate your Java application with commons-daemon&lt;/h3&gt;

&lt;p&gt;Firstly, write a Java class that implements the &lt;code class=&quot;highlighter-rouge&quot;&gt;Daemon&lt;/code&gt; interface:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.commons.daemon.Daemon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.commons.daemon.DaemonContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyDaemon&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Daemon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DaemonContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MyDaemon init...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MyDaemon start...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MyDaemon stop...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;destroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MyDaemon destroy...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From the above code, we can see the Daemon interfaces defines four methods that controls you application cycle, which are &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;start&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;stop&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;destroy&lt;/code&gt;. And &lt;code class=&quot;highlighter-rouge&quot;&gt;jsvc&lt;/code&gt; will call these methods to start/stop your application properly. So it’s your responsibility to implement the above methods properly.&lt;/p&gt;

&lt;p&gt;Then we need to compile our Java project properly. I have put above &lt;code class=&quot;highlighter-rouge&quot;&gt;MyDaemon&lt;/code&gt; into a Gradle project&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;, so you can directly check it out and build a jar from it. You can go to the directory of the project, and then run &lt;code class=&quot;highlighter-rouge&quot;&gt;./gradlew fatJar&lt;/code&gt;. It will download the &lt;code class=&quot;highlighter-rouge&quot;&gt;gradle&lt;/code&gt; and build the project for you.&lt;/p&gt;

&lt;p&gt;After building it successfully, you can get the jar &lt;code class=&quot;highlighter-rouge&quot;&gt;build/libs/DaemonDemo-all-1.0.jar&lt;/code&gt;. This jar contains the above &lt;code class=&quot;highlighter-rouge&quot;&gt;MyDaemon&lt;/code&gt; class, and &lt;code class=&quot;highlighter-rouge&quot;&gt;commons-daemon&lt;/code&gt; jar as dependency.&lt;/p&gt;

&lt;p&gt;For the next step, we need to install &lt;code class=&quot;highlighter-rouge&quot;&gt;jsvc&lt;/code&gt; into our system. I use &lt;code class=&quot;highlighter-rouge&quot;&gt;Fedora Linux&lt;/code&gt;, so I use &lt;code class=&quot;highlighter-rouge&quot;&gt;dnf&lt;/code&gt; command to install the package provided by default:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apache-commons-daemon-jsvc.x86_64 : Java daemon launcher
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After installing it, we can see the files provided by above package:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;rpm -ql apache-commons-daemon-jsvc-1.0.15-10.fc23.x86_64
/usr/bin/jsvc
/usr/share/doc/apache-commons-daemon-jsvc
/usr/share/doc/apache-commons-daemon-jsvc/LICENSE.txt
/usr/share/doc/apache-commons-daemon-jsvc/NOTICE.txt
/usr/share/man/man1/jsvc.1.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As the file list shown above, the core file provided by the package is the binary file  &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin/jsvc&lt;/code&gt;. We will use this &lt;code class=&quot;highlighter-rouge&quot;&gt;jsvc&lt;/code&gt; to start our &lt;code class=&quot;highlighter-rouge&quot;&gt;MyDaemon&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Before starting &lt;code class=&quot;highlighter-rouge&quot;&gt;jsvc&lt;/code&gt;, we need to make sure the Java side, &lt;code class=&quot;highlighter-rouge&quot;&gt;apache-commons-daemon&lt;/code&gt;, is installed. You can download the jar from the Apache commons website directly&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;. I will use the one provided by Fedora directly:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apache-commons-daemon.noarch : Defines API to support an alternative invocation mechanism
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above package will provide the commons-daemon jar:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;weli@localhost projs]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rpm -ql apache-commons-daemon-1.0.15-1.redhat_1.ep6.el6.noarch
/usr/share/java/apache-commons-daemon-1.0.15-redhat-1.jar
/usr/share/java/apache-commons-daemon.jar
/usr/share/java/commons-daemon-1.0.15-redhat-1.jar
/usr/share/java/commons-daemon.jar
/usr/share/java/jakarta-commons-daemon-1.0.15-redhat-1.jar
/usr/share/java/jakarta-commons-daemon.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Above jars are acutally the same, most of them are symbolic links to the same actual jar file, so referring to anyone is the same. Now I can use &lt;code class=&quot;highlighter-rouge&quot;&gt;jsvc&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;commons-daemon.jar&lt;/code&gt; to start our &lt;code class=&quot;highlighter-rouge&quot;&gt;MyDaemon&lt;/code&gt;. The command is like the following:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo /usr/bin/jsvc &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
-debug &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
-nodetach &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
-cp /home/weli/projs/jboss-webserver-and-eap-high-availability/DaemonDemo/build/libs:/usr/share/java/commons-daemon-1.0.15-redhat-1.jar MyDaemon
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As the command shown above, we have used &lt;code class=&quot;highlighter-rouge&quot;&gt;nodetach&lt;/code&gt; option to make the program a daemon, and we use &lt;code class=&quot;highlighter-rouge&quot;&gt;cp&lt;/code&gt; option to tell &lt;code class=&quot;highlighter-rouge&quot;&gt;jsvc&lt;/code&gt; to find our jar and &lt;code class=&quot;highlighter-rouge&quot;&gt;commons-daemon&lt;/code&gt; jar. Finally we have told &lt;code class=&quot;highlighter-rouge&quot;&gt;jsvc&lt;/code&gt; our class that implements the &lt;code class=&quot;highlighter-rouge&quot;&gt;Daemon&lt;/code&gt; interface. Because we have used &lt;code class=&quot;highlighter-rouge&quot;&gt;debug&lt;/code&gt; option, so the output of above command is very long. Here is the whole output:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+-- DUMPING PARSED COMMAND LINE ARGUMENTS --------------
| Detach:          False
| Show Version:    No
| Show Help:       No
| Check Only:      Disabled
| Stop:            False
| Wait:            0
| Run as service:  No
| Install service: No
| Remove service:  No
| JVM Name:        &lt;span class=&quot;s2&quot;&gt;&quot;null&quot;&lt;/span&gt;
| Java Home:       &lt;span class=&quot;s2&quot;&gt;&quot;null&quot;&lt;/span&gt;
| PID File:        &lt;span class=&quot;s2&quot;&gt;&quot;/var/run/jsvc.pid&quot;&lt;/span&gt;
| User Name:       &lt;span class=&quot;s2&quot;&gt;&quot;null&quot;&lt;/span&gt;
| Extra Options:   1
|   &lt;span class=&quot;s2&quot;&gt;&quot;-Djava.class.path=/home/weli/projs/jboss-webserver-and-eap-high-availability/DaemonDemo/build/libs:/usr/share/java/commons-daemon-1.0.15-redhat-1.jar&quot;&lt;/span&gt;
| Class Invoked:   &lt;span class=&quot;s2&quot;&gt;&quot;MyDaemon&quot;&lt;/span&gt;
| Class Arguments: 0
+-------------------------------------------------------
Home not specified on &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;line, using environment
Home not on &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;line or &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;environment, searching
Attempting to locate Java Home &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /usr/java/default
Path /usr/java/default is not a directory
Attempting to locate Java Home &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /usr/java
Path /usr/java is not a directory
Attempting to locate Java Home &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /usr/local/java
Path /usr/local/java is not a directory
Attempting to locate Java Home &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /usr/lib/jvm/default-java
Path /usr/lib/jvm/default-java is not a directory
Attempting to locate Java Home &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /usr/lib/jvm/java
Attempting to locate VM configuration file /usr/lib/jvm/java/jre/lib/jvm.cfg
Attempting to locate VM configuration file /usr/lib/jvm/java/lib/jvm.cfg
Attempting to locate VM configuration file /usr/lib/jvm/java/jre/lib/amd64/jvm.cfg
Found VM configuration file at /usr/lib/jvm/java/jre/lib/amd64/jvm.cfg
Found VM server definition &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;configuration
Checking library /usr/lib/jvm/java/jre/lib/amd64/server/libjvm.so
Found VM client definition &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;configuration
Checking library /usr/lib/jvm/java/jre/lib/amd64/client/libjvm.so
Checking library /usr/lib/jvm/java/lib/amd64/client/libjvm.so
Cannot locate library &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;VM client &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;skipping&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Java Home located &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /usr/lib/jvm/java
+-- DUMPING JAVA HOME STRUCTURE ------------------------
| Java Home:       &lt;span class=&quot;s2&quot;&gt;&quot;/usr/lib/jvm/java&quot;&lt;/span&gt;
| Java VM Config.: &lt;span class=&quot;s2&quot;&gt;&quot;/usr/lib/jvm/java/jre/lib/amd64/jvm.cfg&quot;&lt;/span&gt;
| Found JVMs:      1
| JVM Name:        &lt;span class=&quot;s2&quot;&gt;&quot;server&quot;&lt;/span&gt;
|                  &lt;span class=&quot;s2&quot;&gt;&quot;/usr/lib/jvm/java/jre/lib/amd64/server/libjvm.so&quot;&lt;/span&gt;
+-------------------------------------------------------
Using default JVM &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /usr/lib/jvm/java/jre/lib/amd64/server/libjvm.so
Invoking w/ &lt;span class=&quot;nv&quot;&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/lib/jvm/java/jre/lib/amd64/server:/usr/lib/jvm/java/jre/lib/amd64
+-- DUMPING PARSED COMMAND LINE ARGUMENTS --------------
| Detach:          False
| Show Version:    No
| Show Help:       No
| Check Only:      Disabled
| Stop:            False
| Wait:            0
| Run as service:  No
| Install service: No
| Remove service:  No
| JVM Name:        &lt;span class=&quot;s2&quot;&gt;&quot;null&quot;&lt;/span&gt;
| Java Home:       &lt;span class=&quot;s2&quot;&gt;&quot;null&quot;&lt;/span&gt;
| PID File:        &lt;span class=&quot;s2&quot;&gt;&quot;/var/run/jsvc.pid&quot;&lt;/span&gt;
| User Name:       &lt;span class=&quot;s2&quot;&gt;&quot;null&quot;&lt;/span&gt;
| Extra Options:   1
|   &lt;span class=&quot;s2&quot;&gt;&quot;-Djava.class.path=/home/weli/projs/jboss-webserver-and-eap-high-availability/DaemonDemo/build/libs:/usr/share/java/commons-daemon-1.0.15-redhat-1.jar&quot;&lt;/span&gt;
| Class Invoked:   &lt;span class=&quot;s2&quot;&gt;&quot;MyDaemon&quot;&lt;/span&gt;
| Class Arguments: 0
+-------------------------------------------------------
Home not specified on &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;line, using environment
Home not on &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;line or &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;environment, searching
Attempting to locate Java Home &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /usr/java/default
Path /usr/java/default is not a directory
Attempting to locate Java Home &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /usr/java
Path /usr/java is not a directory
Attempting to locate Java Home &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /usr/local/java
Path /usr/local/java is not a directory
Attempting to locate Java Home &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /usr/lib/jvm/default-java
Path /usr/lib/jvm/default-java is not a directory
Attempting to locate Java Home &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /usr/lib/jvm/java
Attempting to locate VM configuration file /usr/lib/jvm/java/jre/lib/jvm.cfg
Attempting to locate VM configuration file /usr/lib/jvm/java/lib/jvm.cfg
Attempting to locate VM configuration file /usr/lib/jvm/java/jre/lib/amd64/jvm.cfg
Found VM configuration file at /usr/lib/jvm/java/jre/lib/amd64/jvm.cfg
Found VM server definition &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;configuration
Checking library /usr/lib/jvm/java/jre/lib/amd64/server/libjvm.so
Found VM client definition &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;configuration
Checking library /usr/lib/jvm/java/jre/lib/amd64/client/libjvm.so
Checking library /usr/lib/jvm/java/lib/amd64/client/libjvm.so
Cannot locate library &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;VM client &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;skipping&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Java Home located &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /usr/lib/jvm/java
+-- DUMPING JAVA HOME STRUCTURE ------------------------
| Java Home:       &lt;span class=&quot;s2&quot;&gt;&quot;/usr/lib/jvm/java&quot;&lt;/span&gt;
| Java VM Config.: &lt;span class=&quot;s2&quot;&gt;&quot;/usr/lib/jvm/java/jre/lib/amd64/jvm.cfg&quot;&lt;/span&gt;
| Found JVMs:      1
| JVM Name:        &lt;span class=&quot;s2&quot;&gt;&quot;server&quot;&lt;/span&gt;
|                  &lt;span class=&quot;s2&quot;&gt;&quot;/usr/lib/jvm/java/jre/lib/amd64/server/libjvm.so&quot;&lt;/span&gt;
+-------------------------------------------------------
Running w/ &lt;span class=&quot;nv&quot;&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/lib/jvm/java/jre/lib/amd64/server:/usr/lib/jvm/java/jre/lib/amd64
redirecting stdout to /dev/null and stderr to /dev/null
Switching &lt;span class=&quot;nb&quot;&gt;umask &lt;/span&gt;back to 022 from 077
Using default JVM &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /usr/lib/jvm/java/jre/lib/amd64/server/libjvm.so
Attemtping to load library /usr/lib/jvm/java/jre/lib/amd64/server/libjvm.so
JVM library /usr/lib/jvm/java/jre/lib/amd64/server/libjvm.so loaded
JVM library entry point found &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0x924610A0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
+-- DUMPING JAVA VM CREATION ARGUMENTS -----------------
| Version:                       0x010004
| Ignore Unrecognized Arguments: False
| Extra options:                 1
|   &lt;span class=&quot;s2&quot;&gt;&quot;-Djava.class.path=/home/weli/projs/jboss-webserver-and-eap-high-availability/DaemonDemo/build/libs:/usr/share/java/commons-daemon-1.0.15-redhat-1.jar&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0x00000000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
+-------------------------------------------------------
| Internal options:              4
|   &lt;span class=&quot;s2&quot;&gt;&quot;-Dcommons.daemon.process.id=31380&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0x00000000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
|   &lt;span class=&quot;s2&quot;&gt;&quot;-Dcommons.daemon.process.parent=31379&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0x00000000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
|   &lt;span class=&quot;s2&quot;&gt;&quot;-Dcommons.daemon.version=1.0.15-dev&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0x00000000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
|   &lt;span class=&quot;s2&quot;&gt;&quot;abort&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0xf9b3e0a0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
+-------------------------------------------------------
Java VM created successfully
Class org/apache/commons/daemon/support/DaemonLoader found
Native methods registered
java_init &lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;Daemon loading...
MyDaemon init...
Daemon loaded successfully
java_load &lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;MyDaemon start...
Daemon started successfully
java_start &lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;Waiting &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;a signal to be delivered
create_tmp_file: /tmp/31380.jsvc_up
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From above log we can see all the details of the process. We can see &lt;code class=&quot;highlighter-rouge&quot;&gt;jsvc&lt;/code&gt; tried to find &lt;code class=&quot;highlighter-rouge&quot;&gt;java&lt;/code&gt; from several predefined locations, and finally it found the &lt;code class=&quot;highlighter-rouge&quot;&gt;java&lt;/code&gt; provided by Fedora, and it shows how it uses &lt;code class=&quot;highlighter-rouge&quot;&gt;DaemonLoader&lt;/code&gt; and start our &lt;code class=&quot;highlighter-rouge&quot;&gt;MyDaemon&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now let’s analyze the processes created by &lt;code class=&quot;highlighter-rouge&quot;&gt;jsvc&lt;/code&gt;. As we have learned, &lt;code class=&quot;highlighter-rouge&quot;&gt;jsvc&lt;/code&gt; itself is a &lt;code class=&quot;highlighter-rouge&quot;&gt;Launcher Process&lt;/code&gt;, it will start a JVM instance called &lt;code class=&quot;highlighter-rouge&quot;&gt;Controller Process&lt;/code&gt;, which will interact with launcher to listen to standard system signals. The controller will start our Daemon program as a standalone process as the &lt;code class=&quot;highlighter-rouge&quot;&gt;Controlled Process&lt;/code&gt;, the controlled process will accept the management of controller, because controller process can control the child(controlled) process by using the implemented &lt;code class=&quot;highlighter-rouge&quot;&gt;Daemon&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;We can use &lt;code class=&quot;highlighter-rouge&quot;&gt;ps&lt;/code&gt; command to verify this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;weli@localhost projs]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ps -ef | grep jsvc
root      2376   316  0 18:12 pts/5    00:00:00 sudo /usr/bin/jsvc -debug -nodetach -cp /home/weli/projs/jboss-webserver-and-eap-high-availability/DaemonDemo/build/libs:/usr/share/java/commons-daemon-1.0.15-redhat-1.jar MyDaemon
root      2385  2376  0 18:12 pts/5    00:00:00 jsvc.exec -debug -nodetach -cp /home/weli/projs/jboss-webserver-and-eap-high-availability/DaemonDemo/build/libs:/usr/share/java/commons-daemon-1.0.15-redhat-1.jar MyDaemon
root      2386  2385  0 18:12 pts/5    00:00:00 jsvc.exec -debug -nodetach -cp /home/weli/projs/jboss-webserver-and-eap-high-availability/DaemonDemo/build/libs:/usr/share/java/commons-daemon-1.0.15-redhat-1.jar MyDaemon
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From above we can see three processes. The &lt;code class=&quot;highlighter-rouge&quot;&gt;jsvc&lt;/code&gt; itself is obviously the launcher. For the other to processes, we can refer to &lt;code class=&quot;highlighter-rouge&quot;&gt;jsvc&lt;/code&gt; debug output to understand it:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+-------------------------------------------------------
| Internal options:              4
|   &lt;span class=&quot;s2&quot;&gt;&quot;-Dcommons.daemon.process.id=2386&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0x00000000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
|   &lt;span class=&quot;s2&quot;&gt;&quot;-Dcommons.daemon.process.parent=2385&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0x00000000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
|   &lt;span class=&quot;s2&quot;&gt;&quot;-Dcommons.daemon.version=1.0.15-dev&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0x00000000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
|   &lt;span class=&quot;s2&quot;&gt;&quot;abort&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0xfc2fc0a0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
+-------------------------------------------------------
Java VM created successfully
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So the parent is the controller, and the other one is the worker. After the &lt;code class=&quot;highlighter-rouge&quot;&gt;jsvc&lt;/code&gt; is started as a daemon, we can now pressing &lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL-C&lt;/code&gt; to send a &lt;code class=&quot;highlighter-rouge&quot;&gt;SIGINT&lt;/code&gt; signal to the process, and we can see the following output:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;^CCaught SIGINT: Scheduling a shutdown
remove_tmp_file: /tmp/2386.jsvc_up
Shutdown or reload requested: exiting
MyDaemon stop...
Forwarding signal 2 to process 2386
Caught SIGINT: Scheduling a shutdown
Shutdown or reload already scheduled
Daemon stopped successfully
MyDaemon destroy...
Daemon destroyed successfully
Calling System.exit&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Service shut down
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As the log shown above, we can see how &lt;code class=&quot;highlighter-rouge&quot;&gt;jsvc&lt;/code&gt; handles the signal properly and gracefully shutdown our &lt;code class=&quot;highlighter-rouge&quot;&gt;MyDaemon&lt;/code&gt;. So it’s our responsibility to implement &lt;code class=&quot;highlighter-rouge&quot;&gt;Daemon&lt;/code&gt; interface correctly, so &lt;code class=&quot;highlighter-rouge&quot;&gt;jsvc&lt;/code&gt; can use our implementation properly.&lt;/p&gt;

&lt;h3 id=&quot;whats-the-difference-between-systemd-and-jsvc&quot;&gt;What’s the difference between systemd and jsvc&lt;/h3&gt;

&lt;p&gt;Currently the &lt;code class=&quot;highlighter-rouge&quot;&gt;systemd&lt;/code&gt; can achieve most parts of  the process control function provided by &lt;code class=&quot;highlighter-rouge&quot;&gt;jsvc&lt;/code&gt;, but &lt;code class=&quot;highlighter-rouge&quot;&gt;jsvc&lt;/code&gt; can let the server to bind to privileged port and then drop the root access properly. To see more differences between &lt;code class=&quot;highlighter-rouge&quot;&gt;systemd&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;jsvc&lt;/code&gt;, you can check this page&lt;sup id=&quot;fnref:6&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;&lt;em&gt;References&lt;/em&gt;&lt;/h3&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://commons.apache.org/proper/commons-daemon/jsvc.html&quot;&gt;Jsvc&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Java_Native_Interface&quot;&gt;Java Native Interface&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/7687159/how-to-convert-a-java-program-to-daemon-with-jsvc&quot;&gt;How to convert a java program to daemon with jsvc?&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/liweinan/jboss-webserver-and-eap-high-availability/tree/master/DaemonDemo&quot;&gt;DaemonDemo&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://commons.apache.org/proper/commons-daemon/download_daemon.cgi&quot;&gt;Download Commons Daemon&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:6&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/28894008/what-benefit-do-i-get-from-jsvc-over-just-using-systemd&quot;&gt;What benefit do I get from JSVC over just using systemd?&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:6&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
          <pubDate>2017-03-04T00:00:00+00:00</pubDate>
          <link>/2017/03/04/how-to-use-commons-daemon.html</link>
          <guid isPermaLink="true">/2017/03/04/how-to-use-commons-daemon.html</guid>
        </item>
      
    
      
        <item>
          <title>A Java Implementation of Dijkstra's Algorithm</title>
          <description>&lt;p&gt;In this article I’d like to show you a java implementation of Dijkstra’s Algorithm I’ve written.&lt;/p&gt;

&lt;p&gt;I’m reading the book &lt;em&gt;Grokking Algorithm&lt;/em&gt;&lt;sup id=&quot;fnref:grok&quot;&gt;&lt;a href=&quot;#fn:grok&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; recently, and it introduces &lt;em&gt;Dijkstra’s Algorithm&lt;/em&gt; in chapter 7. Here is a java implementation I’ve written:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * Created by weli on 26/02/2017.
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Graph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Edge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getWeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Edge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;{&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; / &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Edge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// to -&amp;gt; from&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fin&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;processed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;processed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getFin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Edge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MAX_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nextCheapestNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// all nodes are processed&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cheapest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MAX_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cheapestNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;entrySet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Updated cost:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cheapest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;processed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cheapest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cheapestNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;next cheapest: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cheapestNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cheapestNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dijkstra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Initial costs: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextCheapestNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Edge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neighbors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findNeighbors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Edge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neighbor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neighbors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newCost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neighbor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;neighbor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newCost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;neighbor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newCost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;neighbor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neighbor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;processed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextCheapestNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generatePath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;StringBuffer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;entrySet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &amp;lt;- &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;entrySet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &amp;lt;- &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Edge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findNeighbors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Edge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neighbors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Edge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;neighbors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neighbors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Graph{&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;edges=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;sc&quot;&gt;'}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Graph&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Graph&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fin&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fin&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dijkstra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;generatePath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’ll introduce the above implementation in this article. Firstly, the usage is like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Graph&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Graph&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fin&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fin&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dijkstra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;generatePath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above code created a &lt;code class=&quot;highlighter-rouge&quot;&gt;Graph&lt;/code&gt; class, and added &lt;em&gt;edges&lt;/em&gt; into the &lt;em&gt;graph&lt;/em&gt;, and then the &lt;code class=&quot;highlighter-rouge&quot;&gt;dijkstra()&lt;/code&gt; method is executed to calculate the &lt;em&gt;cheapest path&lt;/em&gt;. Here is the execution result:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Graph{edges=[{start-&amp;gt;a / 1}, {start-&amp;gt;b / 1}, {a-&amp;gt;b / 1}, {b-&amp;gt;c / 1}, {a-&amp;gt;c / 1}, {c-&amp;gt;fin / 1}, {b-&amp;gt;fin / 1}]}
Initial costs: {a=1, b=1, c=2147483647, fin=2147483647}
Updated cost:a=1
Updated cost:b=1
Updated cost:c=2147483647
Updated cost:fin=2147483647
next cheapest: b
Updated cost:a=1
Updated cost:b=1
Updated cost:c=2
Updated cost:fin=2
next cheapest: a
Updated cost:a=1
Updated cost:b=1
Updated cost:c=2
Updated cost:fin=2
next cheapest: c
{b=start, c=b, fin=b}
fin &amp;lt;- b &amp;lt;- start
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can see how the path costs are updated in each iteration, and how the final path is calculated at last. Here is the class diagram:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/dig-class.png&quot; alt=&quot;Class Diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Graph&lt;/code&gt; class is to store the structure &lt;em&gt;DAG&lt;/em&gt;, of which the full name is &lt;em&gt;Directed Acyclic Graph&lt;/em&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;Graph&lt;/code&gt; contains a lot of &lt;em&gt;edges&lt;/em&gt;, so the &lt;code class=&quot;highlighter-rouge&quot;&gt;Edge&lt;/code&gt; class is to represent the structure.&lt;/p&gt;

&lt;p&gt;Here are the attributes in &lt;code class=&quot;highlighter-rouge&quot;&gt;Edge&lt;/code&gt; class:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Edge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;from&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;to&lt;/code&gt; are two nodes of connected by the edge. We use &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; as node class. This is okay because we don’t allow different nodes to have same name. The &lt;code class=&quot;highlighter-rouge&quot;&gt;weight&lt;/code&gt; attribute is straight-forward and it stores the weight of this edge for calculation. Because &lt;code class=&quot;highlighter-rouge&quot;&gt;Graph&lt;/code&gt; contains many &lt;em&gt;edges&lt;/em&gt;, so in &lt;code class=&quot;highlighter-rouge&quot;&gt;Graph&lt;/code&gt; class, we store these edges like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Edge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We also need to store all the &lt;em&gt;nodes&lt;/em&gt; in graph for later calculation:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Please note we use &lt;code class=&quot;highlighter-rouge&quot;&gt;Set&amp;lt;String&amp;gt;&lt;/code&gt; to store the &lt;code class=&quot;highlighter-rouge&quot;&gt;nodes&lt;/code&gt;, because &lt;code class=&quot;highlighter-rouge&quot;&gt;Set&lt;/code&gt; type will not store entries with same value. This can ensure no duplicated nodes will appear in the data structure. The next important data structure is the &lt;em&gt;cost table&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This table stores the &lt;em&gt;weight sum&lt;/em&gt; from the start point to the target node. During calculation process, this table will be keep updated.&lt;/p&gt;

&lt;p&gt;Another important thing is that we use &lt;code class=&quot;highlighter-rouge&quot;&gt;Map&amp;lt;String, Integer&amp;gt;&lt;/code&gt; type to store the &lt;em&gt;node &amp;lt;-&amp;gt; weight sum&lt;/em&gt; pair，because the &lt;code class=&quot;highlighter-rouge&quot;&gt;Map&lt;/code&gt; type is simliar to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Set&lt;/code&gt; type, it won’t accept duplicate key value, which means it won’t contain multiple entries for same &lt;code class=&quot;highlighter-rouge&quot;&gt;node&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If we put a &lt;em&gt;String &amp;lt;-&amp;gt; Integer&lt;/em&gt; pair with an existing &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; value in &lt;code class=&quot;highlighter-rouge&quot;&gt;Map&lt;/code&gt;, it will just update the existing entry. That is just what we need: to update the &lt;em&gt;node &amp;lt;-&amp;gt; weight sum&lt;/em&gt; entry with new value.&lt;/p&gt;

&lt;p&gt;We also need to mark the &lt;em&gt;start node&lt;/em&gt; and the &lt;em&gt;end node&lt;/em&gt; of a graph, and here are the relative attributes in &lt;code class=&quot;highlighter-rouge&quot;&gt;Graph&lt;/code&gt; class:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fin&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can compare the node name in calculation process to check if it is start or end point. Now let us check the methods in &lt;code class=&quot;highlighter-rouge&quot;&gt;Graph&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Edge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MAX_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The purpose of above method is to add an &lt;em&gt;edge&lt;/em&gt; into &lt;em&gt;graph&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Edge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And also add the two nodes of the edge into &lt;code class=&quot;highlighter-rouge&quot;&gt;nodes&lt;/code&gt; set:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We do not need to worry that we will add duplicate nodes into &lt;code class=&quot;highlighter-rouge&quot;&gt;nodes&lt;/code&gt; set, because the type of &lt;code class=&quot;highlighter-rouge&quot;&gt;nodes&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;Set&lt;/code&gt;, it does not contain duplicate entries with same value. Adding the &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; with same value will just overwrite the existing one. The next important task of &lt;code class=&quot;highlighter-rouge&quot;&gt;addEdge&lt;/code&gt; is to update the &lt;code class=&quot;highlighter-rouge&quot;&gt;costs&lt;/code&gt; table:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MAX_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We need to consider two conditions as shown above: Firstly, we need to check if the added edge is connected with start point. If so, we need to save the true weight into &lt;code class=&quot;highlighter-rouge&quot;&gt;costs&lt;/code&gt; table, because they are initial edges need to be calculated by the algorithm.&lt;/p&gt;

&lt;p&gt;Otherwise, we just use &lt;code class=&quot;highlighter-rouge&quot;&gt;Integer.MAX_VALUE&lt;/code&gt; as the weight of the edge, because we do not want the algorithm to pick up these edges in initial calculation. During the calculation process, the true costs of these edges can be fetched from the &lt;code class=&quot;highlighter-rouge&quot;&gt;weight&lt;/code&gt; attribute of &lt;code class=&quot;highlighter-rouge&quot;&gt;Edge&lt;/code&gt; class later for calculation. Please note this condition:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We need to check whether &lt;code class=&quot;highlighter-rouge&quot;&gt;costs&lt;/code&gt; table contains the &lt;code class=&quot;highlighter-rouge&quot;&gt;to&lt;/code&gt; node of the added edge, in case the weight value is overwrittee. This is important because the node connecting with start node may be part of multiple edges, and the edge that is not connecting with start node may overwrite the weight value of this node. Here is the diagram for example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/dij01.jpg&quot; alt=&quot;Graph&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As the diagram shown above,  &lt;em&gt;b&lt;/em&gt; is connected with both &lt;em&gt;start&lt;/em&gt; and &lt;em&gt;c&lt;/em&gt;, so it belongs to two edges: &lt;em&gt;start -&amp;gt; b&lt;/em&gt; and &lt;em&gt;b -&amp;gt; c&lt;/em&gt;. In this case, if we add edge &lt;em&gt;start -&amp;gt; b&lt;/em&gt; firstly, the cost of b will be 1 in &lt;code class=&quot;highlighter-rouge&quot;&gt;costs&lt;/code&gt; table.&lt;/p&gt;

&lt;p&gt;But if we add edge &lt;em&gt;b -&amp;gt; c&lt;/em&gt; later, the cost of b will be updated with value &lt;code class=&quot;highlighter-rouge&quot;&gt;Integer.MAX_VALUE&lt;/code&gt; if we don’t check the existing value in &lt;code class=&quot;highlighter-rouge&quot;&gt;costs&lt;/code&gt; table, and then the algorithm will fail because the initial weight of &lt;em&gt;b&lt;/em&gt;, which is connected with start node, is not correct. Now let’s see &lt;code class=&quot;highlighter-rouge&quot;&gt;nextCheapestNode()&lt;/code&gt; method：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nextCheapestNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// all nodes are processed&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cheapest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MAX_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cheapestNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;entrySet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Updated cost:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cheapest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;processed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cheapest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cheapestNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;next cheapest: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cheapestNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cheapestNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This method is to find the next cheapest node that is not processed yet. Here is the important part:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cheapest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;processed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We used a &lt;code class=&quot;highlighter-rouge&quot;&gt;processed&lt;/code&gt; list to store the nodes that have been processed in &lt;code class=&quot;highlighter-rouge&quot;&gt;Graph&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After all the nodes are calculated, then all the nodes should be in &lt;code class=&quot;highlighter-rouge&quot;&gt;processed&lt;/code&gt; list. Here is the end condition:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// all nodes are processed&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We need to initialize the &lt;code class=&quot;highlighter-rouge&quot;&gt;processed&lt;/code&gt; list in &lt;code class=&quot;highlighter-rouge&quot;&gt;Graph&lt;/code&gt; like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;processed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;processed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Because start and end nodes will never be calculated and they are already processed. Now let us check the entry function:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dijkstra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Initial costs: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextCheapestNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Edge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neighbors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findNeighbors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Edge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neighbor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neighbors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newCost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neighbor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;neighbor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newCost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;neighbor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newCost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;neighbor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neighbor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;processed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextCheapestNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This function will find the first node to calculate:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextCheapestNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then it will enter the calculation loop to calculate all the nodes in graph according to the algorithm:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In the loop, the function will find the next cheapest node, calculate the path weight, and update the &lt;code class=&quot;highlighter-rouge&quot;&gt;costs&lt;/code&gt; table. In additon, it will generate the &lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// to -&amp;gt; from&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt; is the &lt;code class=&quot;highlighter-rouge&quot;&gt;parent&lt;/code&gt; data structure in the book, it contains the &lt;em&gt;to -&amp;gt; from&lt;/em&gt; data pair. We can use this data structure to generate a complete path from end to start.&lt;/p&gt;

&lt;p&gt;Why it’s from end to start? It’s determined by the algorithm calculation process, we may have some orphan paths in above data structure as the result of updated costs calculation, but we can always find a sole path from end to the start.&lt;/p&gt;

&lt;p&gt;During the calculation process, if it finds a cheaper path, the &lt;code class=&quot;highlighter-rouge&quot;&gt;from&lt;/code&gt; of a &lt;code class=&quot;highlighter-rouge&quot;&gt;to&lt;/code&gt; will be updated, so we use &lt;code class=&quot;highlighter-rouge&quot;&gt;to&lt;/code&gt; as &lt;em&gt;key&lt;/em&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;from&lt;/code&gt; as &lt;em&gt;value&lt;/em&gt;. In this way, where is the &lt;code class=&quot;highlighter-rouge&quot;&gt;to&lt;/code&gt; from is always unique, and some &lt;em&gt;to -&amp;gt; from&lt;/em&gt; entries will become orphan and useless. But that doesn’t matter, because we get a unique &lt;em&gt;to &amp;lt;- from &amp;lt;- to &amp;lt;- from&lt;/em&gt; path. We can clear &lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt; data easily. Finally let’s recheck the usage of the codes:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Graph&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Graph&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fin&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fin&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above codes will create this graph:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/dij02.jpg&quot; alt=&quot;Graph&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then we execute the algorithm:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dijkstra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And finally we print out the path:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;generatePath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;generatePath()&lt;/code&gt; is to print the path from &lt;em&gt;end&lt;/em&gt; to &lt;em&gt;start&lt;/em&gt; by using &lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt; data:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generatePath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;StringBuffer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;entrySet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &amp;lt;- &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	        &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;entrySet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &amp;lt;- &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	            &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	                &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	                &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It will find the end node firstly, and use it as the initial &lt;code class=&quot;highlighter-rouge&quot;&gt;to&lt;/code&gt;, then it will find its &lt;code class=&quot;highlighter-rouge&quot;&gt;from&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt; data, and do this in a loop and it reaches the start point. Let’s see the result:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Updated cost:fin=2
fin &amp;lt;- b &amp;lt;- start
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The cheapest path of above graph is &lt;em&gt;fin &amp;lt;- b &amp;lt;- start&lt;/em&gt;. Now let’s try to change the weight of some nodes:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fin&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addEdge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fin&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The graph becomes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/dij03.jpg&quot; alt=&quot;Graph&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see the weight of &lt;em&gt;start -&amp;gt; b&lt;/em&gt; and &lt;em&gt;b -&amp;gt; c&lt;/em&gt; have been increased. Now let’s rerun the algorithm:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Updated cost:fin=3
fin &amp;lt;- c &amp;lt;- a &amp;lt;- start
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can see the cheapest path has been changed accordingly. Dijkstra’s Algorithm is an interesting algorithm and worth studying.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;&lt;em&gt;References&lt;/em&gt;&lt;/h3&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:grok&quot;&gt;
      &lt;p&gt;Bhargava, Aditya Y.. &lt;em&gt;Grokking Algorithms: An Illustrated Guide for Programmers and Other Curious People.&lt;/em&gt; Shelter Island: Manning, 2016. Print.&amp;nbsp;&lt;a href=&quot;#fnref:grok&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
          <pubDate>2017-03-04T00:00:00+00:00</pubDate>
          <link>/2017/03/04/Dijkstra-algorithm.html</link>
          <guid isPermaLink="true">/2017/03/04/Dijkstra-algorithm.html</guid>
        </item>
      
    
  </channel>
</rss>
